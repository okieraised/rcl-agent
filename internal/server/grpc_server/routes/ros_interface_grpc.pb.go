// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: ros_interface.proto

package routes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ROSInterface_TopicList_FullMethodName             = "/routes.ROSInterface/TopicList"
	ROSInterface_StreamCompressedImage_FullMethodName = "/routes.ROSInterface/StreamCompressedImage"
	ROSInterface_StreamJointStates_FullMethodName     = "/routes.ROSInterface/StreamJointStates"
	ROSInterface_UploadJointCommands_FullMethodName   = "/routes.ROSInterface/UploadJointCommands"
)

// ROSInterfaceClient is the client API for ROSInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ROSInterfaceClient interface {
	TopicList(ctx context.Context, in *ROSTopicListRequest, opts ...grpc.CallOption) (*ROSTopicListResponse, error)
	StreamCompressedImage(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CompressedImageResponse], error)
	StreamJointStates(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JointStateResponse], error)
	UploadJointCommands(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[JointCommandRequest, UploadResponse], error)
}

type rOSInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewROSInterfaceClient(cc grpc.ClientConnInterface) ROSInterfaceClient {
	return &rOSInterfaceClient{cc}
}

func (c *rOSInterfaceClient) TopicList(ctx context.Context, in *ROSTopicListRequest, opts ...grpc.CallOption) (*ROSTopicListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ROSTopicListResponse)
	err := c.cc.Invoke(ctx, ROSInterface_TopicList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rOSInterfaceClient) StreamCompressedImage(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CompressedImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ROSInterface_ServiceDesc.Streams[0], ROSInterface_StreamCompressedImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, CompressedImageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ROSInterface_StreamCompressedImageClient = grpc.ServerStreamingClient[CompressedImageResponse]

func (c *rOSInterfaceClient) StreamJointStates(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JointStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ROSInterface_ServiceDesc.Streams[1], ROSInterface_StreamJointStates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, JointStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ROSInterface_StreamJointStatesClient = grpc.ServerStreamingClient[JointStateResponse]

func (c *rOSInterfaceClient) UploadJointCommands(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[JointCommandRequest, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ROSInterface_ServiceDesc.Streams[2], ROSInterface_UploadJointCommands_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JointCommandRequest, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ROSInterface_UploadJointCommandsClient = grpc.ClientStreamingClient[JointCommandRequest, UploadResponse]

// ROSInterfaceServer is the server API for ROSInterface service.
// All implementations must embed UnimplementedROSInterfaceServer
// for forward compatibility.
type ROSInterfaceServer interface {
	TopicList(context.Context, *ROSTopicListRequest) (*ROSTopicListResponse, error)
	StreamCompressedImage(*SubscribeRequest, grpc.ServerStreamingServer[CompressedImageResponse]) error
	StreamJointStates(*SubscribeRequest, grpc.ServerStreamingServer[JointStateResponse]) error
	UploadJointCommands(grpc.ClientStreamingServer[JointCommandRequest, UploadResponse]) error
	mustEmbedUnimplementedROSInterfaceServer()
}

// UnimplementedROSInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedROSInterfaceServer struct{}

func (UnimplementedROSInterfaceServer) TopicList(context.Context, *ROSTopicListRequest) (*ROSTopicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicList not implemented")
}
func (UnimplementedROSInterfaceServer) StreamCompressedImage(*SubscribeRequest, grpc.ServerStreamingServer[CompressedImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCompressedImage not implemented")
}
func (UnimplementedROSInterfaceServer) StreamJointStates(*SubscribeRequest, grpc.ServerStreamingServer[JointStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamJointStates not implemented")
}
func (UnimplementedROSInterfaceServer) UploadJointCommands(grpc.ClientStreamingServer[JointCommandRequest, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadJointCommands not implemented")
}
func (UnimplementedROSInterfaceServer) mustEmbedUnimplementedROSInterfaceServer() {}
func (UnimplementedROSInterfaceServer) testEmbeddedByValue()                      {}

// UnsafeROSInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ROSInterfaceServer will
// result in compilation errors.
type UnsafeROSInterfaceServer interface {
	mustEmbedUnimplementedROSInterfaceServer()
}

func RegisterROSInterfaceServer(s grpc.ServiceRegistrar, srv ROSInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedROSInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ROSInterface_ServiceDesc, srv)
}

func _ROSInterface_TopicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ROSTopicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ROSInterfaceServer).TopicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ROSInterface_TopicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ROSInterfaceServer).TopicList(ctx, req.(*ROSTopicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ROSInterface_StreamCompressedImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ROSInterfaceServer).StreamCompressedImage(m, &grpc.GenericServerStream[SubscribeRequest, CompressedImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ROSInterface_StreamCompressedImageServer = grpc.ServerStreamingServer[CompressedImageResponse]

func _ROSInterface_StreamJointStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ROSInterfaceServer).StreamJointStates(m, &grpc.GenericServerStream[SubscribeRequest, JointStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ROSInterface_StreamJointStatesServer = grpc.ServerStreamingServer[JointStateResponse]

func _ROSInterface_UploadJointCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ROSInterfaceServer).UploadJointCommands(&grpc.GenericServerStream[JointCommandRequest, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ROSInterface_UploadJointCommandsServer = grpc.ClientStreamingServer[JointCommandRequest, UploadResponse]

// ROSInterface_ServiceDesc is the grpc.ServiceDesc for ROSInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ROSInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.ROSInterface",
	HandlerType: (*ROSInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopicList",
			Handler:    _ROSInterface_TopicList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCompressedImage",
			Handler:       _ROSInterface_StreamCompressedImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamJointStates",
			Handler:       _ROSInterface_StreamJointStates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadJointCommands",
			Handler:       _ROSInterface_UploadJointCommands_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ros_interface.proto",
}

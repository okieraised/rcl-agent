// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: robot_action.proto

package routes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RobotActionInterface_SetAction_FullMethodName      = "/routes.RobotActionInterface/SetAction"
	RobotActionInterface_SetMode_FullMethodName        = "/routes.RobotActionInterface/SetMode"
	RobotActionInterface_PlaybackAction_FullMethodName = "/routes.RobotActionInterface/PlaybackAction"
)

// RobotActionInterfaceClient is the client API for RobotActionInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotActionInterfaceClient interface {
	SetAction(ctx context.Context, in *SetActionRequest, opts ...grpc.CallOption) (*SetActionResponse, error)
	SetMode(ctx context.Context, in *SetModeRequest, opts ...grpc.CallOption) (*SetModeResponse, error)
	PlaybackAction(ctx context.Context, in *ActionPlaybackRequest, opts ...grpc.CallOption) (*ActionPlaybackResponse, error)
}

type robotActionInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotActionInterfaceClient(cc grpc.ClientConnInterface) RobotActionInterfaceClient {
	return &robotActionInterfaceClient{cc}
}

func (c *robotActionInterfaceClient) SetAction(ctx context.Context, in *SetActionRequest, opts ...grpc.CallOption) (*SetActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActionResponse)
	err := c.cc.Invoke(ctx, RobotActionInterface_SetAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotActionInterfaceClient) SetMode(ctx context.Context, in *SetModeRequest, opts ...grpc.CallOption) (*SetModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetModeResponse)
	err := c.cc.Invoke(ctx, RobotActionInterface_SetMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotActionInterfaceClient) PlaybackAction(ctx context.Context, in *ActionPlaybackRequest, opts ...grpc.CallOption) (*ActionPlaybackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionPlaybackResponse)
	err := c.cc.Invoke(ctx, RobotActionInterface_PlaybackAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotActionInterfaceServer is the server API for RobotActionInterface service.
// All implementations must embed UnimplementedRobotActionInterfaceServer
// for forward compatibility.
type RobotActionInterfaceServer interface {
	SetAction(context.Context, *SetActionRequest) (*SetActionResponse, error)
	SetMode(context.Context, *SetModeRequest) (*SetModeResponse, error)
	PlaybackAction(context.Context, *ActionPlaybackRequest) (*ActionPlaybackResponse, error)
	mustEmbedUnimplementedRobotActionInterfaceServer()
}

// UnimplementedRobotActionInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRobotActionInterfaceServer struct{}

func (UnimplementedRobotActionInterfaceServer) SetAction(context.Context, *SetActionRequest) (*SetActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAction not implemented")
}
func (UnimplementedRobotActionInterfaceServer) SetMode(context.Context, *SetModeRequest) (*SetModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMode not implemented")
}
func (UnimplementedRobotActionInterfaceServer) PlaybackAction(context.Context, *ActionPlaybackRequest) (*ActionPlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaybackAction not implemented")
}
func (UnimplementedRobotActionInterfaceServer) mustEmbedUnimplementedRobotActionInterfaceServer() {}
func (UnimplementedRobotActionInterfaceServer) testEmbeddedByValue()                              {}

// UnsafeRobotActionInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotActionInterfaceServer will
// result in compilation errors.
type UnsafeRobotActionInterfaceServer interface {
	mustEmbedUnimplementedRobotActionInterfaceServer()
}

func RegisterRobotActionInterfaceServer(s grpc.ServiceRegistrar, srv RobotActionInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedRobotActionInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RobotActionInterface_ServiceDesc, srv)
}

func _RobotActionInterface_SetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotActionInterfaceServer).SetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotActionInterface_SetAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotActionInterfaceServer).SetAction(ctx, req.(*SetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotActionInterface_SetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotActionInterfaceServer).SetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotActionInterface_SetMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotActionInterfaceServer).SetMode(ctx, req.(*SetModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotActionInterface_PlaybackAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionPlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotActionInterfaceServer).PlaybackAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotActionInterface_PlaybackAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotActionInterfaceServer).PlaybackAction(ctx, req.(*ActionPlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotActionInterface_ServiceDesc is the grpc.ServiceDesc for RobotActionInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotActionInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.RobotActionInterface",
	HandlerType: (*RobotActionInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAction",
			Handler:    _RobotActionInterface_SetAction_Handler,
		},
		{
			MethodName: "SetMode",
			Handler:    _RobotActionInterface_SetMode_Handler,
		},
		{
			MethodName: "PlaybackAction",
			Handler:    _RobotActionInterface_PlaybackAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "robot_action.proto",
}

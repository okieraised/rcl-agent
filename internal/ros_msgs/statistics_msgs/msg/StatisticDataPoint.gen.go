// Code generated by ros2gen. DO NOT EDIT.

package statistics_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <statistics_msgs/msg/statistic_data_point.h>

*/
import "C"

func init() {
	humble.RegisterMessage("statistics_msgs/StatisticDataPoint", StatisticDataPointTypeSupport)
	humble.RegisterMessage("statistics_msgs/msg/StatisticDataPoint", StatisticDataPointTypeSupport)
}

type StatisticDataPoint struct {
	DataType uint8   `yaml:"data_type"` // The statistic type of this data point, defined in StatisticDataType.msgDefault value should be StatisticDataType.STATISTICS_DATA_TYPE_UNINITIALIZED (0).
	Data     float64 `yaml:"data"`      // The value of the data point
}

// NewStatisticDataPoint creates a new StatisticDataPoint with default values.
func NewStatisticDataPoint() *StatisticDataPoint {
	self := StatisticDataPoint{}
	self.SetDefaults()
	return &self
}

func (t *StatisticDataPoint) Clone() *StatisticDataPoint {
	c := &StatisticDataPoint{}
	c.DataType = t.DataType
	c.Data = t.Data
	return c
}

func (t *StatisticDataPoint) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *StatisticDataPoint) SetDefaults() {
	t.DataType = 0
	t.Data = 0
}

func (t *StatisticDataPoint) GetTypeSupport() humble.MessageTypeSupport {
	return StatisticDataPointTypeSupport
}

// StatisticDataPointPublisher wraps humble.Publisher to provide type safe helper
// functions
type StatisticDataPointPublisher struct {
	*humble.Publisher
}

// NewStatisticDataPointPublisher creates and returns a new publisher for the
// StatisticDataPoint
func NewStatisticDataPointPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*StatisticDataPointPublisher, error) {
	pub, err := node.NewPublisher(topicName, StatisticDataPointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &StatisticDataPointPublisher{pub}, nil
}

func (p *StatisticDataPointPublisher) Publish(msg *StatisticDataPoint) error {
	return p.Publisher.Publish(msg)
}

// StatisticDataPointSubscription wraps humble.Subscription to provide type safe helper
// functions
type StatisticDataPointSubscription struct {
	*humble.Subscription
}

// StatisticDataPointSubscriptionCallback type is used to provide a subscription
// handler function for a StatisticDataPointSubscription.
type StatisticDataPointSubscriptionCallback func(msg *StatisticDataPoint, info *humble.MessageInfo, err error)

// NewStatisticDataPointSubscription creates and returns a new subscription for the
// StatisticDataPoint
func NewStatisticDataPointSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback StatisticDataPointSubscriptionCallback) (*StatisticDataPointSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg StatisticDataPoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, StatisticDataPointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &StatisticDataPointSubscription{sub}, nil
}

func (s *StatisticDataPointSubscription) TakeMessage(out *StatisticDataPoint) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneStatisticDataPointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneStatisticDataPointSlice(dst, src []StatisticDataPoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var StatisticDataPointTypeSupport humble.MessageTypeSupport = _StatisticDataPointTypeSupport{}

type _StatisticDataPointTypeSupport struct{}

func (t _StatisticDataPointTypeSupport) New() humble.Message {
	return NewStatisticDataPoint()
}

func (t _StatisticDataPointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.statistics_msgs__msg__StatisticDataPoint
	return (unsafe.Pointer)(C.statistics_msgs__msg__StatisticDataPoint__create())
}

func (t _StatisticDataPointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.statistics_msgs__msg__StatisticDataPoint__destroy((*C.statistics_msgs__msg__StatisticDataPoint)(pointer_to_free))
}

func (t _StatisticDataPointTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*StatisticDataPoint)
	mem := (*C.statistics_msgs__msg__StatisticDataPoint)(dst)
	mem.data_type = C.uint8_t(m.DataType)
	mem.data = C.double(m.Data)
}

func (t _StatisticDataPointTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*StatisticDataPoint)
	mem := (*C.statistics_msgs__msg__StatisticDataPoint)(ros2_message_buffer)
	m.DataType = uint8(mem.data_type)
	m.Data = float64(mem.data)
}

func (t _StatisticDataPointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__statistics_msgs__msg__StatisticDataPoint())
}

type CStatisticDataPoint = C.statistics_msgs__msg__StatisticDataPoint
type CStatisticDataPointSequence = C.statistics_msgs__msg__StatisticDataPoint__Sequence

func StatisticDataPointSequenceToGo(goSlice *[]StatisticDataPoint, cSlice CStatisticDataPointSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]StatisticDataPoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		StatisticDataPointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func StatisticDataPointSequenceToC(cSlice *CStatisticDataPointSequence, goSlice []StatisticDataPoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.statistics_msgs__msg__StatisticDataPoint)(C.malloc(C.sizeof_struct_statistics_msgs__msg__StatisticDataPoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		StatisticDataPointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func StatisticDataPointArrayToGo(goSlice []StatisticDataPoint, cSlice []CStatisticDataPoint) {
	for i := 0; i < len(cSlice); i++ {
		StatisticDataPointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func StatisticDataPointArrayToC(cSlice []CStatisticDataPoint, goSlice []StatisticDataPoint) {
	for i := 0; i < len(goSlice); i++ {
		StatisticDataPointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

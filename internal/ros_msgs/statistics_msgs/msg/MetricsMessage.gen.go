// Code generated by ros2gen. DO NOT EDIT.

package statistics_msgs_msg

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <statistics_msgs/msg/metrics_message.h>

*/
import "C"

func init() {
	humble.RegisterMessage("statistics_msgs/MetricsMessage", MetricsMessageTypeSupport)
	humble.RegisterMessage("statistics_msgs/msg/MetricsMessage", MetricsMessageTypeSupport)
}

type MetricsMessage struct {
	MeasurementSourceName string                      `yaml:"measurement_source_name"` // Name metric measurement source, e.g., node, topic, or process name
	MetricsSource         string                      `yaml:"metrics_source"`          // Name of the metric being measured, e.g. cpu_percentage, free_memory_mb, message_age, etc.
	Unit                  string                      `yaml:"unit"`                    // Unit of measure of the metric, e.g. percent, mb, seconds, etc.
	WindowStart           builtin_interfaces_msg.Time `yaml:"window_start"`            // Measurement window start time
	WindowStop            builtin_interfaces_msg.Time `yaml:"window_stop"`             // Measurement window end time
	Statistics            []StatisticDataPoint        `yaml:"statistics"`              // A list of statistics data point, defined in StatisticDataPoint.msg
}

// NewMetricsMessage creates a new MetricsMessage with default values.
func NewMetricsMessage() *MetricsMessage {
	self := MetricsMessage{}
	self.SetDefaults()
	return &self
}

func (t *MetricsMessage) Clone() *MetricsMessage {
	c := &MetricsMessage{}
	c.MeasurementSourceName = t.MeasurementSourceName
	c.MetricsSource = t.MetricsSource
	c.Unit = t.Unit
	c.WindowStart = *t.WindowStart.Clone()
	c.WindowStop = *t.WindowStop.Clone()
	if t.Statistics != nil {
		c.Statistics = make([]StatisticDataPoint, len(t.Statistics))
		CloneStatisticDataPointSlice(c.Statistics, t.Statistics)
	}
	return c
}

func (t *MetricsMessage) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MetricsMessage) SetDefaults() {
	t.MeasurementSourceName = ""
	t.MetricsSource = ""
	t.Unit = ""
	t.WindowStart.SetDefaults()
	t.WindowStop.SetDefaults()
	t.Statistics = nil
}

func (t *MetricsMessage) GetTypeSupport() humble.MessageTypeSupport {
	return MetricsMessageTypeSupport
}

// MetricsMessagePublisher wraps humble.Publisher to provide type safe helper
// functions
type MetricsMessagePublisher struct {
	*humble.Publisher
}

// NewMetricsMessagePublisher creates and returns a new publisher for the
// MetricsMessage
func NewMetricsMessagePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MetricsMessagePublisher, error) {
	pub, err := node.NewPublisher(topicName, MetricsMessageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MetricsMessagePublisher{pub}, nil
}

func (p *MetricsMessagePublisher) Publish(msg *MetricsMessage) error {
	return p.Publisher.Publish(msg)
}

// MetricsMessageSubscription wraps humble.Subscription to provide type safe helper
// functions
type MetricsMessageSubscription struct {
	*humble.Subscription
}

// MetricsMessageSubscriptionCallback type is used to provide a subscription
// handler function for a MetricsMessageSubscription.
type MetricsMessageSubscriptionCallback func(msg *MetricsMessage, info *humble.MessageInfo, err error)

// NewMetricsMessageSubscription creates and returns a new subscription for the
// MetricsMessage
func NewMetricsMessageSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MetricsMessageSubscriptionCallback) (*MetricsMessageSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MetricsMessage
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MetricsMessageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MetricsMessageSubscription{sub}, nil
}

func (s *MetricsMessageSubscription) TakeMessage(out *MetricsMessage) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMetricsMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMetricsMessageSlice(dst, src []MetricsMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MetricsMessageTypeSupport humble.MessageTypeSupport = _MetricsMessageTypeSupport{}

type _MetricsMessageTypeSupport struct{}

func (t _MetricsMessageTypeSupport) New() humble.Message {
	return NewMetricsMessage()
}

func (t _MetricsMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.statistics_msgs__msg__MetricsMessage
	return (unsafe.Pointer)(C.statistics_msgs__msg__MetricsMessage__create())
}

func (t _MetricsMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.statistics_msgs__msg__MetricsMessage__destroy((*C.statistics_msgs__msg__MetricsMessage)(pointer_to_free))
}

func (t _MetricsMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MetricsMessage)
	mem := (*C.statistics_msgs__msg__MetricsMessage)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.measurement_source_name), m.MeasurementSourceName)
	humble.StringAsCStruct(unsafe.Pointer(&mem.metrics_source), m.MetricsSource)
	humble.StringAsCStruct(unsafe.Pointer(&mem.unit), m.Unit)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.window_start), &m.WindowStart)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.window_stop), &m.WindowStop)
	StatisticDataPointSequenceToC(&mem.statistics, m.Statistics)
}

func (t _MetricsMessageTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MetricsMessage)
	mem := (*C.statistics_msgs__msg__MetricsMessage)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.MeasurementSourceName, unsafe.Pointer(&mem.measurement_source_name))
	humble.StringAsGoStruct(&m.MetricsSource, unsafe.Pointer(&mem.metrics_source))
	humble.StringAsGoStruct(&m.Unit, unsafe.Pointer(&mem.unit))
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.WindowStart, unsafe.Pointer(&mem.window_start))
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.WindowStop, unsafe.Pointer(&mem.window_stop))
	StatisticDataPointSequenceToGo(&m.Statistics, mem.statistics)
}

func (t _MetricsMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__statistics_msgs__msg__MetricsMessage())
}

type CMetricsMessage = C.statistics_msgs__msg__MetricsMessage
type CMetricsMessageSequence = C.statistics_msgs__msg__MetricsMessage__Sequence

func MetricsMessageSequenceToGo(goSlice *[]MetricsMessage, cSlice CMetricsMessageSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MetricsMessage, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MetricsMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MetricsMessageSequenceToC(cSlice *CMetricsMessageSequence, goSlice []MetricsMessage) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.statistics_msgs__msg__MetricsMessage)(C.malloc(C.sizeof_struct_statistics_msgs__msg__MetricsMessage * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MetricsMessageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MetricsMessageArrayToGo(goSlice []MetricsMessage, cSlice []CMetricsMessage) {
	for i := 0; i < len(cSlice); i++ {
		MetricsMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MetricsMessageArrayToC(cSlice []CMetricsMessage, goSlice []MetricsMessage) {
	for i := 0; i < len(goSlice); i++ {
		MetricsMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

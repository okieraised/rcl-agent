// Code generated by ros2gen. DO NOT EDIT.

package lifecycle_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/msg/transition_description.h>

*/
import "C"

func init() {
	humble.RegisterMessage("lifecycle_msgs/TransitionDescription", TransitionDescriptionTypeSupport)
	humble.RegisterMessage("lifecycle_msgs/msg/TransitionDescription", TransitionDescriptionTypeSupport)
}

type TransitionDescription struct {
	Transition Transition `yaml:"transition"`  // The transition id and label of this description.
	StartState State      `yaml:"start_state"` // The current state from which this transition transitions.
	GoalState  State      `yaml:"goal_state"`  // The desired target state of this transition.
}

// NewTransitionDescription creates a new TransitionDescription with default values.
func NewTransitionDescription() *TransitionDescription {
	self := TransitionDescription{}
	self.SetDefaults()
	return &self
}

func (t *TransitionDescription) Clone() *TransitionDescription {
	c := &TransitionDescription{}
	c.Transition = *t.Transition.Clone()
	c.StartState = *t.StartState.Clone()
	c.GoalState = *t.GoalState.Clone()
	return c
}

func (t *TransitionDescription) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TransitionDescription) SetDefaults() {
	t.Transition.SetDefaults()
	t.StartState.SetDefaults()
	t.GoalState.SetDefaults()
}

func (t *TransitionDescription) GetTypeSupport() humble.MessageTypeSupport {
	return TransitionDescriptionTypeSupport
}

// TransitionDescriptionPublisher wraps humble.Publisher to provide type safe helper
// functions
type TransitionDescriptionPublisher struct {
	*humble.Publisher
}

// NewTransitionDescriptionPublisher creates and returns a new publisher for the
// TransitionDescription
func NewTransitionDescriptionPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TransitionDescriptionPublisher, error) {
	pub, err := node.NewPublisher(topicName, TransitionDescriptionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TransitionDescriptionPublisher{pub}, nil
}

func (p *TransitionDescriptionPublisher) Publish(msg *TransitionDescription) error {
	return p.Publisher.Publish(msg)
}

// TransitionDescriptionSubscription wraps humble.Subscription to provide type safe helper
// functions
type TransitionDescriptionSubscription struct {
	*humble.Subscription
}

// TransitionDescriptionSubscriptionCallback type is used to provide a subscription
// handler function for a TransitionDescriptionSubscription.
type TransitionDescriptionSubscriptionCallback func(msg *TransitionDescription, info *humble.MessageInfo, err error)

// NewTransitionDescriptionSubscription creates and returns a new subscription for the
// TransitionDescription
func NewTransitionDescriptionSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TransitionDescriptionSubscriptionCallback) (*TransitionDescriptionSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TransitionDescription
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TransitionDescriptionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TransitionDescriptionSubscription{sub}, nil
}

func (s *TransitionDescriptionSubscription) TakeMessage(out *TransitionDescription) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTransitionDescriptionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTransitionDescriptionSlice(dst, src []TransitionDescription) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TransitionDescriptionTypeSupport humble.MessageTypeSupport = _TransitionDescriptionTypeSupport{}

type _TransitionDescriptionTypeSupport struct{}

func (t _TransitionDescriptionTypeSupport) New() humble.Message {
	return NewTransitionDescription()
}

func (t _TransitionDescriptionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__msg__TransitionDescription
	return (unsafe.Pointer)(C.lifecycle_msgs__msg__TransitionDescription__create())
}

func (t _TransitionDescriptionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__msg__TransitionDescription__destroy((*C.lifecycle_msgs__msg__TransitionDescription)(pointer_to_free))
}

func (t _TransitionDescriptionTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TransitionDescription)
	mem := (*C.lifecycle_msgs__msg__TransitionDescription)(dst)
	TransitionTypeSupport.AsCStruct(unsafe.Pointer(&mem.transition), &m.Transition)
	StateTypeSupport.AsCStruct(unsafe.Pointer(&mem.start_state), &m.StartState)
	StateTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_state), &m.GoalState)
}

func (t _TransitionDescriptionTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TransitionDescription)
	mem := (*C.lifecycle_msgs__msg__TransitionDescription)(ros2_message_buffer)
	TransitionTypeSupport.AsGoStruct(&m.Transition, unsafe.Pointer(&mem.transition))
	StateTypeSupport.AsGoStruct(&m.StartState, unsafe.Pointer(&mem.start_state))
	StateTypeSupport.AsGoStruct(&m.GoalState, unsafe.Pointer(&mem.goal_state))
}

func (t _TransitionDescriptionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionDescription())
}

type CTransitionDescription = C.lifecycle_msgs__msg__TransitionDescription
type CTransitionDescriptionSequence = C.lifecycle_msgs__msg__TransitionDescription__Sequence

func TransitionDescriptionSequenceToGo(goSlice *[]TransitionDescription, cSlice CTransitionDescriptionSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TransitionDescription, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TransitionDescriptionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TransitionDescriptionSequenceToC(cSlice *CTransitionDescriptionSequence, goSlice []TransitionDescription) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.lifecycle_msgs__msg__TransitionDescription)(C.malloc(C.sizeof_struct_lifecycle_msgs__msg__TransitionDescription * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TransitionDescriptionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TransitionDescriptionArrayToGo(goSlice []TransitionDescription, cSlice []CTransitionDescription) {
	for i := 0; i < len(cSlice); i++ {
		TransitionDescriptionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TransitionDescriptionArrayToC(cSlice []CTransitionDescription, goSlice []TransitionDescription) {
	for i := 0; i < len(goSlice); i++ {
		TransitionDescriptionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

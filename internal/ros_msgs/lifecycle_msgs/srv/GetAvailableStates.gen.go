// Code generated by ros2gen. DO NOT EDIT.

package lifecycle_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <lifecycle_msgs/srv/get_available_states.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("lifecycle_msgs/GetAvailableStates", GetAvailableStatesTypeSupport)
	humble.RegisterService("lifecycle_msgs/srv/GetAvailableStates", GetAvailableStatesTypeSupport)
}

type _GetAvailableStatesTypeSupport struct {}

func (s _GetAvailableStatesTypeSupport) Request() humble.MessageTypeSupport {
	return GetAvailableStates_RequestTypeSupport
}

func (s _GetAvailableStatesTypeSupport) Response() humble.MessageTypeSupport {
	return GetAvailableStates_ResponseTypeSupport
}

func (s _GetAvailableStatesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableStates())
}

// Modifying this variable is undefined behavior.
var GetAvailableStatesTypeSupport humble.ServiceTypeSupport = _GetAvailableStatesTypeSupport{}

// GetAvailableStatesClient wraps humble.Client to provide type safe helper
// functions
type GetAvailableStatesClient struct {
	*humble.Client
}

// NewGetAvailableStatesClient creates and returns a new client for the
// GetAvailableStates
func NewGetAvailableStatesClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*GetAvailableStatesClient, error) {
	client, err := node.NewClient(serviceName, GetAvailableStatesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetAvailableStatesClient{client}, nil
}

func (s *GetAvailableStatesClient) Send(ctx context.Context, req *GetAvailableStates_Request) (*GetAvailableStates_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetAvailableStates_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetAvailableStatesServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s GetAvailableStatesServiceResponseSender) SendResponse(resp *GetAvailableStates_Response) error {
	return s.sender.SendResponse(resp)
}

type GetAvailableStatesServiceRequestHandler func(*humble.ServiceInfo, *GetAvailableStates_Request, GetAvailableStatesServiceResponseSender)

// GetAvailableStatesService wraps humble.Service to provide type safe helper
// functions
type GetAvailableStatesService struct {
	*humble.Service
}

// NewGetAvailableStatesService creates and returns a new service for the
// GetAvailableStates
func NewGetAvailableStatesService(node *humble.Node, name string, options *humble.ServiceOptions, handler GetAvailableStatesServiceRequestHandler) (*GetAvailableStatesService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*GetAvailableStates_Request)
		responseSender := GetAvailableStatesServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetAvailableStatesTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetAvailableStatesService{service}, nil
}
// Code generated by ros2gen. DO NOT EDIT.

package lifecycle_msgs_srv

import (
	"unsafe"

	lifecycle_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/lifecycle_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/srv/get_available_transitions.h>

*/
import "C"

func init() {
	humble.RegisterMessage("lifecycle_msgs/GetAvailableTransitions_Response", GetAvailableTransitions_ResponseTypeSupport)
	humble.RegisterMessage("lifecycle_msgs/srv/GetAvailableTransitions_Response", GetAvailableTransitions_ResponseTypeSupport)
}

type GetAvailableTransitions_Response struct {
	AvailableTransitions []lifecycle_msgs_msg.TransitionDescription `yaml:"available_transitions"` // An array of the possible start_state-goal_state transitions
}

// NewGetAvailableTransitions_Response creates a new GetAvailableTransitions_Response with default values.
func NewGetAvailableTransitions_Response() *GetAvailableTransitions_Response {
	self := GetAvailableTransitions_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetAvailableTransitions_Response) Clone() *GetAvailableTransitions_Response {
	c := &GetAvailableTransitions_Response{}
	if t.AvailableTransitions != nil {
		c.AvailableTransitions = make([]lifecycle_msgs_msg.TransitionDescription, len(t.AvailableTransitions))
		lifecycle_msgs_msg.CloneTransitionDescriptionSlice(c.AvailableTransitions, t.AvailableTransitions)
	}
	return c
}

func (t *GetAvailableTransitions_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GetAvailableTransitions_Response) SetDefaults() {
	t.AvailableTransitions = nil
}

func (t *GetAvailableTransitions_Response) GetTypeSupport() humble.MessageTypeSupport {
	return GetAvailableTransitions_ResponseTypeSupport
}

// GetAvailableTransitions_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type GetAvailableTransitions_ResponsePublisher struct {
	*humble.Publisher
}

// NewGetAvailableTransitions_ResponsePublisher creates and returns a new publisher for the
// GetAvailableTransitions_Response
func NewGetAvailableTransitions_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GetAvailableTransitions_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, GetAvailableTransitions_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetAvailableTransitions_ResponsePublisher{pub}, nil
}

func (p *GetAvailableTransitions_ResponsePublisher) Publish(msg *GetAvailableTransitions_Response) error {
	return p.Publisher.Publish(msg)
}

// GetAvailableTransitions_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type GetAvailableTransitions_ResponseSubscription struct {
	*humble.Subscription
}

// GetAvailableTransitions_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetAvailableTransitions_ResponseSubscription.
type GetAvailableTransitions_ResponseSubscriptionCallback func(msg *GetAvailableTransitions_Response, info *humble.MessageInfo, err error)

// NewGetAvailableTransitions_ResponseSubscription creates and returns a new subscription for the
// GetAvailableTransitions_Response
func NewGetAvailableTransitions_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GetAvailableTransitions_ResponseSubscriptionCallback) (*GetAvailableTransitions_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GetAvailableTransitions_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetAvailableTransitions_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetAvailableTransitions_ResponseSubscription{sub}, nil
}

func (s *GetAvailableTransitions_ResponseSubscription) TakeMessage(out *GetAvailableTransitions_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetAvailableTransitions_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetAvailableTransitions_ResponseSlice(dst, src []GetAvailableTransitions_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetAvailableTransitions_ResponseTypeSupport humble.MessageTypeSupport = _GetAvailableTransitions_ResponseTypeSupport{}

type _GetAvailableTransitions_ResponseTypeSupport struct{}

func (t _GetAvailableTransitions_ResponseTypeSupport) New() humble.Message {
	return NewGetAvailableTransitions_Response()
}

func (t _GetAvailableTransitions_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__srv__GetAvailableTransitions_Response
	return (unsafe.Pointer)(C.lifecycle_msgs__srv__GetAvailableTransitions_Response__create())
}

func (t _GetAvailableTransitions_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__srv__GetAvailableTransitions_Response__destroy((*C.lifecycle_msgs__srv__GetAvailableTransitions_Response)(pointer_to_free))
}

func (t _GetAvailableTransitions_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GetAvailableTransitions_Response)
	mem := (*C.lifecycle_msgs__srv__GetAvailableTransitions_Response)(dst)
	lifecycle_msgs_msg.TransitionDescriptionSequenceToC((*lifecycle_msgs_msg.CTransitionDescriptionSequence)(unsafe.Pointer(&mem.available_transitions)), m.AvailableTransitions)
}

func (t _GetAvailableTransitions_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetAvailableTransitions_Response)
	mem := (*C.lifecycle_msgs__srv__GetAvailableTransitions_Response)(ros2_message_buffer)
	lifecycle_msgs_msg.TransitionDescriptionSequenceToGo(&m.AvailableTransitions, *(*lifecycle_msgs_msg.CTransitionDescriptionSequence)(unsafe.Pointer(&mem.available_transitions)))
}

func (t _GetAvailableTransitions_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions_Response())
}

type CGetAvailableTransitions_Response = C.lifecycle_msgs__srv__GetAvailableTransitions_Response
type CGetAvailableTransitions_ResponseSequence = C.lifecycle_msgs__srv__GetAvailableTransitions_Response__Sequence

func GetAvailableTransitions_ResponseSequenceToGo(goSlice *[]GetAvailableTransitions_Response, cSlice CGetAvailableTransitions_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetAvailableTransitions_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetAvailableTransitions_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetAvailableTransitions_ResponseSequenceToC(cSlice *CGetAvailableTransitions_ResponseSequence, goSlice []GetAvailableTransitions_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.lifecycle_msgs__srv__GetAvailableTransitions_Response)(C.malloc(C.sizeof_struct_lifecycle_msgs__srv__GetAvailableTransitions_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetAvailableTransitions_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetAvailableTransitions_ResponseArrayToGo(goSlice []GetAvailableTransitions_Response, cSlice []CGetAvailableTransitions_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetAvailableTransitions_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetAvailableTransitions_ResponseArrayToC(cSlice []CGetAvailableTransitions_Response, goSlice []GetAvailableTransitions_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetAvailableTransitions_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

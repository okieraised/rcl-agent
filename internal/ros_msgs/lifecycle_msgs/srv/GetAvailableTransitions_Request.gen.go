// Code generated by ros2gen. DO NOT EDIT.

package lifecycle_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/srv/get_available_transitions.h>

*/
import "C"

func init() {
	humble.RegisterMessage("lifecycle_msgs/GetAvailableTransitions_Request", GetAvailableTransitions_RequestTypeSupport)
	humble.RegisterMessage("lifecycle_msgs/srv/GetAvailableTransitions_Request", GetAvailableTransitions_RequestTypeSupport)
}

type GetAvailableTransitions_Request struct {
}

// NewGetAvailableTransitions_Request creates a new GetAvailableTransitions_Request with default values.
func NewGetAvailableTransitions_Request() *GetAvailableTransitions_Request {
	self := GetAvailableTransitions_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetAvailableTransitions_Request) Clone() *GetAvailableTransitions_Request {
	c := &GetAvailableTransitions_Request{}
	return c
}

func (t *GetAvailableTransitions_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GetAvailableTransitions_Request) SetDefaults() {
}

func (t *GetAvailableTransitions_Request) GetTypeSupport() humble.MessageTypeSupport {
	return GetAvailableTransitions_RequestTypeSupport
}

// GetAvailableTransitions_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type GetAvailableTransitions_RequestPublisher struct {
	*humble.Publisher
}

// NewGetAvailableTransitions_RequestPublisher creates and returns a new publisher for the
// GetAvailableTransitions_Request
func NewGetAvailableTransitions_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GetAvailableTransitions_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, GetAvailableTransitions_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetAvailableTransitions_RequestPublisher{pub}, nil
}

func (p *GetAvailableTransitions_RequestPublisher) Publish(msg *GetAvailableTransitions_Request) error {
	return p.Publisher.Publish(msg)
}

// GetAvailableTransitions_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type GetAvailableTransitions_RequestSubscription struct {
	*humble.Subscription
}

// GetAvailableTransitions_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetAvailableTransitions_RequestSubscription.
type GetAvailableTransitions_RequestSubscriptionCallback func(msg *GetAvailableTransitions_Request, info *humble.MessageInfo, err error)

// NewGetAvailableTransitions_RequestSubscription creates and returns a new subscription for the
// GetAvailableTransitions_Request
func NewGetAvailableTransitions_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GetAvailableTransitions_RequestSubscriptionCallback) (*GetAvailableTransitions_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GetAvailableTransitions_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetAvailableTransitions_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetAvailableTransitions_RequestSubscription{sub}, nil
}

func (s *GetAvailableTransitions_RequestSubscription) TakeMessage(out *GetAvailableTransitions_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetAvailableTransitions_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetAvailableTransitions_RequestSlice(dst, src []GetAvailableTransitions_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetAvailableTransitions_RequestTypeSupport humble.MessageTypeSupport = _GetAvailableTransitions_RequestTypeSupport{}

type _GetAvailableTransitions_RequestTypeSupport struct{}

func (t _GetAvailableTransitions_RequestTypeSupport) New() humble.Message {
	return NewGetAvailableTransitions_Request()
}

func (t _GetAvailableTransitions_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__srv__GetAvailableTransitions_Request
	return (unsafe.Pointer)(C.lifecycle_msgs__srv__GetAvailableTransitions_Request__create())
}

func (t _GetAvailableTransitions_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__srv__GetAvailableTransitions_Request__destroy((*C.lifecycle_msgs__srv__GetAvailableTransitions_Request)(pointer_to_free))
}

func (t _GetAvailableTransitions_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {

}

func (t _GetAvailableTransitions_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _GetAvailableTransitions_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions_Request())
}

type CGetAvailableTransitions_Request = C.lifecycle_msgs__srv__GetAvailableTransitions_Request
type CGetAvailableTransitions_RequestSequence = C.lifecycle_msgs__srv__GetAvailableTransitions_Request__Sequence

func GetAvailableTransitions_RequestSequenceToGo(goSlice *[]GetAvailableTransitions_Request, cSlice CGetAvailableTransitions_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetAvailableTransitions_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetAvailableTransitions_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetAvailableTransitions_RequestSequenceToC(cSlice *CGetAvailableTransitions_RequestSequence, goSlice []GetAvailableTransitions_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.lifecycle_msgs__srv__GetAvailableTransitions_Request)(C.malloc(C.sizeof_struct_lifecycle_msgs__srv__GetAvailableTransitions_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetAvailableTransitions_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetAvailableTransitions_RequestArrayToGo(goSlice []GetAvailableTransitions_Request, cSlice []CGetAvailableTransitions_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetAvailableTransitions_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetAvailableTransitions_RequestArrayToC(cSlice []CGetAvailableTransitions_Request, goSlice []GetAvailableTransitions_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetAvailableTransitions_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package sensor_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <sensor_msgs/msg/image.h>

*/
import "C"

func init() {
	humble.RegisterMessage("sensor_msgs/Image", ImageTypeSupport)
	humble.RegisterMessage("sensor_msgs/msg/Image", ImageTypeSupport)
}

type Image struct {
	Header      std_msgs_msg.Header `yaml:"header"`       // Header timestamp should be acquisition time of image
	Height      uint32              `yaml:"height"`       // image height, that is, number of rows
	Width       uint32              `yaml:"width"`        // image width, that is, number of columns
	Encoding    string              `yaml:"encoding"`     // Encoding of pixels -- channel meaning, ordering, size
	IsBigendian uint8               `yaml:"is_bigendian"` // is this data bigendian?
	Step        uint32              `yaml:"step"`         // Full row length in bytes
	Data        []uint8             `yaml:"data"`         // actual matrix data, size is (step * rows)
}

// NewImage creates a new Image with default values.
func NewImage() *Image {
	self := Image{}
	self.SetDefaults()
	return &self
}

func (t *Image) Clone() *Image {
	c := &Image{}
	c.Header = *t.Header.Clone()
	c.Height = t.Height
	c.Width = t.Width
	c.Encoding = t.Encoding
	c.IsBigendian = t.IsBigendian
	c.Step = t.Step
	if t.Data != nil {
		c.Data = make([]uint8, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *Image) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Image) SetDefaults() {
	t.Header.SetDefaults()
	t.Height = 0
	t.Width = 0
	t.Encoding = ""
	t.IsBigendian = 0
	t.Step = 0
	t.Data = nil
}

func (t *Image) GetTypeSupport() humble.MessageTypeSupport {
	return ImageTypeSupport
}

// ImagePublisher wraps humble.Publisher to provide type safe helper
// functions
type ImagePublisher struct {
	*humble.Publisher
}

// NewImagePublisher creates and returns a new publisher for the
// Image
func NewImagePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ImagePublisher, error) {
	pub, err := node.NewPublisher(topicName, ImageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ImagePublisher{pub}, nil
}

func (p *ImagePublisher) Publish(msg *Image) error {
	return p.Publisher.Publish(msg)
}

// ImageSubscription wraps humble.Subscription to provide type safe helper
// functions
type ImageSubscription struct {
	*humble.Subscription
}

// ImageSubscriptionCallback type is used to provide a subscription
// handler function for a ImageSubscription.
type ImageSubscriptionCallback func(msg *Image, info *humble.MessageInfo, err error)

// NewImageSubscription creates and returns a new subscription for the
// Image
func NewImageSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ImageSubscriptionCallback) (*ImageSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Image
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ImageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ImageSubscription{sub}, nil
}

func (s *ImageSubscription) TakeMessage(out *Image) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneImageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneImageSlice(dst, src []Image) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ImageTypeSupport humble.MessageTypeSupport = _ImageTypeSupport{}

type _ImageTypeSupport struct{}

func (t _ImageTypeSupport) New() humble.Message {
	return NewImage()
}

func (t _ImageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__Image
	return (unsafe.Pointer)(C.sensor_msgs__msg__Image__create())
}

func (t _ImageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__Image__destroy((*C.sensor_msgs__msg__Image)(pointer_to_free))
}

func (t _ImageTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Image)
	mem := (*C.sensor_msgs__msg__Image)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.height = C.uint32_t(m.Height)
	mem.width = C.uint32_t(m.Width)
	humble.StringAsCStruct(unsafe.Pointer(&mem.encoding), m.Encoding)
	mem.is_bigendian = C.uint8_t(m.IsBigendian)
	mem.step = C.uint32_t(m.Step)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _ImageTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Image)
	mem := (*C.sensor_msgs__msg__Image)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Height = uint32(mem.height)
	m.Width = uint32(mem.width)
	humble.StringAsGoStruct(&m.Encoding, unsafe.Pointer(&mem.encoding))
	m.IsBigendian = uint8(mem.is_bigendian)
	m.Step = uint32(mem.step)
	humble.Uint8SequenceToGo(&m.Data, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _ImageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Image())
}

type CImage = C.sensor_msgs__msg__Image
type CImageSequence = C.sensor_msgs__msg__Image__Sequence

func ImageSequenceToGo(goSlice *[]Image, cSlice CImageSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Image, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ImageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ImageSequenceToC(cSlice *CImageSequence, goSlice []Image) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__Image)(C.malloc(C.sizeof_struct_sensor_msgs__msg__Image * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ImageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ImageArrayToGo(goSlice []Image, cSlice []CImage) {
	for i := 0; i < len(cSlice); i++ {
		ImageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ImageArrayToC(cSlice []CImage, goSlice []Image) {
	for i := 0; i < len(goSlice); i++ {
		ImageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

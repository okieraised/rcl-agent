// Code generated by ros2gen. DO NOT EDIT.

package sensor_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <sensor_msgs/msg/fluid_pressure.h>

*/
import "C"

func init() {
	humble.RegisterMessage("sensor_msgs/FluidPressure", FluidPressureTypeSupport)
	humble.RegisterMessage("sensor_msgs/msg/FluidPressure", FluidPressureTypeSupport)
}

type FluidPressure struct {
	Header        std_msgs_msg.Header `yaml:"header"`         // timestamp of the measurement
	FluidPressure float64             `yaml:"fluid_pressure"` // Absolute pressure reading in Pascals.
	Variance      float64             `yaml:"variance"`       // 0 is interpreted as variance unknown
}

// NewFluidPressure creates a new FluidPressure with default values.
func NewFluidPressure() *FluidPressure {
	self := FluidPressure{}
	self.SetDefaults()
	return &self
}

func (t *FluidPressure) Clone() *FluidPressure {
	c := &FluidPressure{}
	c.Header = *t.Header.Clone()
	c.FluidPressure = t.FluidPressure
	c.Variance = t.Variance
	return c
}

func (t *FluidPressure) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *FluidPressure) SetDefaults() {
	t.Header.SetDefaults()
	t.FluidPressure = 0
	t.Variance = 0
}

func (t *FluidPressure) GetTypeSupport() humble.MessageTypeSupport {
	return FluidPressureTypeSupport
}

// FluidPressurePublisher wraps humble.Publisher to provide type safe helper
// functions
type FluidPressurePublisher struct {
	*humble.Publisher
}

// NewFluidPressurePublisher creates and returns a new publisher for the
// FluidPressure
func NewFluidPressurePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*FluidPressurePublisher, error) {
	pub, err := node.NewPublisher(topicName, FluidPressureTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FluidPressurePublisher{pub}, nil
}

func (p *FluidPressurePublisher) Publish(msg *FluidPressure) error {
	return p.Publisher.Publish(msg)
}

// FluidPressureSubscription wraps humble.Subscription to provide type safe helper
// functions
type FluidPressureSubscription struct {
	*humble.Subscription
}

// FluidPressureSubscriptionCallback type is used to provide a subscription
// handler function for a FluidPressureSubscription.
type FluidPressureSubscriptionCallback func(msg *FluidPressure, info *humble.MessageInfo, err error)

// NewFluidPressureSubscription creates and returns a new subscription for the
// FluidPressure
func NewFluidPressureSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback FluidPressureSubscriptionCallback) (*FluidPressureSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg FluidPressure
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, FluidPressureTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FluidPressureSubscription{sub}, nil
}

func (s *FluidPressureSubscription) TakeMessage(out *FluidPressure) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFluidPressureSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFluidPressureSlice(dst, src []FluidPressure) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FluidPressureTypeSupport humble.MessageTypeSupport = _FluidPressureTypeSupport{}

type _FluidPressureTypeSupport struct{}

func (t _FluidPressureTypeSupport) New() humble.Message {
	return NewFluidPressure()
}

func (t _FluidPressureTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__FluidPressure
	return (unsafe.Pointer)(C.sensor_msgs__msg__FluidPressure__create())
}

func (t _FluidPressureTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__FluidPressure__destroy((*C.sensor_msgs__msg__FluidPressure)(pointer_to_free))
}

func (t _FluidPressureTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*FluidPressure)
	mem := (*C.sensor_msgs__msg__FluidPressure)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.fluid_pressure = C.double(m.FluidPressure)
	mem.variance = C.double(m.Variance)
}

func (t _FluidPressureTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FluidPressure)
	mem := (*C.sensor_msgs__msg__FluidPressure)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.FluidPressure = float64(mem.fluid_pressure)
	m.Variance = float64(mem.variance)
}

func (t _FluidPressureTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__FluidPressure())
}

type CFluidPressure = C.sensor_msgs__msg__FluidPressure
type CFluidPressureSequence = C.sensor_msgs__msg__FluidPressure__Sequence

func FluidPressureSequenceToGo(goSlice *[]FluidPressure, cSlice CFluidPressureSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FluidPressure, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FluidPressureTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func FluidPressureSequenceToC(cSlice *CFluidPressureSequence, goSlice []FluidPressure) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__FluidPressure)(C.malloc(C.sizeof_struct_sensor_msgs__msg__FluidPressure * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FluidPressureTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func FluidPressureArrayToGo(goSlice []FluidPressure, cSlice []CFluidPressure) {
	for i := 0; i < len(cSlice); i++ {
		FluidPressureTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func FluidPressureArrayToC(cSlice []CFluidPressure, goSlice []FluidPressure) {
	for i := 0; i < len(goSlice); i++ {
		FluidPressureTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package sensor_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <sensor_msgs/msg/channel_float32.h>

*/
import "C"

func init() {
	humble.RegisterMessage("sensor_msgs/ChannelFloat32", ChannelFloat32TypeSupport)
	humble.RegisterMessage("sensor_msgs/msg/ChannelFloat32", ChannelFloat32TypeSupport)
}

type ChannelFloat32 struct {
	Name   string    `yaml:"name"`   // The channel name should give semantics of the channel (e.g."intensity" instead of "value").
	Values []float32 `yaml:"values"` // The values array should be 1-1 with the elements of the associatedPointCloud.
}

// NewChannelFloat32 creates a new ChannelFloat32 with default values.
func NewChannelFloat32() *ChannelFloat32 {
	self := ChannelFloat32{}
	self.SetDefaults()
	return &self
}

func (t *ChannelFloat32) Clone() *ChannelFloat32 {
	c := &ChannelFloat32{}
	c.Name = t.Name
	if t.Values != nil {
		c.Values = make([]float32, len(t.Values))
		copy(c.Values, t.Values)
	}
	return c
}

func (t *ChannelFloat32) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ChannelFloat32) SetDefaults() {
	t.Name = ""
	t.Values = nil
}

func (t *ChannelFloat32) GetTypeSupport() humble.MessageTypeSupport {
	return ChannelFloat32TypeSupport
}

// ChannelFloat32Publisher wraps humble.Publisher to provide type safe helper
// functions
type ChannelFloat32Publisher struct {
	*humble.Publisher
}

// NewChannelFloat32Publisher creates and returns a new publisher for the
// ChannelFloat32
func NewChannelFloat32Publisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ChannelFloat32Publisher, error) {
	pub, err := node.NewPublisher(topicName, ChannelFloat32TypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ChannelFloat32Publisher{pub}, nil
}

func (p *ChannelFloat32Publisher) Publish(msg *ChannelFloat32) error {
	return p.Publisher.Publish(msg)
}

// ChannelFloat32Subscription wraps humble.Subscription to provide type safe helper
// functions
type ChannelFloat32Subscription struct {
	*humble.Subscription
}

// ChannelFloat32SubscriptionCallback type is used to provide a subscription
// handler function for a ChannelFloat32Subscription.
type ChannelFloat32SubscriptionCallback func(msg *ChannelFloat32, info *humble.MessageInfo, err error)

// NewChannelFloat32Subscription creates and returns a new subscription for the
// ChannelFloat32
func NewChannelFloat32Subscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ChannelFloat32SubscriptionCallback) (*ChannelFloat32Subscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ChannelFloat32
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ChannelFloat32TypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ChannelFloat32Subscription{sub}, nil
}

func (s *ChannelFloat32Subscription) TakeMessage(out *ChannelFloat32) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneChannelFloat32Slice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneChannelFloat32Slice(dst, src []ChannelFloat32) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ChannelFloat32TypeSupport humble.MessageTypeSupport = _ChannelFloat32TypeSupport{}

type _ChannelFloat32TypeSupport struct{}

func (t _ChannelFloat32TypeSupport) New() humble.Message {
	return NewChannelFloat32()
}

func (t _ChannelFloat32TypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__ChannelFloat32
	return (unsafe.Pointer)(C.sensor_msgs__msg__ChannelFloat32__create())
}

func (t _ChannelFloat32TypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__ChannelFloat32__destroy((*C.sensor_msgs__msg__ChannelFloat32)(pointer_to_free))
}

func (t _ChannelFloat32TypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ChannelFloat32)
	mem := (*C.sensor_msgs__msg__ChannelFloat32)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	humble.Float32SequenceToC((*humble.CFloat32Sequence)(unsafe.Pointer(&mem.values)), m.Values)
}

func (t _ChannelFloat32TypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ChannelFloat32)
	mem := (*C.sensor_msgs__msg__ChannelFloat32)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	humble.Float32SequenceToGo(&m.Values, *(*humble.CFloat32Sequence)(unsafe.Pointer(&mem.values)))
}

func (t _ChannelFloat32TypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__ChannelFloat32())
}

type CChannelFloat32 = C.sensor_msgs__msg__ChannelFloat32
type CChannelFloat32Sequence = C.sensor_msgs__msg__ChannelFloat32__Sequence

func ChannelFloat32SequenceToGo(goSlice *[]ChannelFloat32, cSlice CChannelFloat32Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ChannelFloat32, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ChannelFloat32TypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ChannelFloat32SequenceToC(cSlice *CChannelFloat32Sequence, goSlice []ChannelFloat32) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__ChannelFloat32)(C.malloc(C.sizeof_struct_sensor_msgs__msg__ChannelFloat32 * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ChannelFloat32TypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ChannelFloat32ArrayToGo(goSlice []ChannelFloat32, cSlice []CChannelFloat32) {
	for i := 0; i < len(cSlice); i++ {
		ChannelFloat32TypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ChannelFloat32ArrayToC(cSlice []CChannelFloat32, goSlice []ChannelFloat32) {
	for i := 0; i < len(goSlice); i++ {
		ChannelFloat32TypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

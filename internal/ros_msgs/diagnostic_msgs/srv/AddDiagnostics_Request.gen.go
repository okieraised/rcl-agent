// Code generated by ros2gen. DO NOT EDIT.

package diagnostic_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <diagnostic_msgs/srv/add_diagnostics.h>

*/
import "C"

func init() {
	humble.RegisterMessage("diagnostic_msgs/AddDiagnostics_Request", AddDiagnostics_RequestTypeSupport)
	humble.RegisterMessage("diagnostic_msgs/srv/AddDiagnostics_Request", AddDiagnostics_RequestTypeSupport)
}

type AddDiagnostics_Request struct {
	LoadNamespace string `yaml:"load_namespace"` // The load_namespace parameter defines the namespace where parameters for theinitialization of analyzers in the diagnostic aggregator have been loaded. Thevalue should be a global name (i.e. /my/name/space), not a relative(my/name/space) or private (~my/name/space) name. Analyzers will not be addedif a non-global name is used. The call will also fail if the namespacecontains parameters that follow a namespace structure that does not conform tothat expected by the analyzer definitions. Seehttp://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregatorsand http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzerfor examples of the structure of yaml files which are expected to have beenloaded into the namespace.
}

// NewAddDiagnostics_Request creates a new AddDiagnostics_Request with default values.
func NewAddDiagnostics_Request() *AddDiagnostics_Request {
	self := AddDiagnostics_Request{}
	self.SetDefaults()
	return &self
}

func (t *AddDiagnostics_Request) Clone() *AddDiagnostics_Request {
	c := &AddDiagnostics_Request{}
	c.LoadNamespace = t.LoadNamespace
	return c
}

func (t *AddDiagnostics_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *AddDiagnostics_Request) SetDefaults() {
	t.LoadNamespace = ""
}

func (t *AddDiagnostics_Request) GetTypeSupport() humble.MessageTypeSupport {
	return AddDiagnostics_RequestTypeSupport
}

// AddDiagnostics_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type AddDiagnostics_RequestPublisher struct {
	*humble.Publisher
}

// NewAddDiagnostics_RequestPublisher creates and returns a new publisher for the
// AddDiagnostics_Request
func NewAddDiagnostics_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*AddDiagnostics_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, AddDiagnostics_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AddDiagnostics_RequestPublisher{pub}, nil
}

func (p *AddDiagnostics_RequestPublisher) Publish(msg *AddDiagnostics_Request) error {
	return p.Publisher.Publish(msg)
}

// AddDiagnostics_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type AddDiagnostics_RequestSubscription struct {
	*humble.Subscription
}

// AddDiagnostics_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a AddDiagnostics_RequestSubscription.
type AddDiagnostics_RequestSubscriptionCallback func(msg *AddDiagnostics_Request, info *humble.MessageInfo, err error)

// NewAddDiagnostics_RequestSubscription creates and returns a new subscription for the
// AddDiagnostics_Request
func NewAddDiagnostics_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback AddDiagnostics_RequestSubscriptionCallback) (*AddDiagnostics_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg AddDiagnostics_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, AddDiagnostics_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AddDiagnostics_RequestSubscription{sub}, nil
}

func (s *AddDiagnostics_RequestSubscription) TakeMessage(out *AddDiagnostics_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAddDiagnostics_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAddDiagnostics_RequestSlice(dst, src []AddDiagnostics_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AddDiagnostics_RequestTypeSupport humble.MessageTypeSupport = _AddDiagnostics_RequestTypeSupport{}

type _AddDiagnostics_RequestTypeSupport struct{}

func (t _AddDiagnostics_RequestTypeSupport) New() humble.Message {
	return NewAddDiagnostics_Request()
}

func (t _AddDiagnostics_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.diagnostic_msgs__srv__AddDiagnostics_Request
	return (unsafe.Pointer)(C.diagnostic_msgs__srv__AddDiagnostics_Request__create())
}

func (t _AddDiagnostics_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.diagnostic_msgs__srv__AddDiagnostics_Request__destroy((*C.diagnostic_msgs__srv__AddDiagnostics_Request)(pointer_to_free))
}

func (t _AddDiagnostics_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*AddDiagnostics_Request)
	mem := (*C.diagnostic_msgs__srv__AddDiagnostics_Request)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.load_namespace), m.LoadNamespace)
}

func (t _AddDiagnostics_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AddDiagnostics_Request)
	mem := (*C.diagnostic_msgs__srv__AddDiagnostics_Request)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.LoadNamespace, unsafe.Pointer(&mem.load_namespace))
}

func (t _AddDiagnostics_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__diagnostic_msgs__srv__AddDiagnostics_Request())
}

type CAddDiagnostics_Request = C.diagnostic_msgs__srv__AddDiagnostics_Request
type CAddDiagnostics_RequestSequence = C.diagnostic_msgs__srv__AddDiagnostics_Request__Sequence

func AddDiagnostics_RequestSequenceToGo(goSlice *[]AddDiagnostics_Request, cSlice CAddDiagnostics_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AddDiagnostics_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AddDiagnostics_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func AddDiagnostics_RequestSequenceToC(cSlice *CAddDiagnostics_RequestSequence, goSlice []AddDiagnostics_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.diagnostic_msgs__srv__AddDiagnostics_Request)(C.malloc(C.sizeof_struct_diagnostic_msgs__srv__AddDiagnostics_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AddDiagnostics_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func AddDiagnostics_RequestArrayToGo(goSlice []AddDiagnostics_Request, cSlice []CAddDiagnostics_Request) {
	for i := 0; i < len(cSlice); i++ {
		AddDiagnostics_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func AddDiagnostics_RequestArrayToC(cSlice []CAddDiagnostics_Request, goSlice []AddDiagnostics_Request) {
	for i := 0; i < len(goSlice); i++ {
		AddDiagnostics_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package diagnostic_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <diagnostic_msgs/srv/add_diagnostics.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("diagnostic_msgs/AddDiagnostics", AddDiagnosticsTypeSupport)
	humble.RegisterService("diagnostic_msgs/srv/AddDiagnostics", AddDiagnosticsTypeSupport)
}

type _AddDiagnosticsTypeSupport struct{}

func (s _AddDiagnosticsTypeSupport) Request() humble.MessageTypeSupport {
	return AddDiagnostics_RequestTypeSupport
}

func (s _AddDiagnosticsTypeSupport) Response() humble.MessageTypeSupport {
	return AddDiagnostics_ResponseTypeSupport
}

func (s _AddDiagnosticsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__diagnostic_msgs__srv__AddDiagnostics())
}

// Modifying this variable is undefined behavior.
var AddDiagnosticsTypeSupport humble.ServiceTypeSupport = _AddDiagnosticsTypeSupport{}

// AddDiagnosticsClient wraps humble.Client to provide type safe helper
// functions
type AddDiagnosticsClient struct {
	*humble.Client
}

// NewAddDiagnosticsClient creates and returns a new client for the
// AddDiagnostics
func NewAddDiagnosticsClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*AddDiagnosticsClient, error) {
	client, err := node.NewClient(serviceName, AddDiagnosticsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AddDiagnosticsClient{client}, nil
}

func (s *AddDiagnosticsClient) Send(ctx context.Context, req *AddDiagnostics_Request) (*AddDiagnostics_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*AddDiagnostics_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type AddDiagnosticsServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s AddDiagnosticsServiceResponseSender) SendResponse(resp *AddDiagnostics_Response) error {
	return s.sender.SendResponse(resp)
}

type AddDiagnosticsServiceRequestHandler func(*humble.ServiceInfo, *AddDiagnostics_Request, AddDiagnosticsServiceResponseSender)

// AddDiagnosticsService wraps humble.Service to provide type safe helper
// functions
type AddDiagnosticsService struct {
	*humble.Service
}

// NewAddDiagnosticsService creates and returns a new service for the
// AddDiagnostics
func NewAddDiagnosticsService(node *humble.Node, name string, options *humble.ServiceOptions, handler AddDiagnosticsServiceRequestHandler) (*AddDiagnosticsService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*AddDiagnostics_Request)
		responseSender := AddDiagnosticsServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, AddDiagnosticsTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &AddDiagnosticsService{service}, nil
}

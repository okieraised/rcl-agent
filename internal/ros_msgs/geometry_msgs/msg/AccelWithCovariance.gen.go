// Code generated by ros2gen. DO NOT EDIT.

package geometry_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/accel_with_covariance.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geometry_msgs/AccelWithCovariance", AccelWithCovarianceTypeSupport)
	humble.RegisterMessage("geometry_msgs/msg/AccelWithCovariance", AccelWithCovarianceTypeSupport)
}

type AccelWithCovariance struct {
	Accel      Accel       `yaml:"accel"`
	Covariance [36]float64 `yaml:"covariance"` // Row-major representation of the 6x6 covariance matrixThe orientation parameters use a fixed-axis representation.In order, the parameters are:(x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
}

// NewAccelWithCovariance creates a new AccelWithCovariance with default values.
func NewAccelWithCovariance() *AccelWithCovariance {
	self := AccelWithCovariance{}
	self.SetDefaults()
	return &self
}

func (t *AccelWithCovariance) Clone() *AccelWithCovariance {
	c := &AccelWithCovariance{}
	c.Accel = *t.Accel.Clone()
	c.Covariance = t.Covariance
	return c
}

func (t *AccelWithCovariance) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *AccelWithCovariance) SetDefaults() {
	t.Accel.SetDefaults()
	t.Covariance = [36]float64{}
}

func (t *AccelWithCovariance) GetTypeSupport() humble.MessageTypeSupport {
	return AccelWithCovarianceTypeSupport
}

// AccelWithCovariancePublisher wraps humble.Publisher to provide type safe helper
// functions
type AccelWithCovariancePublisher struct {
	*humble.Publisher
}

// NewAccelWithCovariancePublisher creates and returns a new publisher for the
// AccelWithCovariance
func NewAccelWithCovariancePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*AccelWithCovariancePublisher, error) {
	pub, err := node.NewPublisher(topicName, AccelWithCovarianceTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AccelWithCovariancePublisher{pub}, nil
}

func (p *AccelWithCovariancePublisher) Publish(msg *AccelWithCovariance) error {
	return p.Publisher.Publish(msg)
}

// AccelWithCovarianceSubscription wraps humble.Subscription to provide type safe helper
// functions
type AccelWithCovarianceSubscription struct {
	*humble.Subscription
}

// AccelWithCovarianceSubscriptionCallback type is used to provide a subscription
// handler function for a AccelWithCovarianceSubscription.
type AccelWithCovarianceSubscriptionCallback func(msg *AccelWithCovariance, info *humble.MessageInfo, err error)

// NewAccelWithCovarianceSubscription creates and returns a new subscription for the
// AccelWithCovariance
func NewAccelWithCovarianceSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback AccelWithCovarianceSubscriptionCallback) (*AccelWithCovarianceSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg AccelWithCovariance
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, AccelWithCovarianceTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AccelWithCovarianceSubscription{sub}, nil
}

func (s *AccelWithCovarianceSubscription) TakeMessage(out *AccelWithCovariance) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAccelWithCovarianceSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAccelWithCovarianceSlice(dst, src []AccelWithCovariance) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AccelWithCovarianceTypeSupport humble.MessageTypeSupport = _AccelWithCovarianceTypeSupport{}

type _AccelWithCovarianceTypeSupport struct{}

func (t _AccelWithCovarianceTypeSupport) New() humble.Message {
	return NewAccelWithCovariance()
}

func (t _AccelWithCovarianceTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__AccelWithCovariance
	return (unsafe.Pointer)(C.geometry_msgs__msg__AccelWithCovariance__create())
}

func (t _AccelWithCovarianceTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__AccelWithCovariance__destroy((*C.geometry_msgs__msg__AccelWithCovariance)(pointer_to_free))
}

func (t _AccelWithCovarianceTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*AccelWithCovariance)
	mem := (*C.geometry_msgs__msg__AccelWithCovariance)(dst)
	AccelTypeSupport.AsCStruct(unsafe.Pointer(&mem.accel), &m.Accel)
	cSlice_covariance := mem.covariance[:]
	humble.Float64ArrayToC(*(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_covariance)), m.Covariance[:])
}

func (t _AccelWithCovarianceTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AccelWithCovariance)
	mem := (*C.geometry_msgs__msg__AccelWithCovariance)(ros2_message_buffer)
	AccelTypeSupport.AsGoStruct(&m.Accel, unsafe.Pointer(&mem.accel))
	cSlice_covariance := mem.covariance[:]
	humble.Float64ArrayToGo(m.Covariance[:], *(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_covariance)))
}

func (t _AccelWithCovarianceTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__AccelWithCovariance())
}

type CAccelWithCovariance = C.geometry_msgs__msg__AccelWithCovariance
type CAccelWithCovarianceSequence = C.geometry_msgs__msg__AccelWithCovariance__Sequence

func AccelWithCovarianceSequenceToGo(goSlice *[]AccelWithCovariance, cSlice CAccelWithCovarianceSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AccelWithCovariance, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AccelWithCovarianceTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func AccelWithCovarianceSequenceToC(cSlice *CAccelWithCovarianceSequence, goSlice []AccelWithCovariance) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__AccelWithCovariance)(C.malloc(C.sizeof_struct_geometry_msgs__msg__AccelWithCovariance * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AccelWithCovarianceTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func AccelWithCovarianceArrayToGo(goSlice []AccelWithCovariance, cSlice []CAccelWithCovariance) {
	for i := 0; i < len(cSlice); i++ {
		AccelWithCovarianceTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func AccelWithCovarianceArrayToC(cSlice []CAccelWithCovariance, goSlice []AccelWithCovariance) {
	for i := 0; i < len(goSlice); i++ {
		AccelWithCovarianceTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package geometry_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/wrench.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geometry_msgs/Wrench", WrenchTypeSupport)
	humble.RegisterMessage("geometry_msgs/msg/Wrench", WrenchTypeSupport)
}

type Wrench struct {
	Force  Vector3 `yaml:"force"`
	Torque Vector3 `yaml:"torque"`
}

// NewWrench creates a new Wrench with default values.
func NewWrench() *Wrench {
	self := Wrench{}
	self.SetDefaults()
	return &self
}

func (t *Wrench) Clone() *Wrench {
	c := &Wrench{}
	c.Force = *t.Force.Clone()
	c.Torque = *t.Torque.Clone()
	return c
}

func (t *Wrench) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Wrench) SetDefaults() {
	t.Force.SetDefaults()
	t.Torque.SetDefaults()
}

func (t *Wrench) GetTypeSupport() humble.MessageTypeSupport {
	return WrenchTypeSupport
}

// WrenchPublisher wraps humble.Publisher to provide type safe helper
// functions
type WrenchPublisher struct {
	*humble.Publisher
}

// NewWrenchPublisher creates and returns a new publisher for the
// Wrench
func NewWrenchPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*WrenchPublisher, error) {
	pub, err := node.NewPublisher(topicName, WrenchTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WrenchPublisher{pub}, nil
}

func (p *WrenchPublisher) Publish(msg *Wrench) error {
	return p.Publisher.Publish(msg)
}

// WrenchSubscription wraps humble.Subscription to provide type safe helper
// functions
type WrenchSubscription struct {
	*humble.Subscription
}

// WrenchSubscriptionCallback type is used to provide a subscription
// handler function for a WrenchSubscription.
type WrenchSubscriptionCallback func(msg *Wrench, info *humble.MessageInfo, err error)

// NewWrenchSubscription creates and returns a new subscription for the
// Wrench
func NewWrenchSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback WrenchSubscriptionCallback) (*WrenchSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Wrench
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, WrenchTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WrenchSubscription{sub}, nil
}

func (s *WrenchSubscription) TakeMessage(out *Wrench) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWrenchSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWrenchSlice(dst, src []Wrench) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WrenchTypeSupport humble.MessageTypeSupport = _WrenchTypeSupport{}

type _WrenchTypeSupport struct{}

func (t _WrenchTypeSupport) New() humble.Message {
	return NewWrench()
}

func (t _WrenchTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__Wrench
	return (unsafe.Pointer)(C.geometry_msgs__msg__Wrench__create())
}

func (t _WrenchTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__Wrench__destroy((*C.geometry_msgs__msg__Wrench)(pointer_to_free))
}

func (t _WrenchTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Wrench)
	mem := (*C.geometry_msgs__msg__Wrench)(dst)
	Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.force), &m.Force)
	Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.torque), &m.Torque)
}

func (t _WrenchTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Wrench)
	mem := (*C.geometry_msgs__msg__Wrench)(ros2_message_buffer)
	Vector3TypeSupport.AsGoStruct(&m.Force, unsafe.Pointer(&mem.force))
	Vector3TypeSupport.AsGoStruct(&m.Torque, unsafe.Pointer(&mem.torque))
}

func (t _WrenchTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Wrench())
}

type CWrench = C.geometry_msgs__msg__Wrench
type CWrenchSequence = C.geometry_msgs__msg__Wrench__Sequence

func WrenchSequenceToGo(goSlice *[]Wrench, cSlice CWrenchSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Wrench, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WrenchTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func WrenchSequenceToC(cSlice *CWrenchSequence, goSlice []Wrench) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__Wrench)(C.malloc(C.sizeof_struct_geometry_msgs__msg__Wrench * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WrenchTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func WrenchArrayToGo(goSlice []Wrench, cSlice []CWrench) {
	for i := 0; i < len(cSlice); i++ {
		WrenchTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func WrenchArrayToC(cSlice []CWrench, goSlice []Wrench) {
	for i := 0; i < len(goSlice); i++ {
		WrenchTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

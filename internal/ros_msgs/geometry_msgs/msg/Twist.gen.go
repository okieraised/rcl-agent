// Code generated by ros2gen. DO NOT EDIT.

package geometry_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/twist.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geometry_msgs/Twist", TwistTypeSupport)
	humble.RegisterMessage("geometry_msgs/msg/Twist", TwistTypeSupport)
}

type Twist struct {
	Linear  Vector3 `yaml:"linear"`
	Angular Vector3 `yaml:"angular"`
}

// NewTwist creates a new Twist with default values.
func NewTwist() *Twist {
	self := Twist{}
	self.SetDefaults()
	return &self
}

func (t *Twist) Clone() *Twist {
	c := &Twist{}
	c.Linear = *t.Linear.Clone()
	c.Angular = *t.Angular.Clone()
	return c
}

func (t *Twist) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Twist) SetDefaults() {
	t.Linear.SetDefaults()
	t.Angular.SetDefaults()
}

func (t *Twist) GetTypeSupport() humble.MessageTypeSupport {
	return TwistTypeSupport
}

// TwistPublisher wraps humble.Publisher to provide type safe helper
// functions
type TwistPublisher struct {
	*humble.Publisher
}

// NewTwistPublisher creates and returns a new publisher for the
// Twist
func NewTwistPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TwistPublisher, error) {
	pub, err := node.NewPublisher(topicName, TwistTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TwistPublisher{pub}, nil
}

func (p *TwistPublisher) Publish(msg *Twist) error {
	return p.Publisher.Publish(msg)
}

// TwistSubscription wraps humble.Subscription to provide type safe helper
// functions
type TwistSubscription struct {
	*humble.Subscription
}

// TwistSubscriptionCallback type is used to provide a subscription
// handler function for a TwistSubscription.
type TwistSubscriptionCallback func(msg *Twist, info *humble.MessageInfo, err error)

// NewTwistSubscription creates and returns a new subscription for the
// Twist
func NewTwistSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TwistSubscriptionCallback) (*TwistSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Twist
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TwistTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TwistSubscription{sub}, nil
}

func (s *TwistSubscription) TakeMessage(out *Twist) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTwistSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTwistSlice(dst, src []Twist) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TwistTypeSupport humble.MessageTypeSupport = _TwistTypeSupport{}

type _TwistTypeSupport struct{}

func (t _TwistTypeSupport) New() humble.Message {
	return NewTwist()
}

func (t _TwistTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__Twist
	return (unsafe.Pointer)(C.geometry_msgs__msg__Twist__create())
}

func (t _TwistTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__Twist__destroy((*C.geometry_msgs__msg__Twist)(pointer_to_free))
}

func (t _TwistTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Twist)
	mem := (*C.geometry_msgs__msg__Twist)(dst)
	Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.linear), &m.Linear)
	Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.angular), &m.Angular)
}

func (t _TwistTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Twist)
	mem := (*C.geometry_msgs__msg__Twist)(ros2_message_buffer)
	Vector3TypeSupport.AsGoStruct(&m.Linear, unsafe.Pointer(&mem.linear))
	Vector3TypeSupport.AsGoStruct(&m.Angular, unsafe.Pointer(&mem.angular))
}

func (t _TwistTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist())
}

type CTwist = C.geometry_msgs__msg__Twist
type CTwistSequence = C.geometry_msgs__msg__Twist__Sequence

func TwistSequenceToGo(goSlice *[]Twist, cSlice CTwistSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Twist, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TwistTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TwistSequenceToC(cSlice *CTwistSequence, goSlice []Twist) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__Twist)(C.malloc(C.sizeof_struct_geometry_msgs__msg__Twist * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TwistTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TwistArrayToGo(goSlice []Twist, cSlice []CTwist) {
	for i := 0; i < len(cSlice); i++ {
		TwistTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TwistArrayToC(cSlice []CTwist, goSlice []Twist) {
	for i := 0; i < len(goSlice); i++ {
		TwistTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

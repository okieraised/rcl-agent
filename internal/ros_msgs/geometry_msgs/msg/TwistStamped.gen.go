// Code generated by ros2gen. DO NOT EDIT.

package geometry_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/twist_stamped.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geometry_msgs/TwistStamped", TwistStampedTypeSupport)
	humble.RegisterMessage("geometry_msgs/msg/TwistStamped", TwistStampedTypeSupport)
}

type TwistStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Twist  Twist               `yaml:"twist"`
}

// NewTwistStamped creates a new TwistStamped with default values.
func NewTwistStamped() *TwistStamped {
	self := TwistStamped{}
	self.SetDefaults()
	return &self
}

func (t *TwistStamped) Clone() *TwistStamped {
	c := &TwistStamped{}
	c.Header = *t.Header.Clone()
	c.Twist = *t.Twist.Clone()
	return c
}

func (t *TwistStamped) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TwistStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.Twist.SetDefaults()
}

func (t *TwistStamped) GetTypeSupport() humble.MessageTypeSupport {
	return TwistStampedTypeSupport
}

// TwistStampedPublisher wraps humble.Publisher to provide type safe helper
// functions
type TwistStampedPublisher struct {
	*humble.Publisher
}

// NewTwistStampedPublisher creates and returns a new publisher for the
// TwistStamped
func NewTwistStampedPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TwistStampedPublisher, error) {
	pub, err := node.NewPublisher(topicName, TwistStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TwistStampedPublisher{pub}, nil
}

func (p *TwistStampedPublisher) Publish(msg *TwistStamped) error {
	return p.Publisher.Publish(msg)
}

// TwistStampedSubscription wraps humble.Subscription to provide type safe helper
// functions
type TwistStampedSubscription struct {
	*humble.Subscription
}

// TwistStampedSubscriptionCallback type is used to provide a subscription
// handler function for a TwistStampedSubscription.
type TwistStampedSubscriptionCallback func(msg *TwistStamped, info *humble.MessageInfo, err error)

// NewTwistStampedSubscription creates and returns a new subscription for the
// TwistStamped
func NewTwistStampedSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TwistStampedSubscriptionCallback) (*TwistStampedSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TwistStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TwistStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TwistStampedSubscription{sub}, nil
}

func (s *TwistStampedSubscription) TakeMessage(out *TwistStamped) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTwistStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTwistStampedSlice(dst, src []TwistStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TwistStampedTypeSupport humble.MessageTypeSupport = _TwistStampedTypeSupport{}

type _TwistStampedTypeSupport struct{}

func (t _TwistStampedTypeSupport) New() humble.Message {
	return NewTwistStamped()
}

func (t _TwistStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__TwistStamped
	return (unsafe.Pointer)(C.geometry_msgs__msg__TwistStamped__create())
}

func (t _TwistStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__TwistStamped__destroy((*C.geometry_msgs__msg__TwistStamped)(pointer_to_free))
}

func (t _TwistStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TwistStamped)
	mem := (*C.geometry_msgs__msg__TwistStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	TwistTypeSupport.AsCStruct(unsafe.Pointer(&mem.twist), &m.Twist)
}

func (t _TwistStampedTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TwistStamped)
	mem := (*C.geometry_msgs__msg__TwistStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	TwistTypeSupport.AsGoStruct(&m.Twist, unsafe.Pointer(&mem.twist))
}

func (t _TwistStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__TwistStamped())
}

type CTwistStamped = C.geometry_msgs__msg__TwistStamped
type CTwistStampedSequence = C.geometry_msgs__msg__TwistStamped__Sequence

func TwistStampedSequenceToGo(goSlice *[]TwistStamped, cSlice CTwistStampedSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TwistStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TwistStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TwistStampedSequenceToC(cSlice *CTwistStampedSequence, goSlice []TwistStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__TwistStamped)(C.malloc(C.sizeof_struct_geometry_msgs__msg__TwistStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TwistStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TwistStampedArrayToGo(goSlice []TwistStamped, cSlice []CTwistStamped) {
	for i := 0; i < len(cSlice); i++ {
		TwistStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TwistStampedArrayToC(cSlice []CTwistStamped, goSlice []TwistStamped) {
	for i := 0; i < len(goSlice); i++ {
		TwistStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

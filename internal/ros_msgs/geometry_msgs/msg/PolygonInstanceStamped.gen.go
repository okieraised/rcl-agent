// Code generated by ros2gen. DO NOT EDIT.

package geometry_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/polygon_instance_stamped.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geometry_msgs/PolygonInstanceStamped", PolygonInstanceStampedTypeSupport)
	humble.RegisterMessage("geometry_msgs/msg/PolygonInstanceStamped", PolygonInstanceStampedTypeSupport)
}

type PolygonInstanceStamped struct {
	Header  std_msgs_msg.Header `yaml:"header"`
	Polygon PolygonInstance     `yaml:"polygon"`
}

// NewPolygonInstanceStamped creates a new PolygonInstanceStamped with default values.
func NewPolygonInstanceStamped() *PolygonInstanceStamped {
	self := PolygonInstanceStamped{}
	self.SetDefaults()
	return &self
}

func (t *PolygonInstanceStamped) Clone() *PolygonInstanceStamped {
	c := &PolygonInstanceStamped{}
	c.Header = *t.Header.Clone()
	c.Polygon = *t.Polygon.Clone()
	return c
}

func (t *PolygonInstanceStamped) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PolygonInstanceStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.Polygon.SetDefaults()
}

func (t *PolygonInstanceStamped) GetTypeSupport() humble.MessageTypeSupport {
	return PolygonInstanceStampedTypeSupport
}

// PolygonInstanceStampedPublisher wraps humble.Publisher to provide type safe helper
// functions
type PolygonInstanceStampedPublisher struct {
	*humble.Publisher
}

// NewPolygonInstanceStampedPublisher creates and returns a new publisher for the
// PolygonInstanceStamped
func NewPolygonInstanceStampedPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PolygonInstanceStampedPublisher, error) {
	pub, err := node.NewPublisher(topicName, PolygonInstanceStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PolygonInstanceStampedPublisher{pub}, nil
}

func (p *PolygonInstanceStampedPublisher) Publish(msg *PolygonInstanceStamped) error {
	return p.Publisher.Publish(msg)
}

// PolygonInstanceStampedSubscription wraps humble.Subscription to provide type safe helper
// functions
type PolygonInstanceStampedSubscription struct {
	*humble.Subscription
}

// PolygonInstanceStampedSubscriptionCallback type is used to provide a subscription
// handler function for a PolygonInstanceStampedSubscription.
type PolygonInstanceStampedSubscriptionCallback func(msg *PolygonInstanceStamped, info *humble.MessageInfo, err error)

// NewPolygonInstanceStampedSubscription creates and returns a new subscription for the
// PolygonInstanceStamped
func NewPolygonInstanceStampedSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PolygonInstanceStampedSubscriptionCallback) (*PolygonInstanceStampedSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PolygonInstanceStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PolygonInstanceStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PolygonInstanceStampedSubscription{sub}, nil
}

func (s *PolygonInstanceStampedSubscription) TakeMessage(out *PolygonInstanceStamped) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePolygonInstanceStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePolygonInstanceStampedSlice(dst, src []PolygonInstanceStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PolygonInstanceStampedTypeSupport humble.MessageTypeSupport = _PolygonInstanceStampedTypeSupport{}

type _PolygonInstanceStampedTypeSupport struct{}

func (t _PolygonInstanceStampedTypeSupport) New() humble.Message {
	return NewPolygonInstanceStamped()
}

func (t _PolygonInstanceStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__PolygonInstanceStamped
	return (unsafe.Pointer)(C.geometry_msgs__msg__PolygonInstanceStamped__create())
}

func (t _PolygonInstanceStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__PolygonInstanceStamped__destroy((*C.geometry_msgs__msg__PolygonInstanceStamped)(pointer_to_free))
}

func (t _PolygonInstanceStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PolygonInstanceStamped)
	mem := (*C.geometry_msgs__msg__PolygonInstanceStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	PolygonInstanceTypeSupport.AsCStruct(unsafe.Pointer(&mem.polygon), &m.Polygon)
}

func (t _PolygonInstanceStampedTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PolygonInstanceStamped)
	mem := (*C.geometry_msgs__msg__PolygonInstanceStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	PolygonInstanceTypeSupport.AsGoStruct(&m.Polygon, unsafe.Pointer(&mem.polygon))
}

func (t _PolygonInstanceStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__PolygonInstanceStamped())
}

type CPolygonInstanceStamped = C.geometry_msgs__msg__PolygonInstanceStamped
type CPolygonInstanceStampedSequence = C.geometry_msgs__msg__PolygonInstanceStamped__Sequence

func PolygonInstanceStampedSequenceToGo(goSlice *[]PolygonInstanceStamped, cSlice CPolygonInstanceStampedSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PolygonInstanceStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PolygonInstanceStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PolygonInstanceStampedSequenceToC(cSlice *CPolygonInstanceStampedSequence, goSlice []PolygonInstanceStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__PolygonInstanceStamped)(C.malloc(C.sizeof_struct_geometry_msgs__msg__PolygonInstanceStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PolygonInstanceStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PolygonInstanceStampedArrayToGo(goSlice []PolygonInstanceStamped, cSlice []CPolygonInstanceStamped) {
	for i := 0; i < len(cSlice); i++ {
		PolygonInstanceStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PolygonInstanceStampedArrayToC(cSlice []CPolygonInstanceStamped, goSlice []PolygonInstanceStamped) {
	for i := 0; i < len(goSlice); i++ {
		PolygonInstanceStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

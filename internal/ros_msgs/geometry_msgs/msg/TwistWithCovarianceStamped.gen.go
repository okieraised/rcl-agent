// Code generated by ros2gen. DO NOT EDIT.

package geometry_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/twist_with_covariance_stamped.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geometry_msgs/TwistWithCovarianceStamped", TwistWithCovarianceStampedTypeSupport)
	humble.RegisterMessage("geometry_msgs/msg/TwistWithCovarianceStamped", TwistWithCovarianceStampedTypeSupport)
}

type TwistWithCovarianceStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Twist  TwistWithCovariance `yaml:"twist"`
}

// NewTwistWithCovarianceStamped creates a new TwistWithCovarianceStamped with default values.
func NewTwistWithCovarianceStamped() *TwistWithCovarianceStamped {
	self := TwistWithCovarianceStamped{}
	self.SetDefaults()
	return &self
}

func (t *TwistWithCovarianceStamped) Clone() *TwistWithCovarianceStamped {
	c := &TwistWithCovarianceStamped{}
	c.Header = *t.Header.Clone()
	c.Twist = *t.Twist.Clone()
	return c
}

func (t *TwistWithCovarianceStamped) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TwistWithCovarianceStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.Twist.SetDefaults()
}

func (t *TwistWithCovarianceStamped) GetTypeSupport() humble.MessageTypeSupport {
	return TwistWithCovarianceStampedTypeSupport
}

// TwistWithCovarianceStampedPublisher wraps humble.Publisher to provide type safe helper
// functions
type TwistWithCovarianceStampedPublisher struct {
	*humble.Publisher
}

// NewTwistWithCovarianceStampedPublisher creates and returns a new publisher for the
// TwistWithCovarianceStamped
func NewTwistWithCovarianceStampedPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TwistWithCovarianceStampedPublisher, error) {
	pub, err := node.NewPublisher(topicName, TwistWithCovarianceStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TwistWithCovarianceStampedPublisher{pub}, nil
}

func (p *TwistWithCovarianceStampedPublisher) Publish(msg *TwistWithCovarianceStamped) error {
	return p.Publisher.Publish(msg)
}

// TwistWithCovarianceStampedSubscription wraps humble.Subscription to provide type safe helper
// functions
type TwistWithCovarianceStampedSubscription struct {
	*humble.Subscription
}

// TwistWithCovarianceStampedSubscriptionCallback type is used to provide a subscription
// handler function for a TwistWithCovarianceStampedSubscription.
type TwistWithCovarianceStampedSubscriptionCallback func(msg *TwistWithCovarianceStamped, info *humble.MessageInfo, err error)

// NewTwistWithCovarianceStampedSubscription creates and returns a new subscription for the
// TwistWithCovarianceStamped
func NewTwistWithCovarianceStampedSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TwistWithCovarianceStampedSubscriptionCallback) (*TwistWithCovarianceStampedSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TwistWithCovarianceStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TwistWithCovarianceStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TwistWithCovarianceStampedSubscription{sub}, nil
}

func (s *TwistWithCovarianceStampedSubscription) TakeMessage(out *TwistWithCovarianceStamped) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTwistWithCovarianceStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTwistWithCovarianceStampedSlice(dst, src []TwistWithCovarianceStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TwistWithCovarianceStampedTypeSupport humble.MessageTypeSupport = _TwistWithCovarianceStampedTypeSupport{}

type _TwistWithCovarianceStampedTypeSupport struct{}

func (t _TwistWithCovarianceStampedTypeSupport) New() humble.Message {
	return NewTwistWithCovarianceStamped()
}

func (t _TwistWithCovarianceStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__TwistWithCovarianceStamped
	return (unsafe.Pointer)(C.geometry_msgs__msg__TwistWithCovarianceStamped__create())
}

func (t _TwistWithCovarianceStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__TwistWithCovarianceStamped__destroy((*C.geometry_msgs__msg__TwistWithCovarianceStamped)(pointer_to_free))
}

func (t _TwistWithCovarianceStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TwistWithCovarianceStamped)
	mem := (*C.geometry_msgs__msg__TwistWithCovarianceStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	TwistWithCovarianceTypeSupport.AsCStruct(unsafe.Pointer(&mem.twist), &m.Twist)
}

func (t _TwistWithCovarianceStampedTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TwistWithCovarianceStamped)
	mem := (*C.geometry_msgs__msg__TwistWithCovarianceStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	TwistWithCovarianceTypeSupport.AsGoStruct(&m.Twist, unsafe.Pointer(&mem.twist))
}

func (t _TwistWithCovarianceStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovarianceStamped())
}

type CTwistWithCovarianceStamped = C.geometry_msgs__msg__TwistWithCovarianceStamped
type CTwistWithCovarianceStampedSequence = C.geometry_msgs__msg__TwistWithCovarianceStamped__Sequence

func TwistWithCovarianceStampedSequenceToGo(goSlice *[]TwistWithCovarianceStamped, cSlice CTwistWithCovarianceStampedSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TwistWithCovarianceStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TwistWithCovarianceStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TwistWithCovarianceStampedSequenceToC(cSlice *CTwistWithCovarianceStampedSequence, goSlice []TwistWithCovarianceStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__TwistWithCovarianceStamped)(C.malloc(C.sizeof_struct_geometry_msgs__msg__TwistWithCovarianceStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TwistWithCovarianceStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TwistWithCovarianceStampedArrayToGo(goSlice []TwistWithCovarianceStamped, cSlice []CTwistWithCovarianceStamped) {
	for i := 0; i < len(cSlice); i++ {
		TwistWithCovarianceStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TwistWithCovarianceStampedArrayToC(cSlice []CTwistWithCovarianceStamped, goSlice []TwistWithCovarianceStamped) {
	for i := 0; i < len(goSlice); i++ {
		TwistWithCovarianceStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

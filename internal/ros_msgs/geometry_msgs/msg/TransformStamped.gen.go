// Code generated by ros2gen. DO NOT EDIT.

package geometry_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/transform_stamped.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geometry_msgs/TransformStamped", TransformStampedTypeSupport)
	humble.RegisterMessage("geometry_msgs/msg/TransformStamped", TransformStampedTypeSupport)
}

type TransformStamped struct {
	Header       std_msgs_msg.Header `yaml:"header"`         // The frame id in the header is used as the reference frame of this transform.
	ChildFrameId string              `yaml:"child_frame_id"` // The frame id of the child frame to which this transform points.
	Transform    Transform           `yaml:"transform"`      // Translation and rotation in 3-dimensions of child_frame_id from header.frame_id.
}

// NewTransformStamped creates a new TransformStamped with default values.
func NewTransformStamped() *TransformStamped {
	self := TransformStamped{}
	self.SetDefaults()
	return &self
}

func (t *TransformStamped) Clone() *TransformStamped {
	c := &TransformStamped{}
	c.Header = *t.Header.Clone()
	c.ChildFrameId = t.ChildFrameId
	c.Transform = *t.Transform.Clone()
	return c
}

func (t *TransformStamped) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TransformStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.ChildFrameId = ""
	t.Transform.SetDefaults()
}

func (t *TransformStamped) GetTypeSupport() humble.MessageTypeSupport {
	return TransformStampedTypeSupport
}

// TransformStampedPublisher wraps humble.Publisher to provide type safe helper
// functions
type TransformStampedPublisher struct {
	*humble.Publisher
}

// NewTransformStampedPublisher creates and returns a new publisher for the
// TransformStamped
func NewTransformStampedPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TransformStampedPublisher, error) {
	pub, err := node.NewPublisher(topicName, TransformStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TransformStampedPublisher{pub}, nil
}

func (p *TransformStampedPublisher) Publish(msg *TransformStamped) error {
	return p.Publisher.Publish(msg)
}

// TransformStampedSubscription wraps humble.Subscription to provide type safe helper
// functions
type TransformStampedSubscription struct {
	*humble.Subscription
}

// TransformStampedSubscriptionCallback type is used to provide a subscription
// handler function for a TransformStampedSubscription.
type TransformStampedSubscriptionCallback func(msg *TransformStamped, info *humble.MessageInfo, err error)

// NewTransformStampedSubscription creates and returns a new subscription for the
// TransformStamped
func NewTransformStampedSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TransformStampedSubscriptionCallback) (*TransformStampedSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TransformStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TransformStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TransformStampedSubscription{sub}, nil
}

func (s *TransformStampedSubscription) TakeMessage(out *TransformStamped) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTransformStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTransformStampedSlice(dst, src []TransformStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TransformStampedTypeSupport humble.MessageTypeSupport = _TransformStampedTypeSupport{}

type _TransformStampedTypeSupport struct{}

func (t _TransformStampedTypeSupport) New() humble.Message {
	return NewTransformStamped()
}

func (t _TransformStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__TransformStamped
	return (unsafe.Pointer)(C.geometry_msgs__msg__TransformStamped__create())
}

func (t _TransformStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__TransformStamped__destroy((*C.geometry_msgs__msg__TransformStamped)(pointer_to_free))
}

func (t _TransformStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TransformStamped)
	mem := (*C.geometry_msgs__msg__TransformStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	humble.StringAsCStruct(unsafe.Pointer(&mem.child_frame_id), m.ChildFrameId)
	TransformTypeSupport.AsCStruct(unsafe.Pointer(&mem.transform), &m.Transform)
}

func (t _TransformStampedTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TransformStamped)
	mem := (*C.geometry_msgs__msg__TransformStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	humble.StringAsGoStruct(&m.ChildFrameId, unsafe.Pointer(&mem.child_frame_id))
	TransformTypeSupport.AsGoStruct(&m.Transform, unsafe.Pointer(&mem.transform))
}

func (t _TransformStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped())
}

type CTransformStamped = C.geometry_msgs__msg__TransformStamped
type CTransformStampedSequence = C.geometry_msgs__msg__TransformStamped__Sequence

func TransformStampedSequenceToGo(goSlice *[]TransformStamped, cSlice CTransformStampedSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TransformStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TransformStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TransformStampedSequenceToC(cSlice *CTransformStampedSequence, goSlice []TransformStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__TransformStamped)(C.malloc(C.sizeof_struct_geometry_msgs__msg__TransformStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TransformStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TransformStampedArrayToGo(goSlice []TransformStamped, cSlice []CTransformStamped) {
	for i := 0; i < len(cSlice); i++ {
		TransformStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TransformStampedArrayToC(cSlice []CTransformStamped, goSlice []TransformStamped) {
	for i := 0; i < len(goSlice); i++ {
		TransformStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

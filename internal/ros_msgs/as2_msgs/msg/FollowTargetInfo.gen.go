// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/follow_target_info.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/FollowTargetInfo", FollowTargetInfoTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/FollowTargetInfo", FollowTargetInfoTypeSupport)
}

const (
	FollowTargetInfo_WAITING          int8 = 0
	FollowTargetInfo_RUNNING          int8 = 1
	FollowTargetInfo_END              int8 = 2
	FollowTargetInfo_UNSET            int8 = 0 // Mode when the follow mode is not set
	FollowTargetInfo_PICKUP           int8 = 1
	FollowTargetInfo_UNPICK           int8 = 2
	FollowTargetInfo_DYNAMIC_LAND     int8 = 3
	FollowTargetInfo_DYNAMIC_FOLLOWER int8 = 4
)

type FollowTargetInfo struct {
	Header       std_msgs_msg.Header `yaml:"header"`        // Message header
	FollowStatus int8                `yaml:"follow_status"` // Follow status
	FollowMode   int8                `yaml:"follow_mode"`   // Follow mode
}

// NewFollowTargetInfo creates a new FollowTargetInfo with default values.
func NewFollowTargetInfo() *FollowTargetInfo {
	self := FollowTargetInfo{}
	self.SetDefaults()
	return &self
}

func (t *FollowTargetInfo) Clone() *FollowTargetInfo {
	c := &FollowTargetInfo{}
	c.Header = *t.Header.Clone()
	c.FollowStatus = t.FollowStatus
	c.FollowMode = t.FollowMode
	return c
}

func (t *FollowTargetInfo) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *FollowTargetInfo) SetDefaults() {
	t.Header.SetDefaults()
	t.FollowStatus = 0
	t.FollowMode = 0
}

func (t *FollowTargetInfo) GetTypeSupport() humble.MessageTypeSupport {
	return FollowTargetInfoTypeSupport
}

// FollowTargetInfoPublisher wraps humble.Publisher to provide type safe helper
// functions
type FollowTargetInfoPublisher struct {
	*humble.Publisher
}

// NewFollowTargetInfoPublisher creates and returns a new publisher for the
// FollowTargetInfo
func NewFollowTargetInfoPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*FollowTargetInfoPublisher, error) {
	pub, err := node.NewPublisher(topicName, FollowTargetInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowTargetInfoPublisher{pub}, nil
}

func (p *FollowTargetInfoPublisher) Publish(msg *FollowTargetInfo) error {
	return p.Publisher.Publish(msg)
}

// FollowTargetInfoSubscription wraps humble.Subscription to provide type safe helper
// functions
type FollowTargetInfoSubscription struct {
	*humble.Subscription
}

// FollowTargetInfoSubscriptionCallback type is used to provide a subscription
// handler function for a FollowTargetInfoSubscription.
type FollowTargetInfoSubscriptionCallback func(msg *FollowTargetInfo, info *humble.MessageInfo, err error)

// NewFollowTargetInfoSubscription creates and returns a new subscription for the
// FollowTargetInfo
func NewFollowTargetInfoSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback FollowTargetInfoSubscriptionCallback) (*FollowTargetInfoSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg FollowTargetInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, FollowTargetInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowTargetInfoSubscription{sub}, nil
}

func (s *FollowTargetInfoSubscription) TakeMessage(out *FollowTargetInfo) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowTargetInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowTargetInfoSlice(dst, src []FollowTargetInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowTargetInfoTypeSupport humble.MessageTypeSupport = _FollowTargetInfoTypeSupport{}

type _FollowTargetInfoTypeSupport struct{}

func (t _FollowTargetInfoTypeSupport) New() humble.Message {
	return NewFollowTargetInfo()
}

func (t _FollowTargetInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__FollowTargetInfo
	return (unsafe.Pointer)(C.as2_msgs__msg__FollowTargetInfo__create())
}

func (t _FollowTargetInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__FollowTargetInfo__destroy((*C.as2_msgs__msg__FollowTargetInfo)(pointer_to_free))
}

func (t _FollowTargetInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*FollowTargetInfo)
	mem := (*C.as2_msgs__msg__FollowTargetInfo)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.follow_status = C.int8_t(m.FollowStatus)
	mem.follow_mode = C.int8_t(m.FollowMode)
}

func (t _FollowTargetInfoTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowTargetInfo)
	mem := (*C.as2_msgs__msg__FollowTargetInfo)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.FollowStatus = int8(mem.follow_status)
	m.FollowMode = int8(mem.follow_mode)
}

func (t _FollowTargetInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__FollowTargetInfo())
}

type CFollowTargetInfo = C.as2_msgs__msg__FollowTargetInfo
type CFollowTargetInfoSequence = C.as2_msgs__msg__FollowTargetInfo__Sequence

func FollowTargetInfoSequenceToGo(goSlice *[]FollowTargetInfo, cSlice CFollowTargetInfoSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowTargetInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowTargetInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func FollowTargetInfoSequenceToC(cSlice *CFollowTargetInfoSequence, goSlice []FollowTargetInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__FollowTargetInfo)(C.malloc(C.sizeof_struct_as2_msgs__msg__FollowTargetInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowTargetInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func FollowTargetInfoArrayToGo(goSlice []FollowTargetInfo, cSlice []CFollowTargetInfo) {
	for i := 0; i < len(cSlice); i++ {
		FollowTargetInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func FollowTargetInfoArrayToC(cSlice []CFollowTargetInfo, goSlice []FollowTargetInfo) {
	for i := 0; i < len(goSlice); i++ {
		FollowTargetInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

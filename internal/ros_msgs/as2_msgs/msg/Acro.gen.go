// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/acro.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/Acro", AcroTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/Acro", AcroTypeSupport)
}

type Acro struct {
	Header       std_msgs_msg.Header       `yaml:"header"`        // Message header
	AngularRates geometry_msgs_msg.Vector3 `yaml:"angular_rates"` // Roll-, pitch-, yaw-rate around body axes [rad/s]
	Thrust       geometry_msgs_msg.Vector3 `yaml:"thrust"`        // Thrust [N] expressed in the body frame.
}

// NewAcro creates a new Acro with default values.
func NewAcro() *Acro {
	self := Acro{}
	self.SetDefaults()
	return &self
}

func (t *Acro) Clone() *Acro {
	c := &Acro{}
	c.Header = *t.Header.Clone()
	c.AngularRates = *t.AngularRates.Clone()
	c.Thrust = *t.Thrust.Clone()
	return c
}

func (t *Acro) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Acro) SetDefaults() {
	t.Header.SetDefaults()
	t.AngularRates.SetDefaults()
	t.Thrust.SetDefaults()
}

func (t *Acro) GetTypeSupport() humble.MessageTypeSupport {
	return AcroTypeSupport
}

// AcroPublisher wraps humble.Publisher to provide type safe helper
// functions
type AcroPublisher struct {
	*humble.Publisher
}

// NewAcroPublisher creates and returns a new publisher for the
// Acro
func NewAcroPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*AcroPublisher, error) {
	pub, err := node.NewPublisher(topicName, AcroTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AcroPublisher{pub}, nil
}

func (p *AcroPublisher) Publish(msg *Acro) error {
	return p.Publisher.Publish(msg)
}

// AcroSubscription wraps humble.Subscription to provide type safe helper
// functions
type AcroSubscription struct {
	*humble.Subscription
}

// AcroSubscriptionCallback type is used to provide a subscription
// handler function for a AcroSubscription.
type AcroSubscriptionCallback func(msg *Acro, info *humble.MessageInfo, err error)

// NewAcroSubscription creates and returns a new subscription for the
// Acro
func NewAcroSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback AcroSubscriptionCallback) (*AcroSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Acro
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, AcroTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AcroSubscription{sub}, nil
}

func (s *AcroSubscription) TakeMessage(out *Acro) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAcroSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAcroSlice(dst, src []Acro) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AcroTypeSupport humble.MessageTypeSupport = _AcroTypeSupport{}

type _AcroTypeSupport struct{}

func (t _AcroTypeSupport) New() humble.Message {
	return NewAcro()
}

func (t _AcroTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__Acro
	return (unsafe.Pointer)(C.as2_msgs__msg__Acro__create())
}

func (t _AcroTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__Acro__destroy((*C.as2_msgs__msg__Acro)(pointer_to_free))
}

func (t _AcroTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Acro)
	mem := (*C.as2_msgs__msg__Acro)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.angular_rates), &m.AngularRates)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.thrust), &m.Thrust)
}

func (t _AcroTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Acro)
	mem := (*C.as2_msgs__msg__Acro)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.AngularRates, unsafe.Pointer(&mem.angular_rates))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Thrust, unsafe.Pointer(&mem.thrust))
}

func (t _AcroTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__Acro())
}

type CAcro = C.as2_msgs__msg__Acro
type CAcroSequence = C.as2_msgs__msg__Acro__Sequence

func AcroSequenceToGo(goSlice *[]Acro, cSlice CAcroSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Acro, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AcroTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func AcroSequenceToC(cSlice *CAcroSequence, goSlice []Acro) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__Acro)(C.malloc(C.sizeof_struct_as2_msgs__msg__Acro * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AcroTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func AcroArrayToGo(goSlice []Acro, cSlice []CAcro) {
	for i := 0; i < len(cSlice); i++ {
		AcroTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func AcroArrayToC(cSlice []CAcro, goSlice []Acro) {
	for i := 0; i < len(goSlice); i++ {
		AcroTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/polygon_list.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PolygonList", PolygonListTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/PolygonList", PolygonListTypeSupport)
}

type PolygonList struct {
	Polygons []geometry_msgs_msg.PolygonStamped `yaml:"polygons"`
}

// NewPolygonList creates a new PolygonList with default values.
func NewPolygonList() *PolygonList {
	self := PolygonList{}
	self.SetDefaults()
	return &self
}

func (t *PolygonList) Clone() *PolygonList {
	c := &PolygonList{}
	if t.Polygons != nil {
		c.Polygons = make([]geometry_msgs_msg.PolygonStamped, len(t.Polygons))
		geometry_msgs_msg.ClonePolygonStampedSlice(c.Polygons, t.Polygons)
	}
	return c
}

func (t *PolygonList) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PolygonList) SetDefaults() {
	t.Polygons = nil
}

func (t *PolygonList) GetTypeSupport() humble.MessageTypeSupport {
	return PolygonListTypeSupport
}

// PolygonListPublisher wraps humble.Publisher to provide type safe helper
// functions
type PolygonListPublisher struct {
	*humble.Publisher
}

// NewPolygonListPublisher creates and returns a new publisher for the
// PolygonList
func NewPolygonListPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PolygonListPublisher, error) {
	pub, err := node.NewPublisher(topicName, PolygonListTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PolygonListPublisher{pub}, nil
}

func (p *PolygonListPublisher) Publish(msg *PolygonList) error {
	return p.Publisher.Publish(msg)
}

// PolygonListSubscription wraps humble.Subscription to provide type safe helper
// functions
type PolygonListSubscription struct {
	*humble.Subscription
}

// PolygonListSubscriptionCallback type is used to provide a subscription
// handler function for a PolygonListSubscription.
type PolygonListSubscriptionCallback func(msg *PolygonList, info *humble.MessageInfo, err error)

// NewPolygonListSubscription creates and returns a new subscription for the
// PolygonList
func NewPolygonListSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PolygonListSubscriptionCallback) (*PolygonListSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PolygonList
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PolygonListTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PolygonListSubscription{sub}, nil
}

func (s *PolygonListSubscription) TakeMessage(out *PolygonList) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePolygonListSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePolygonListSlice(dst, src []PolygonList) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PolygonListTypeSupport humble.MessageTypeSupport = _PolygonListTypeSupport{}

type _PolygonListTypeSupport struct{}

func (t _PolygonListTypeSupport) New() humble.Message {
	return NewPolygonList()
}

func (t _PolygonListTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__PolygonList
	return (unsafe.Pointer)(C.as2_msgs__msg__PolygonList__create())
}

func (t _PolygonListTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__PolygonList__destroy((*C.as2_msgs__msg__PolygonList)(pointer_to_free))
}

func (t _PolygonListTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PolygonList)
	mem := (*C.as2_msgs__msg__PolygonList)(dst)
	geometry_msgs_msg.PolygonStampedSequenceToC((*geometry_msgs_msg.CPolygonStampedSequence)(unsafe.Pointer(&mem.polygons)), m.Polygons)
}

func (t _PolygonListTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PolygonList)
	mem := (*C.as2_msgs__msg__PolygonList)(ros2_message_buffer)
	geometry_msgs_msg.PolygonStampedSequenceToGo(&m.Polygons, *(*geometry_msgs_msg.CPolygonStampedSequence)(unsafe.Pointer(&mem.polygons)))
}

func (t _PolygonListTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__PolygonList())
}

type CPolygonList = C.as2_msgs__msg__PolygonList
type CPolygonListSequence = C.as2_msgs__msg__PolygonList__Sequence

func PolygonListSequenceToGo(goSlice *[]PolygonList, cSlice CPolygonListSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PolygonList, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PolygonListTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PolygonListSequenceToC(cSlice *CPolygonListSequence, goSlice []PolygonList) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__PolygonList)(C.malloc(C.sizeof_struct_as2_msgs__msg__PolygonList * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PolygonListTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PolygonListArrayToGo(goSlice []PolygonList, cSlice []CPolygonList) {
	for i := 0; i < len(cSlice); i++ {
		PolygonListTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PolygonListArrayToC(cSlice []CPolygonList, goSlice []PolygonList) {
	for i := 0; i < len(goSlice); i++ {
		PolygonListTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

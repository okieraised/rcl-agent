// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/pose_with_id_array.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PoseWithIDArray", PoseWithIDArrayTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/PoseWithIDArray", PoseWithIDArrayTypeSupport)
}

type PoseWithIDArray struct {
	Poses []PoseWithID `yaml:"poses"`
}

// NewPoseWithIDArray creates a new PoseWithIDArray with default values.
func NewPoseWithIDArray() *PoseWithIDArray {
	self := PoseWithIDArray{}
	self.SetDefaults()
	return &self
}

func (t *PoseWithIDArray) Clone() *PoseWithIDArray {
	c := &PoseWithIDArray{}
	if t.Poses != nil {
		c.Poses = make([]PoseWithID, len(t.Poses))
		ClonePoseWithIDSlice(c.Poses, t.Poses)
	}
	return c
}

func (t *PoseWithIDArray) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PoseWithIDArray) SetDefaults() {
	t.Poses = nil
}

func (t *PoseWithIDArray) GetTypeSupport() humble.MessageTypeSupport {
	return PoseWithIDArrayTypeSupport
}

// PoseWithIDArrayPublisher wraps humble.Publisher to provide type safe helper
// functions
type PoseWithIDArrayPublisher struct {
	*humble.Publisher
}

// NewPoseWithIDArrayPublisher creates and returns a new publisher for the
// PoseWithIDArray
func NewPoseWithIDArrayPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PoseWithIDArrayPublisher, error) {
	pub, err := node.NewPublisher(topicName, PoseWithIDArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PoseWithIDArrayPublisher{pub}, nil
}

func (p *PoseWithIDArrayPublisher) Publish(msg *PoseWithIDArray) error {
	return p.Publisher.Publish(msg)
}

// PoseWithIDArraySubscription wraps humble.Subscription to provide type safe helper
// functions
type PoseWithIDArraySubscription struct {
	*humble.Subscription
}

// PoseWithIDArraySubscriptionCallback type is used to provide a subscription
// handler function for a PoseWithIDArraySubscription.
type PoseWithIDArraySubscriptionCallback func(msg *PoseWithIDArray, info *humble.MessageInfo, err error)

// NewPoseWithIDArraySubscription creates and returns a new subscription for the
// PoseWithIDArray
func NewPoseWithIDArraySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PoseWithIDArraySubscriptionCallback) (*PoseWithIDArraySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PoseWithIDArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PoseWithIDArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PoseWithIDArraySubscription{sub}, nil
}

func (s *PoseWithIDArraySubscription) TakeMessage(out *PoseWithIDArray) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePoseWithIDArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePoseWithIDArraySlice(dst, src []PoseWithIDArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PoseWithIDArrayTypeSupport humble.MessageTypeSupport = _PoseWithIDArrayTypeSupport{}

type _PoseWithIDArrayTypeSupport struct{}

func (t _PoseWithIDArrayTypeSupport) New() humble.Message {
	return NewPoseWithIDArray()
}

func (t _PoseWithIDArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__PoseWithIDArray
	return (unsafe.Pointer)(C.as2_msgs__msg__PoseWithIDArray__create())
}

func (t _PoseWithIDArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__PoseWithIDArray__destroy((*C.as2_msgs__msg__PoseWithIDArray)(pointer_to_free))
}

func (t _PoseWithIDArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PoseWithIDArray)
	mem := (*C.as2_msgs__msg__PoseWithIDArray)(dst)
	PoseWithIDSequenceToC(&mem.poses, m.Poses)
}

func (t _PoseWithIDArrayTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PoseWithIDArray)
	mem := (*C.as2_msgs__msg__PoseWithIDArray)(ros2_message_buffer)
	PoseWithIDSequenceToGo(&m.Poses, mem.poses)
}

func (t _PoseWithIDArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__PoseWithIDArray())
}

type CPoseWithIDArray = C.as2_msgs__msg__PoseWithIDArray
type CPoseWithIDArraySequence = C.as2_msgs__msg__PoseWithIDArray__Sequence

func PoseWithIDArraySequenceToGo(goSlice *[]PoseWithIDArray, cSlice CPoseWithIDArraySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PoseWithIDArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PoseWithIDArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PoseWithIDArraySequenceToC(cSlice *CPoseWithIDArraySequence, goSlice []PoseWithIDArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__PoseWithIDArray)(C.malloc(C.sizeof_struct_as2_msgs__msg__PoseWithIDArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PoseWithIDArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PoseWithIDArrayArrayToGo(goSlice []PoseWithIDArray, cSlice []CPoseWithIDArray) {
	for i := 0; i < len(cSlice); i++ {
		PoseWithIDArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PoseWithIDArrayArrayToC(cSlice []CPoseWithIDArray, goSlice []PoseWithIDArray) {
	for i := 0; i < len(goSlice); i++ {
		PoseWithIDArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

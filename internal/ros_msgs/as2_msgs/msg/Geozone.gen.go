// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/geozone.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/Geozone", GeozoneTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/Geozone", GeozoneTypeSupport)
}

type Geozone struct {
	Id       int8                      `yaml:"id"`        // geofence id
	Alert    int8                      `yaml:"alert"`     // alert generated
	Type     string                    `yaml:"type"`      // geofence or geocage
	DataType string                    `yaml:"data_type"` // cartesian or gps
	Polygon  geometry_msgs_msg.Polygon `yaml:"polygon"`   // fence polygon
	ZUp      float32                   `yaml:"z_up"`      // height limit up
	ZDown    float32                   `yaml:"z_down"`    // height limit bottom
}

// NewGeozone creates a new Geozone with default values.
func NewGeozone() *Geozone {
	self := Geozone{}
	self.SetDefaults()
	return &self
}

func (t *Geozone) Clone() *Geozone {
	c := &Geozone{}
	c.Id = t.Id
	c.Alert = t.Alert
	c.Type = t.Type
	c.DataType = t.DataType
	c.Polygon = *t.Polygon.Clone()
	c.ZUp = t.ZUp
	c.ZDown = t.ZDown
	return c
}

func (t *Geozone) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Geozone) SetDefaults() {
	t.Id = 0
	t.Alert = 0
	t.Type = ""
	t.DataType = ""
	t.Polygon.SetDefaults()
	t.ZUp = 0
	t.ZDown = 0
}

func (t *Geozone) GetTypeSupport() humble.MessageTypeSupport {
	return GeozoneTypeSupport
}

// GeozonePublisher wraps humble.Publisher to provide type safe helper
// functions
type GeozonePublisher struct {
	*humble.Publisher
}

// NewGeozonePublisher creates and returns a new publisher for the
// Geozone
func NewGeozonePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GeozonePublisher, error) {
	pub, err := node.NewPublisher(topicName, GeozoneTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeozonePublisher{pub}, nil
}

func (p *GeozonePublisher) Publish(msg *Geozone) error {
	return p.Publisher.Publish(msg)
}

// GeozoneSubscription wraps humble.Subscription to provide type safe helper
// functions
type GeozoneSubscription struct {
	*humble.Subscription
}

// GeozoneSubscriptionCallback type is used to provide a subscription
// handler function for a GeozoneSubscription.
type GeozoneSubscriptionCallback func(msg *Geozone, info *humble.MessageInfo, err error)

// NewGeozoneSubscription creates and returns a new subscription for the
// Geozone
func NewGeozoneSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GeozoneSubscriptionCallback) (*GeozoneSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Geozone
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GeozoneTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeozoneSubscription{sub}, nil
}

func (s *GeozoneSubscription) TakeMessage(out *Geozone) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeozoneSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeozoneSlice(dst, src []Geozone) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeozoneTypeSupport humble.MessageTypeSupport = _GeozoneTypeSupport{}

type _GeozoneTypeSupport struct{}

func (t _GeozoneTypeSupport) New() humble.Message {
	return NewGeozone()
}

func (t _GeozoneTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__Geozone
	return (unsafe.Pointer)(C.as2_msgs__msg__Geozone__create())
}

func (t _GeozoneTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__Geozone__destroy((*C.as2_msgs__msg__Geozone)(pointer_to_free))
}

func (t _GeozoneTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Geozone)
	mem := (*C.as2_msgs__msg__Geozone)(dst)
	mem.id = C.int8_t(m.Id)
	mem.alert = C.int8_t(m.Alert)
	humble.StringAsCStruct(unsafe.Pointer(&mem._type), m.Type)
	humble.StringAsCStruct(unsafe.Pointer(&mem.data_type), m.DataType)
	geometry_msgs_msg.PolygonTypeSupport.AsCStruct(unsafe.Pointer(&mem.polygon), &m.Polygon)
	mem.z_up = C.float(m.ZUp)
	mem.z_down = C.float(m.ZDown)
}

func (t _GeozoneTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Geozone)
	mem := (*C.as2_msgs__msg__Geozone)(ros2_message_buffer)
	m.Id = int8(mem.id)
	m.Alert = int8(mem.alert)
	humble.StringAsGoStruct(&m.Type, unsafe.Pointer(&mem._type))
	humble.StringAsGoStruct(&m.DataType, unsafe.Pointer(&mem.data_type))
	geometry_msgs_msg.PolygonTypeSupport.AsGoStruct(&m.Polygon, unsafe.Pointer(&mem.polygon))
	m.ZUp = float32(mem.z_up)
	m.ZDown = float32(mem.z_down)
}

func (t _GeozoneTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__Geozone())
}

type CGeozone = C.as2_msgs__msg__Geozone
type CGeozoneSequence = C.as2_msgs__msg__Geozone__Sequence

func GeozoneSequenceToGo(goSlice *[]Geozone, cSlice CGeozoneSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Geozone, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeozoneTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GeozoneSequenceToC(cSlice *CGeozoneSequence, goSlice []Geozone) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__Geozone)(C.malloc(C.sizeof_struct_as2_msgs__msg__Geozone * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeozoneTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GeozoneArrayToGo(goSlice []Geozone, cSlice []CGeozone) {
	for i := 0; i < len(cSlice); i++ {
		GeozoneTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GeozoneArrayToC(cSlice []CGeozone, goSlice []Geozone) {
	for i := 0; i < len(goSlice); i++ {
		GeozoneTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

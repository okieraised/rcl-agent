// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/behavior_status.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/BehaviorStatus", BehaviorStatusTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/BehaviorStatus", BehaviorStatusTypeSupport)
}

const (
	BehaviorStatus_IDLE    uint8 = 0
	BehaviorStatus_RUNNING uint8 = 1
	BehaviorStatus_PAUSED  uint8 = 2
)

type BehaviorStatus struct {
	Status uint8 `yaml:"status"`
}

// NewBehaviorStatus creates a new BehaviorStatus with default values.
func NewBehaviorStatus() *BehaviorStatus {
	self := BehaviorStatus{}
	self.SetDefaults()
	return &self
}

func (t *BehaviorStatus) Clone() *BehaviorStatus {
	c := &BehaviorStatus{}
	c.Status = t.Status
	return c
}

func (t *BehaviorStatus) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *BehaviorStatus) SetDefaults() {
	t.Status = 0
}

func (t *BehaviorStatus) GetTypeSupport() humble.MessageTypeSupport {
	return BehaviorStatusTypeSupport
}

// BehaviorStatusPublisher wraps humble.Publisher to provide type safe helper
// functions
type BehaviorStatusPublisher struct {
	*humble.Publisher
}

// NewBehaviorStatusPublisher creates and returns a new publisher for the
// BehaviorStatus
func NewBehaviorStatusPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*BehaviorStatusPublisher, error) {
	pub, err := node.NewPublisher(topicName, BehaviorStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &BehaviorStatusPublisher{pub}, nil
}

func (p *BehaviorStatusPublisher) Publish(msg *BehaviorStatus) error {
	return p.Publisher.Publish(msg)
}

// BehaviorStatusSubscription wraps humble.Subscription to provide type safe helper
// functions
type BehaviorStatusSubscription struct {
	*humble.Subscription
}

// BehaviorStatusSubscriptionCallback type is used to provide a subscription
// handler function for a BehaviorStatusSubscription.
type BehaviorStatusSubscriptionCallback func(msg *BehaviorStatus, info *humble.MessageInfo, err error)

// NewBehaviorStatusSubscription creates and returns a new subscription for the
// BehaviorStatus
func NewBehaviorStatusSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback BehaviorStatusSubscriptionCallback) (*BehaviorStatusSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg BehaviorStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, BehaviorStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &BehaviorStatusSubscription{sub}, nil
}

func (s *BehaviorStatusSubscription) TakeMessage(out *BehaviorStatus) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBehaviorStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBehaviorStatusSlice(dst, src []BehaviorStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var BehaviorStatusTypeSupport humble.MessageTypeSupport = _BehaviorStatusTypeSupport{}

type _BehaviorStatusTypeSupport struct{}

func (t _BehaviorStatusTypeSupport) New() humble.Message {
	return NewBehaviorStatus()
}

func (t _BehaviorStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__BehaviorStatus
	return (unsafe.Pointer)(C.as2_msgs__msg__BehaviorStatus__create())
}

func (t _BehaviorStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__BehaviorStatus__destroy((*C.as2_msgs__msg__BehaviorStatus)(pointer_to_free))
}

func (t _BehaviorStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*BehaviorStatus)
	mem := (*C.as2_msgs__msg__BehaviorStatus)(dst)
	mem.status = C.uint8_t(m.Status)
}

func (t _BehaviorStatusTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*BehaviorStatus)
	mem := (*C.as2_msgs__msg__BehaviorStatus)(ros2_message_buffer)
	m.Status = uint8(mem.status)
}

func (t _BehaviorStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__BehaviorStatus())
}

type CBehaviorStatus = C.as2_msgs__msg__BehaviorStatus
type CBehaviorStatusSequence = C.as2_msgs__msg__BehaviorStatus__Sequence

func BehaviorStatusSequenceToGo(goSlice *[]BehaviorStatus, cSlice CBehaviorStatusSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]BehaviorStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		BehaviorStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func BehaviorStatusSequenceToC(cSlice *CBehaviorStatusSequence, goSlice []BehaviorStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__BehaviorStatus)(C.malloc(C.sizeof_struct_as2_msgs__msg__BehaviorStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		BehaviorStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func BehaviorStatusArrayToGo(goSlice []BehaviorStatus, cSlice []CBehaviorStatus) {
	for i := 0; i < len(cSlice); i++ {
		BehaviorStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func BehaviorStatusArrayToC(cSlice []CBehaviorStatus, goSlice []BehaviorStatus) {
	for i := 0; i < len(goSlice); i++ {
		BehaviorStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

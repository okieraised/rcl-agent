// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/thrust.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/Thrust", ThrustTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/Thrust", ThrustTypeSupport)
}

type Thrust struct {
	Header           std_msgs_msg.Header `yaml:"header"`            // Message header
	Thrust           float32             `yaml:"thrust"`            // Thrust (N)
	ThrustNormalized float32             `yaml:"thrust_normalized"` // Thrust normalized [0,1]
}

// NewThrust creates a new Thrust with default values.
func NewThrust() *Thrust {
	self := Thrust{}
	self.SetDefaults()
	return &self
}

func (t *Thrust) Clone() *Thrust {
	c := &Thrust{}
	c.Header = *t.Header.Clone()
	c.Thrust = t.Thrust
	c.ThrustNormalized = t.ThrustNormalized
	return c
}

func (t *Thrust) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Thrust) SetDefaults() {
	t.Header.SetDefaults()
	t.Thrust = 0
	t.ThrustNormalized = 0
}

func (t *Thrust) GetTypeSupport() humble.MessageTypeSupport {
	return ThrustTypeSupport
}

// ThrustPublisher wraps humble.Publisher to provide type safe helper
// functions
type ThrustPublisher struct {
	*humble.Publisher
}

// NewThrustPublisher creates and returns a new publisher for the
// Thrust
func NewThrustPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ThrustPublisher, error) {
	pub, err := node.NewPublisher(topicName, ThrustTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ThrustPublisher{pub}, nil
}

func (p *ThrustPublisher) Publish(msg *Thrust) error {
	return p.Publisher.Publish(msg)
}

// ThrustSubscription wraps humble.Subscription to provide type safe helper
// functions
type ThrustSubscription struct {
	*humble.Subscription
}

// ThrustSubscriptionCallback type is used to provide a subscription
// handler function for a ThrustSubscription.
type ThrustSubscriptionCallback func(msg *Thrust, info *humble.MessageInfo, err error)

// NewThrustSubscription creates and returns a new subscription for the
// Thrust
func NewThrustSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ThrustSubscriptionCallback) (*ThrustSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Thrust
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ThrustTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ThrustSubscription{sub}, nil
}

func (s *ThrustSubscription) TakeMessage(out *Thrust) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneThrustSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneThrustSlice(dst, src []Thrust) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ThrustTypeSupport humble.MessageTypeSupport = _ThrustTypeSupport{}

type _ThrustTypeSupport struct{}

func (t _ThrustTypeSupport) New() humble.Message {
	return NewThrust()
}

func (t _ThrustTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__Thrust
	return (unsafe.Pointer)(C.as2_msgs__msg__Thrust__create())
}

func (t _ThrustTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__Thrust__destroy((*C.as2_msgs__msg__Thrust)(pointer_to_free))
}

func (t _ThrustTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Thrust)
	mem := (*C.as2_msgs__msg__Thrust)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.thrust = C.float(m.Thrust)
	mem.thrust_normalized = C.float(m.ThrustNormalized)
}

func (t _ThrustTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Thrust)
	mem := (*C.as2_msgs__msg__Thrust)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Thrust = float32(mem.thrust)
	m.ThrustNormalized = float32(mem.thrust_normalized)
}

func (t _ThrustTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__Thrust())
}

type CThrust = C.as2_msgs__msg__Thrust
type CThrustSequence = C.as2_msgs__msg__Thrust__Sequence

func ThrustSequenceToGo(goSlice *[]Thrust, cSlice CThrustSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Thrust, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ThrustTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ThrustSequenceToC(cSlice *CThrustSequence, goSlice []Thrust) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__Thrust)(C.malloc(C.sizeof_struct_as2_msgs__msg__Thrust * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ThrustTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ThrustArrayToGo(goSlice []Thrust, cSlice []CThrust) {
	for i := 0; i < len(cSlice); i++ {
		ThrustTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ThrustArrayToC(cSlice []CThrust, goSlice []Thrust) {
	for i := 0; i < len(goSlice); i++ {
		ThrustTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

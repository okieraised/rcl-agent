// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/alert_event.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/AlertEvent", AlertEventTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/AlertEvent", AlertEventTypeSupport)
}

const (
	AlertEvent_KILL_SWITCH     int8 = -1 // if value is < 0 then this alert will be handled by the platform directly
	AlertEvent_EMERGENCY_HOVER int8 = -2
	AlertEvent_EMERGENCY_LAND  int8 = -3
	AlertEvent_INFO_ALERT      int8 = 0 // 0 value is used for ping or info alerts
	AlertEvent_FORCE_HOVER     int8 = 1 // if value is > 0 then this alert will be handled by the AS2 framework
	AlertEvent_FORCE_LAND      int8 = 2
)

type AlertEvent struct {
	Alert       int8   `yaml:"alert"`
	Description string `yaml:"description"` // Further description of the alert, for debugging purposes mainly
}

// NewAlertEvent creates a new AlertEvent with default values.
func NewAlertEvent() *AlertEvent {
	self := AlertEvent{}
	self.SetDefaults()
	return &self
}

func (t *AlertEvent) Clone() *AlertEvent {
	c := &AlertEvent{}
	c.Alert = t.Alert
	c.Description = t.Description
	return c
}

func (t *AlertEvent) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *AlertEvent) SetDefaults() {
	t.Alert = 0
	t.Description = ""
}

func (t *AlertEvent) GetTypeSupport() humble.MessageTypeSupport {
	return AlertEventTypeSupport
}

// AlertEventPublisher wraps humble.Publisher to provide type safe helper
// functions
type AlertEventPublisher struct {
	*humble.Publisher
}

// NewAlertEventPublisher creates and returns a new publisher for the
// AlertEvent
func NewAlertEventPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*AlertEventPublisher, error) {
	pub, err := node.NewPublisher(topicName, AlertEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AlertEventPublisher{pub}, nil
}

func (p *AlertEventPublisher) Publish(msg *AlertEvent) error {
	return p.Publisher.Publish(msg)
}

// AlertEventSubscription wraps humble.Subscription to provide type safe helper
// functions
type AlertEventSubscription struct {
	*humble.Subscription
}

// AlertEventSubscriptionCallback type is used to provide a subscription
// handler function for a AlertEventSubscription.
type AlertEventSubscriptionCallback func(msg *AlertEvent, info *humble.MessageInfo, err error)

// NewAlertEventSubscription creates and returns a new subscription for the
// AlertEvent
func NewAlertEventSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback AlertEventSubscriptionCallback) (*AlertEventSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg AlertEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, AlertEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AlertEventSubscription{sub}, nil
}

func (s *AlertEventSubscription) TakeMessage(out *AlertEvent) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAlertEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAlertEventSlice(dst, src []AlertEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AlertEventTypeSupport humble.MessageTypeSupport = _AlertEventTypeSupport{}

type _AlertEventTypeSupport struct{}

func (t _AlertEventTypeSupport) New() humble.Message {
	return NewAlertEvent()
}

func (t _AlertEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__AlertEvent
	return (unsafe.Pointer)(C.as2_msgs__msg__AlertEvent__create())
}

func (t _AlertEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__AlertEvent__destroy((*C.as2_msgs__msg__AlertEvent)(pointer_to_free))
}

func (t _AlertEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*AlertEvent)
	mem := (*C.as2_msgs__msg__AlertEvent)(dst)
	mem.alert = C.int8_t(m.Alert)
	humble.StringAsCStruct(unsafe.Pointer(&mem.description), m.Description)
}

func (t _AlertEventTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AlertEvent)
	mem := (*C.as2_msgs__msg__AlertEvent)(ros2_message_buffer)
	m.Alert = int8(mem.alert)
	humble.StringAsGoStruct(&m.Description, unsafe.Pointer(&mem.description))
}

func (t _AlertEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__AlertEvent())
}

type CAlertEvent = C.as2_msgs__msg__AlertEvent
type CAlertEventSequence = C.as2_msgs__msg__AlertEvent__Sequence

func AlertEventSequenceToGo(goSlice *[]AlertEvent, cSlice CAlertEventSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AlertEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AlertEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func AlertEventSequenceToC(cSlice *CAlertEventSequence, goSlice []AlertEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__AlertEvent)(C.malloc(C.sizeof_struct_as2_msgs__msg__AlertEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AlertEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func AlertEventArrayToGo(goSlice []AlertEvent, cSlice []CAlertEvent) {
	for i := 0; i < len(cSlice); i++ {
		AlertEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func AlertEventArrayToC(cSlice []CAlertEvent, goSlice []AlertEvent) {
	for i := 0; i < len(goSlice); i++ {
		AlertEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

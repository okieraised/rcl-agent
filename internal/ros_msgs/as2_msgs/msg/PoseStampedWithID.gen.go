// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/pose_stamped_with_id.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PoseStampedWithID", PoseStampedWithIDTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/PoseStampedWithID", PoseStampedWithIDTypeSupport)
}

type PoseStampedWithID struct {
	Id   string                        `yaml:"id"`   // Identification string
	Pose geometry_msgs_msg.PoseStamped `yaml:"pose"` // Pose
}

// NewPoseStampedWithID creates a new PoseStampedWithID with default values.
func NewPoseStampedWithID() *PoseStampedWithID {
	self := PoseStampedWithID{}
	self.SetDefaults()
	return &self
}

func (t *PoseStampedWithID) Clone() *PoseStampedWithID {
	c := &PoseStampedWithID{}
	c.Id = t.Id
	c.Pose = *t.Pose.Clone()
	return c
}

func (t *PoseStampedWithID) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PoseStampedWithID) SetDefaults() {
	t.Id = ""
	t.Pose.SetDefaults()
}

func (t *PoseStampedWithID) GetTypeSupport() humble.MessageTypeSupport {
	return PoseStampedWithIDTypeSupport
}

// PoseStampedWithIDPublisher wraps humble.Publisher to provide type safe helper
// functions
type PoseStampedWithIDPublisher struct {
	*humble.Publisher
}

// NewPoseStampedWithIDPublisher creates and returns a new publisher for the
// PoseStampedWithID
func NewPoseStampedWithIDPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PoseStampedWithIDPublisher, error) {
	pub, err := node.NewPublisher(topicName, PoseStampedWithIDTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PoseStampedWithIDPublisher{pub}, nil
}

func (p *PoseStampedWithIDPublisher) Publish(msg *PoseStampedWithID) error {
	return p.Publisher.Publish(msg)
}

// PoseStampedWithIDSubscription wraps humble.Subscription to provide type safe helper
// functions
type PoseStampedWithIDSubscription struct {
	*humble.Subscription
}

// PoseStampedWithIDSubscriptionCallback type is used to provide a subscription
// handler function for a PoseStampedWithIDSubscription.
type PoseStampedWithIDSubscriptionCallback func(msg *PoseStampedWithID, info *humble.MessageInfo, err error)

// NewPoseStampedWithIDSubscription creates and returns a new subscription for the
// PoseStampedWithID
func NewPoseStampedWithIDSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PoseStampedWithIDSubscriptionCallback) (*PoseStampedWithIDSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PoseStampedWithID
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PoseStampedWithIDTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PoseStampedWithIDSubscription{sub}, nil
}

func (s *PoseStampedWithIDSubscription) TakeMessage(out *PoseStampedWithID) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePoseStampedWithIDSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePoseStampedWithIDSlice(dst, src []PoseStampedWithID) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PoseStampedWithIDTypeSupport humble.MessageTypeSupport = _PoseStampedWithIDTypeSupport{}

type _PoseStampedWithIDTypeSupport struct{}

func (t _PoseStampedWithIDTypeSupport) New() humble.Message {
	return NewPoseStampedWithID()
}

func (t _PoseStampedWithIDTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__PoseStampedWithID
	return (unsafe.Pointer)(C.as2_msgs__msg__PoseStampedWithID__create())
}

func (t _PoseStampedWithIDTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__PoseStampedWithID__destroy((*C.as2_msgs__msg__PoseStampedWithID)(pointer_to_free))
}

func (t _PoseStampedWithIDTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PoseStampedWithID)
	mem := (*C.as2_msgs__msg__PoseStampedWithID)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.id), m.Id)
	geometry_msgs_msg.PoseStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
}

func (t _PoseStampedWithIDTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PoseStampedWithID)
	mem := (*C.as2_msgs__msg__PoseStampedWithID)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
	geometry_msgs_msg.PoseStampedTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
}

func (t _PoseStampedWithIDTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__PoseStampedWithID())
}

type CPoseStampedWithID = C.as2_msgs__msg__PoseStampedWithID
type CPoseStampedWithIDSequence = C.as2_msgs__msg__PoseStampedWithID__Sequence

func PoseStampedWithIDSequenceToGo(goSlice *[]PoseStampedWithID, cSlice CPoseStampedWithIDSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PoseStampedWithID, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PoseStampedWithIDTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PoseStampedWithIDSequenceToC(cSlice *CPoseStampedWithIDSequence, goSlice []PoseStampedWithID) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__PoseStampedWithID)(C.malloc(C.sizeof_struct_as2_msgs__msg__PoseStampedWithID * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PoseStampedWithIDTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PoseStampedWithIDArrayToGo(goSlice []PoseStampedWithID, cSlice []CPoseStampedWithID) {
	for i := 0; i < len(cSlice); i++ {
		PoseStampedWithIDTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PoseStampedWithIDArrayToC(cSlice []CPoseStampedWithID, goSlice []PoseStampedWithID) {
	for i := 0; i < len(goSlice); i++ {
		PoseStampedWithIDTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

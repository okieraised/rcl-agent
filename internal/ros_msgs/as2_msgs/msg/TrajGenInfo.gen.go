// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/traj_gen_info.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/TrajGenInfo", TrajGenInfoTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/TrajGenInfo", TrajGenInfoTypeSupport)
}

const (
	TrajGenInfo_WAITING    uint8 = 0
	TrajGenInfo_EVALUATING uint8 = 1
	TrajGenInfo_STOPPED    uint8 = 2
)

type TrajGenInfo struct {
	Header       std_msgs_msg.Header `yaml:"header"`        // Message header
	NodeStatus   NodeStatus          `yaml:"node_status"`   // Node status
	ActiveStatus uint8               `yaml:"active_status"` // Active status
}

// NewTrajGenInfo creates a new TrajGenInfo with default values.
func NewTrajGenInfo() *TrajGenInfo {
	self := TrajGenInfo{}
	self.SetDefaults()
	return &self
}

func (t *TrajGenInfo) Clone() *TrajGenInfo {
	c := &TrajGenInfo{}
	c.Header = *t.Header.Clone()
	c.NodeStatus = *t.NodeStatus.Clone()
	c.ActiveStatus = t.ActiveStatus
	return c
}

func (t *TrajGenInfo) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TrajGenInfo) SetDefaults() {
	t.Header.SetDefaults()
	t.NodeStatus.SetDefaults()
	t.ActiveStatus = 0
}

func (t *TrajGenInfo) GetTypeSupport() humble.MessageTypeSupport {
	return TrajGenInfoTypeSupport
}

// TrajGenInfoPublisher wraps humble.Publisher to provide type safe helper
// functions
type TrajGenInfoPublisher struct {
	*humble.Publisher
}

// NewTrajGenInfoPublisher creates and returns a new publisher for the
// TrajGenInfo
func NewTrajGenInfoPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TrajGenInfoPublisher, error) {
	pub, err := node.NewPublisher(topicName, TrajGenInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TrajGenInfoPublisher{pub}, nil
}

func (p *TrajGenInfoPublisher) Publish(msg *TrajGenInfo) error {
	return p.Publisher.Publish(msg)
}

// TrajGenInfoSubscription wraps humble.Subscription to provide type safe helper
// functions
type TrajGenInfoSubscription struct {
	*humble.Subscription
}

// TrajGenInfoSubscriptionCallback type is used to provide a subscription
// handler function for a TrajGenInfoSubscription.
type TrajGenInfoSubscriptionCallback func(msg *TrajGenInfo, info *humble.MessageInfo, err error)

// NewTrajGenInfoSubscription creates and returns a new subscription for the
// TrajGenInfo
func NewTrajGenInfoSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TrajGenInfoSubscriptionCallback) (*TrajGenInfoSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TrajGenInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TrajGenInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TrajGenInfoSubscription{sub}, nil
}

func (s *TrajGenInfoSubscription) TakeMessage(out *TrajGenInfo) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrajGenInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajGenInfoSlice(dst, src []TrajGenInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajGenInfoTypeSupport humble.MessageTypeSupport = _TrajGenInfoTypeSupport{}

type _TrajGenInfoTypeSupport struct{}

func (t _TrajGenInfoTypeSupport) New() humble.Message {
	return NewTrajGenInfo()
}

func (t _TrajGenInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__TrajGenInfo
	return (unsafe.Pointer)(C.as2_msgs__msg__TrajGenInfo__create())
}

func (t _TrajGenInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__TrajGenInfo__destroy((*C.as2_msgs__msg__TrajGenInfo)(pointer_to_free))
}

func (t _TrajGenInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TrajGenInfo)
	mem := (*C.as2_msgs__msg__TrajGenInfo)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	NodeStatusTypeSupport.AsCStruct(unsafe.Pointer(&mem.node_status), &m.NodeStatus)
	mem.active_status = C.uint8_t(m.ActiveStatus)
}

func (t _TrajGenInfoTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TrajGenInfo)
	mem := (*C.as2_msgs__msg__TrajGenInfo)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	NodeStatusTypeSupport.AsGoStruct(&m.NodeStatus, unsafe.Pointer(&mem.node_status))
	m.ActiveStatus = uint8(mem.active_status)
}

func (t _TrajGenInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__TrajGenInfo())
}

type CTrajGenInfo = C.as2_msgs__msg__TrajGenInfo
type CTrajGenInfoSequence = C.as2_msgs__msg__TrajGenInfo__Sequence

func TrajGenInfoSequenceToGo(goSlice *[]TrajGenInfo, cSlice CTrajGenInfoSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrajGenInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TrajGenInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TrajGenInfoSequenceToC(cSlice *CTrajGenInfoSequence, goSlice []TrajGenInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__TrajGenInfo)(C.malloc(C.sizeof_struct_as2_msgs__msg__TrajGenInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TrajGenInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TrajGenInfoArrayToGo(goSlice []TrajGenInfo, cSlice []CTrajGenInfo) {
	for i := 0; i < len(cSlice); i++ {
		TrajGenInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TrajGenInfoArrayToC(cSlice []CTrajGenInfo, goSlice []TrajGenInfo) {
	for i := 0; i < len(goSlice); i++ {
		TrajGenInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

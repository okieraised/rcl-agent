// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/mission_update.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/MissionUpdate", MissionUpdateTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/MissionUpdate", MissionUpdateTypeSupport)
}

const (
	MissionUpdate_EXECUTE   uint8 = 0  // Execute a mission in the interpreter
	MissionUpdate_LOAD      uint8 = 1  // Load a mission to the interpreter
	MissionUpdate_START     uint8 = 2  // Start the execution of a mission
	MissionUpdate_PAUSE     uint8 = 3  // Pause the execution of a mission
	MissionUpdate_RESUME    uint8 = 4  // Resume the execution of a mission
	MissionUpdate_STOP      uint8 = 5  // Stop the execution of a mission
	MissionUpdate_NEXT_ITEM uint8 = 6  // Execute the next item in the mission
	MissionUpdate_REPEAT    uint8 = 7  // Repeat the execution of a mission
	MissionUpdate_INSERT    uint8 = 8  // Insert an item in the mission
	MissionUpdate_MODIFY    uint8 = 9  // Modify an item in the mission
	MissionUpdate_REMOVE    uint8 = 10 // Remove an item in the mission
	MissionUpdate_RESET     uint8 = 11 // Reset the interpreter
)

type MissionUpdate struct {
	DroneId   string `yaml:"drone_id"`   // ID of the drone that will execute the mission
	MissionId int32  `yaml:"mission_id"` // ID of the mission to be executed
	ItemId    int32  `yaml:"item_id"`    // ID of the item to be executed
	Action    uint8  `yaml:"action"`     // Action to be performed in the interpreter
	Mission   string `yaml:"mission"`    // JSON formatted mission to be executed
}

// NewMissionUpdate creates a new MissionUpdate with default values.
func NewMissionUpdate() *MissionUpdate {
	self := MissionUpdate{}
	self.SetDefaults()
	return &self
}

func (t *MissionUpdate) Clone() *MissionUpdate {
	c := &MissionUpdate{}
	c.DroneId = t.DroneId
	c.MissionId = t.MissionId
	c.ItemId = t.ItemId
	c.Action = t.Action
	c.Mission = t.Mission
	return c
}

func (t *MissionUpdate) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MissionUpdate) SetDefaults() {
	t.DroneId = ""
	t.MissionId = 0
	t.ItemId = 0
	t.Action = 0
	t.Mission = ""
}

func (t *MissionUpdate) GetTypeSupport() humble.MessageTypeSupport {
	return MissionUpdateTypeSupport
}

// MissionUpdatePublisher wraps humble.Publisher to provide type safe helper
// functions
type MissionUpdatePublisher struct {
	*humble.Publisher
}

// NewMissionUpdatePublisher creates and returns a new publisher for the
// MissionUpdate
func NewMissionUpdatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MissionUpdatePublisher, error) {
	pub, err := node.NewPublisher(topicName, MissionUpdateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MissionUpdatePublisher{pub}, nil
}

func (p *MissionUpdatePublisher) Publish(msg *MissionUpdate) error {
	return p.Publisher.Publish(msg)
}

// MissionUpdateSubscription wraps humble.Subscription to provide type safe helper
// functions
type MissionUpdateSubscription struct {
	*humble.Subscription
}

// MissionUpdateSubscriptionCallback type is used to provide a subscription
// handler function for a MissionUpdateSubscription.
type MissionUpdateSubscriptionCallback func(msg *MissionUpdate, info *humble.MessageInfo, err error)

// NewMissionUpdateSubscription creates and returns a new subscription for the
// MissionUpdate
func NewMissionUpdateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MissionUpdateSubscriptionCallback) (*MissionUpdateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MissionUpdate
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MissionUpdateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MissionUpdateSubscription{sub}, nil
}

func (s *MissionUpdateSubscription) TakeMessage(out *MissionUpdate) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMissionUpdateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMissionUpdateSlice(dst, src []MissionUpdate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MissionUpdateTypeSupport humble.MessageTypeSupport = _MissionUpdateTypeSupport{}

type _MissionUpdateTypeSupport struct{}

func (t _MissionUpdateTypeSupport) New() humble.Message {
	return NewMissionUpdate()
}

func (t _MissionUpdateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__MissionUpdate
	return (unsafe.Pointer)(C.as2_msgs__msg__MissionUpdate__create())
}

func (t _MissionUpdateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__MissionUpdate__destroy((*C.as2_msgs__msg__MissionUpdate)(pointer_to_free))
}

func (t _MissionUpdateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MissionUpdate)
	mem := (*C.as2_msgs__msg__MissionUpdate)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.drone_id), m.DroneId)
	mem.mission_id = C.int32_t(m.MissionId)
	mem.item_id = C.int32_t(m.ItemId)
	mem.action = C.uint8_t(m.Action)
	humble.StringAsCStruct(unsafe.Pointer(&mem.mission), m.Mission)
}

func (t _MissionUpdateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MissionUpdate)
	mem := (*C.as2_msgs__msg__MissionUpdate)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.DroneId, unsafe.Pointer(&mem.drone_id))
	m.MissionId = int32(mem.mission_id)
	m.ItemId = int32(mem.item_id)
	m.Action = uint8(mem.action)
	humble.StringAsGoStruct(&m.Mission, unsafe.Pointer(&mem.mission))
}

func (t _MissionUpdateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__MissionUpdate())
}

type CMissionUpdate = C.as2_msgs__msg__MissionUpdate
type CMissionUpdateSequence = C.as2_msgs__msg__MissionUpdate__Sequence

func MissionUpdateSequenceToGo(goSlice *[]MissionUpdate, cSlice CMissionUpdateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MissionUpdate, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MissionUpdateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MissionUpdateSequenceToC(cSlice *CMissionUpdateSequence, goSlice []MissionUpdate) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__MissionUpdate)(C.malloc(C.sizeof_struct_as2_msgs__msg__MissionUpdate * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MissionUpdateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MissionUpdateArrayToGo(goSlice []MissionUpdate, cSlice []CMissionUpdate) {
	for i := 0; i < len(cSlice); i++ {
		MissionUpdateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MissionUpdateArrayToC(cSlice []CMissionUpdate, goSlice []MissionUpdate) {
	for i := 0; i < len(goSlice); i++ {
		MissionUpdateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

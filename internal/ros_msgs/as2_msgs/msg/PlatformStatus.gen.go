// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/platform_status.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PlatformStatus", PlatformStatusTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/PlatformStatus", PlatformStatusTypeSupport)
}

const (
	PlatformStatus_EMERGENCY  int8 = -1
	PlatformStatus_DISARMED   int8 = 0
	PlatformStatus_LANDED     int8 = 1
	PlatformStatus_TAKING_OFF int8 = 2
	PlatformStatus_FLYING     int8 = 3
	PlatformStatus_LANDING    int8 = 4
)

type PlatformStatus struct {
	State int8 `yaml:"state"` // platform status
}

// NewPlatformStatus creates a new PlatformStatus with default values.
func NewPlatformStatus() *PlatformStatus {
	self := PlatformStatus{}
	self.SetDefaults()
	return &self
}

func (t *PlatformStatus) Clone() *PlatformStatus {
	c := &PlatformStatus{}
	c.State = t.State
	return c
}

func (t *PlatformStatus) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PlatformStatus) SetDefaults() {
	t.State = 0
}

func (t *PlatformStatus) GetTypeSupport() humble.MessageTypeSupport {
	return PlatformStatusTypeSupport
}

// PlatformStatusPublisher wraps humble.Publisher to provide type safe helper
// functions
type PlatformStatusPublisher struct {
	*humble.Publisher
}

// NewPlatformStatusPublisher creates and returns a new publisher for the
// PlatformStatus
func NewPlatformStatusPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PlatformStatusPublisher, error) {
	pub, err := node.NewPublisher(topicName, PlatformStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PlatformStatusPublisher{pub}, nil
}

func (p *PlatformStatusPublisher) Publish(msg *PlatformStatus) error {
	return p.Publisher.Publish(msg)
}

// PlatformStatusSubscription wraps humble.Subscription to provide type safe helper
// functions
type PlatformStatusSubscription struct {
	*humble.Subscription
}

// PlatformStatusSubscriptionCallback type is used to provide a subscription
// handler function for a PlatformStatusSubscription.
type PlatformStatusSubscriptionCallback func(msg *PlatformStatus, info *humble.MessageInfo, err error)

// NewPlatformStatusSubscription creates and returns a new subscription for the
// PlatformStatus
func NewPlatformStatusSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PlatformStatusSubscriptionCallback) (*PlatformStatusSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PlatformStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PlatformStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PlatformStatusSubscription{sub}, nil
}

func (s *PlatformStatusSubscription) TakeMessage(out *PlatformStatus) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePlatformStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePlatformStatusSlice(dst, src []PlatformStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PlatformStatusTypeSupport humble.MessageTypeSupport = _PlatformStatusTypeSupport{}

type _PlatformStatusTypeSupport struct{}

func (t _PlatformStatusTypeSupport) New() humble.Message {
	return NewPlatformStatus()
}

func (t _PlatformStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__PlatformStatus
	return (unsafe.Pointer)(C.as2_msgs__msg__PlatformStatus__create())
}

func (t _PlatformStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__PlatformStatus__destroy((*C.as2_msgs__msg__PlatformStatus)(pointer_to_free))
}

func (t _PlatformStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PlatformStatus)
	mem := (*C.as2_msgs__msg__PlatformStatus)(dst)
	mem.state = C.int8_t(m.State)
}

func (t _PlatformStatusTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PlatformStatus)
	mem := (*C.as2_msgs__msg__PlatformStatus)(ros2_message_buffer)
	m.State = int8(mem.state)
}

func (t _PlatformStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__PlatformStatus())
}

type CPlatformStatus = C.as2_msgs__msg__PlatformStatus
type CPlatformStatusSequence = C.as2_msgs__msg__PlatformStatus__Sequence

func PlatformStatusSequenceToGo(goSlice *[]PlatformStatus, cSlice CPlatformStatusSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PlatformStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PlatformStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PlatformStatusSequenceToC(cSlice *CPlatformStatusSequence, goSlice []PlatformStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__PlatformStatus)(C.malloc(C.sizeof_struct_as2_msgs__msg__PlatformStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PlatformStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PlatformStatusArrayToGo(goSlice []PlatformStatus, cSlice []CPlatformStatus) {
	for i := 0; i < len(cSlice); i++ {
		PlatformStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PlatformStatusArrayToC(cSlice []CPlatformStatus, goSlice []PlatformStatus) {
	for i := 0; i < len(goSlice); i++ {
		PlatformStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/pose_with_id.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PoseWithID", PoseWithIDTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/PoseWithID", PoseWithIDTypeSupport)
}

type PoseWithID struct {
	Id   string                 `yaml:"id"`   // Identification string
	Pose geometry_msgs_msg.Pose `yaml:"pose"` // Pose
}

// NewPoseWithID creates a new PoseWithID with default values.
func NewPoseWithID() *PoseWithID {
	self := PoseWithID{}
	self.SetDefaults()
	return &self
}

func (t *PoseWithID) Clone() *PoseWithID {
	c := &PoseWithID{}
	c.Id = t.Id
	c.Pose = *t.Pose.Clone()
	return c
}

func (t *PoseWithID) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PoseWithID) SetDefaults() {
	t.Id = ""
	t.Pose.SetDefaults()
}

func (t *PoseWithID) GetTypeSupport() humble.MessageTypeSupport {
	return PoseWithIDTypeSupport
}

// PoseWithIDPublisher wraps humble.Publisher to provide type safe helper
// functions
type PoseWithIDPublisher struct {
	*humble.Publisher
}

// NewPoseWithIDPublisher creates and returns a new publisher for the
// PoseWithID
func NewPoseWithIDPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PoseWithIDPublisher, error) {
	pub, err := node.NewPublisher(topicName, PoseWithIDTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PoseWithIDPublisher{pub}, nil
}

func (p *PoseWithIDPublisher) Publish(msg *PoseWithID) error {
	return p.Publisher.Publish(msg)
}

// PoseWithIDSubscription wraps humble.Subscription to provide type safe helper
// functions
type PoseWithIDSubscription struct {
	*humble.Subscription
}

// PoseWithIDSubscriptionCallback type is used to provide a subscription
// handler function for a PoseWithIDSubscription.
type PoseWithIDSubscriptionCallback func(msg *PoseWithID, info *humble.MessageInfo, err error)

// NewPoseWithIDSubscription creates and returns a new subscription for the
// PoseWithID
func NewPoseWithIDSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PoseWithIDSubscriptionCallback) (*PoseWithIDSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PoseWithID
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PoseWithIDTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PoseWithIDSubscription{sub}, nil
}

func (s *PoseWithIDSubscription) TakeMessage(out *PoseWithID) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePoseWithIDSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePoseWithIDSlice(dst, src []PoseWithID) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PoseWithIDTypeSupport humble.MessageTypeSupport = _PoseWithIDTypeSupport{}

type _PoseWithIDTypeSupport struct{}

func (t _PoseWithIDTypeSupport) New() humble.Message {
	return NewPoseWithID()
}

func (t _PoseWithIDTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__PoseWithID
	return (unsafe.Pointer)(C.as2_msgs__msg__PoseWithID__create())
}

func (t _PoseWithIDTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__PoseWithID__destroy((*C.as2_msgs__msg__PoseWithID)(pointer_to_free))
}

func (t _PoseWithIDTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PoseWithID)
	mem := (*C.as2_msgs__msg__PoseWithID)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.id), m.Id)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
}

func (t _PoseWithIDTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PoseWithID)
	mem := (*C.as2_msgs__msg__PoseWithID)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
}

func (t _PoseWithIDTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__PoseWithID())
}

type CPoseWithID = C.as2_msgs__msg__PoseWithID
type CPoseWithIDSequence = C.as2_msgs__msg__PoseWithID__Sequence

func PoseWithIDSequenceToGo(goSlice *[]PoseWithID, cSlice CPoseWithIDSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PoseWithID, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PoseWithIDTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PoseWithIDSequenceToC(cSlice *CPoseWithIDSequence, goSlice []PoseWithID) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__PoseWithID)(C.malloc(C.sizeof_struct_as2_msgs__msg__PoseWithID * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PoseWithIDTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PoseWithIDArrayToGo(goSlice []PoseWithID, cSlice []CPoseWithID) {
	for i := 0; i < len(cSlice); i++ {
		PoseWithIDTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PoseWithIDArrayToC(cSlice []CPoseWithID, goSlice []PoseWithID) {
	for i := 0; i < len(goSlice); i++ {
		PoseWithIDTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

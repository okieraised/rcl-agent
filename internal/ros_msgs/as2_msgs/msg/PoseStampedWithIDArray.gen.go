// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/pose_stamped_with_id_array.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PoseStampedWithIDArray", PoseStampedWithIDArrayTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/PoseStampedWithIDArray", PoseStampedWithIDArrayTypeSupport)
}

type PoseStampedWithIDArray struct {
	Poses []PoseStampedWithID `yaml:"poses"`
}

// NewPoseStampedWithIDArray creates a new PoseStampedWithIDArray with default values.
func NewPoseStampedWithIDArray() *PoseStampedWithIDArray {
	self := PoseStampedWithIDArray{}
	self.SetDefaults()
	return &self
}

func (t *PoseStampedWithIDArray) Clone() *PoseStampedWithIDArray {
	c := &PoseStampedWithIDArray{}
	if t.Poses != nil {
		c.Poses = make([]PoseStampedWithID, len(t.Poses))
		ClonePoseStampedWithIDSlice(c.Poses, t.Poses)
	}
	return c
}

func (t *PoseStampedWithIDArray) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PoseStampedWithIDArray) SetDefaults() {
	t.Poses = nil
}

func (t *PoseStampedWithIDArray) GetTypeSupport() humble.MessageTypeSupport {
	return PoseStampedWithIDArrayTypeSupport
}

// PoseStampedWithIDArrayPublisher wraps humble.Publisher to provide type safe helper
// functions
type PoseStampedWithIDArrayPublisher struct {
	*humble.Publisher
}

// NewPoseStampedWithIDArrayPublisher creates and returns a new publisher for the
// PoseStampedWithIDArray
func NewPoseStampedWithIDArrayPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PoseStampedWithIDArrayPublisher, error) {
	pub, err := node.NewPublisher(topicName, PoseStampedWithIDArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PoseStampedWithIDArrayPublisher{pub}, nil
}

func (p *PoseStampedWithIDArrayPublisher) Publish(msg *PoseStampedWithIDArray) error {
	return p.Publisher.Publish(msg)
}

// PoseStampedWithIDArraySubscription wraps humble.Subscription to provide type safe helper
// functions
type PoseStampedWithIDArraySubscription struct {
	*humble.Subscription
}

// PoseStampedWithIDArraySubscriptionCallback type is used to provide a subscription
// handler function for a PoseStampedWithIDArraySubscription.
type PoseStampedWithIDArraySubscriptionCallback func(msg *PoseStampedWithIDArray, info *humble.MessageInfo, err error)

// NewPoseStampedWithIDArraySubscription creates and returns a new subscription for the
// PoseStampedWithIDArray
func NewPoseStampedWithIDArraySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PoseStampedWithIDArraySubscriptionCallback) (*PoseStampedWithIDArraySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PoseStampedWithIDArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PoseStampedWithIDArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PoseStampedWithIDArraySubscription{sub}, nil
}

func (s *PoseStampedWithIDArraySubscription) TakeMessage(out *PoseStampedWithIDArray) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePoseStampedWithIDArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePoseStampedWithIDArraySlice(dst, src []PoseStampedWithIDArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PoseStampedWithIDArrayTypeSupport humble.MessageTypeSupport = _PoseStampedWithIDArrayTypeSupport{}

type _PoseStampedWithIDArrayTypeSupport struct{}

func (t _PoseStampedWithIDArrayTypeSupport) New() humble.Message {
	return NewPoseStampedWithIDArray()
}

func (t _PoseStampedWithIDArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__PoseStampedWithIDArray
	return (unsafe.Pointer)(C.as2_msgs__msg__PoseStampedWithIDArray__create())
}

func (t _PoseStampedWithIDArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__PoseStampedWithIDArray__destroy((*C.as2_msgs__msg__PoseStampedWithIDArray)(pointer_to_free))
}

func (t _PoseStampedWithIDArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PoseStampedWithIDArray)
	mem := (*C.as2_msgs__msg__PoseStampedWithIDArray)(dst)
	PoseStampedWithIDSequenceToC(&mem.poses, m.Poses)
}

func (t _PoseStampedWithIDArrayTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PoseStampedWithIDArray)
	mem := (*C.as2_msgs__msg__PoseStampedWithIDArray)(ros2_message_buffer)
	PoseStampedWithIDSequenceToGo(&m.Poses, mem.poses)
}

func (t _PoseStampedWithIDArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__PoseStampedWithIDArray())
}

type CPoseStampedWithIDArray = C.as2_msgs__msg__PoseStampedWithIDArray
type CPoseStampedWithIDArraySequence = C.as2_msgs__msg__PoseStampedWithIDArray__Sequence

func PoseStampedWithIDArraySequenceToGo(goSlice *[]PoseStampedWithIDArray, cSlice CPoseStampedWithIDArraySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PoseStampedWithIDArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PoseStampedWithIDArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PoseStampedWithIDArraySequenceToC(cSlice *CPoseStampedWithIDArraySequence, goSlice []PoseStampedWithIDArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__PoseStampedWithIDArray)(C.malloc(C.sizeof_struct_as2_msgs__msg__PoseStampedWithIDArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PoseStampedWithIDArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PoseStampedWithIDArrayArrayToGo(goSlice []PoseStampedWithIDArray, cSlice []CPoseStampedWithIDArray) {
	for i := 0; i < len(cSlice); i++ {
		PoseStampedWithIDArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PoseStampedWithIDArrayArrayToC(cSlice []CPoseStampedWithIDArray, goSlice []PoseStampedWithIDArray) {
	for i := 0; i < len(goSlice); i++ {
		PoseStampedWithIDArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

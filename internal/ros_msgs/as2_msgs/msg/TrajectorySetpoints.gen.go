// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/trajectory_setpoints.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/TrajectorySetpoints", TrajectorySetpointsTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/TrajectorySetpoints", TrajectorySetpointsTypeSupport)
}

type TrajectorySetpoints struct {
	Header    std_msgs_msg.Header `yaml:"header"`    // Message header with the frame_id of the point
	Setpoints []TrajectoryPoint   `yaml:"setpoints"` // Array of setpoints of the vehicle in the frame_id frame
}

// NewTrajectorySetpoints creates a new TrajectorySetpoints with default values.
func NewTrajectorySetpoints() *TrajectorySetpoints {
	self := TrajectorySetpoints{}
	self.SetDefaults()
	return &self
}

func (t *TrajectorySetpoints) Clone() *TrajectorySetpoints {
	c := &TrajectorySetpoints{}
	c.Header = *t.Header.Clone()
	if t.Setpoints != nil {
		c.Setpoints = make([]TrajectoryPoint, len(t.Setpoints))
		CloneTrajectoryPointSlice(c.Setpoints, t.Setpoints)
	}
	return c
}

func (t *TrajectorySetpoints) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TrajectorySetpoints) SetDefaults() {
	t.Header.SetDefaults()
	t.Setpoints = nil
}

func (t *TrajectorySetpoints) GetTypeSupport() humble.MessageTypeSupport {
	return TrajectorySetpointsTypeSupport
}

// TrajectorySetpointsPublisher wraps humble.Publisher to provide type safe helper
// functions
type TrajectorySetpointsPublisher struct {
	*humble.Publisher
}

// NewTrajectorySetpointsPublisher creates and returns a new publisher for the
// TrajectorySetpoints
func NewTrajectorySetpointsPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TrajectorySetpointsPublisher, error) {
	pub, err := node.NewPublisher(topicName, TrajectorySetpointsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TrajectorySetpointsPublisher{pub}, nil
}

func (p *TrajectorySetpointsPublisher) Publish(msg *TrajectorySetpoints) error {
	return p.Publisher.Publish(msg)
}

// TrajectorySetpointsSubscription wraps humble.Subscription to provide type safe helper
// functions
type TrajectorySetpointsSubscription struct {
	*humble.Subscription
}

// TrajectorySetpointsSubscriptionCallback type is used to provide a subscription
// handler function for a TrajectorySetpointsSubscription.
type TrajectorySetpointsSubscriptionCallback func(msg *TrajectorySetpoints, info *humble.MessageInfo, err error)

// NewTrajectorySetpointsSubscription creates and returns a new subscription for the
// TrajectorySetpoints
func NewTrajectorySetpointsSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TrajectorySetpointsSubscriptionCallback) (*TrajectorySetpointsSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TrajectorySetpoints
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TrajectorySetpointsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TrajectorySetpointsSubscription{sub}, nil
}

func (s *TrajectorySetpointsSubscription) TakeMessage(out *TrajectorySetpoints) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrajectorySetpointsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajectorySetpointsSlice(dst, src []TrajectorySetpoints) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajectorySetpointsTypeSupport humble.MessageTypeSupport = _TrajectorySetpointsTypeSupport{}

type _TrajectorySetpointsTypeSupport struct{}

func (t _TrajectorySetpointsTypeSupport) New() humble.Message {
	return NewTrajectorySetpoints()
}

func (t _TrajectorySetpointsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__TrajectorySetpoints
	return (unsafe.Pointer)(C.as2_msgs__msg__TrajectorySetpoints__create())
}

func (t _TrajectorySetpointsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__TrajectorySetpoints__destroy((*C.as2_msgs__msg__TrajectorySetpoints)(pointer_to_free))
}

func (t _TrajectorySetpointsTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TrajectorySetpoints)
	mem := (*C.as2_msgs__msg__TrajectorySetpoints)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	TrajectoryPointSequenceToC(&mem.setpoints, m.Setpoints)
}

func (t _TrajectorySetpointsTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TrajectorySetpoints)
	mem := (*C.as2_msgs__msg__TrajectorySetpoints)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	TrajectoryPointSequenceToGo(&m.Setpoints, mem.setpoints)
}

func (t _TrajectorySetpointsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__TrajectorySetpoints())
}

type CTrajectorySetpoints = C.as2_msgs__msg__TrajectorySetpoints
type CTrajectorySetpointsSequence = C.as2_msgs__msg__TrajectorySetpoints__Sequence

func TrajectorySetpointsSequenceToGo(goSlice *[]TrajectorySetpoints, cSlice CTrajectorySetpointsSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrajectorySetpoints, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TrajectorySetpointsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TrajectorySetpointsSequenceToC(cSlice *CTrajectorySetpointsSequence, goSlice []TrajectorySetpoints) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__TrajectorySetpoints)(C.malloc(C.sizeof_struct_as2_msgs__msg__TrajectorySetpoints * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TrajectorySetpointsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TrajectorySetpointsArrayToGo(goSlice []TrajectorySetpoints, cSlice []CTrajectorySetpoints) {
	for i := 0; i < len(cSlice); i++ {
		TrajectorySetpointsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TrajectorySetpointsArrayToC(cSlice []CTrajectorySetpoints, goSlice []TrajectorySetpoints) {
	for i := 0; i < len(goSlice); i++ {
		TrajectorySetpointsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

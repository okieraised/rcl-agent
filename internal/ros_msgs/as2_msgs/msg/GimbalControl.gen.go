// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/gimbal_control.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GimbalControl", GimbalControlTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/GimbalControl", GimbalControlTypeSupport)
}

const (
	GimbalControl_POSITION_MODE uint8 = 0
	GimbalControl_SPEED_MODE    uint8 = 1
)

type GimbalControl struct {
	ControlMode uint8                            `yaml:"control_mode"`
	Target      geometry_msgs_msg.Vector3Stamped `yaml:"target"` // x: roll y: pitch z: yaw
}

// NewGimbalControl creates a new GimbalControl with default values.
func NewGimbalControl() *GimbalControl {
	self := GimbalControl{}
	self.SetDefaults()
	return &self
}

func (t *GimbalControl) Clone() *GimbalControl {
	c := &GimbalControl{}
	c.ControlMode = t.ControlMode
	c.Target = *t.Target.Clone()
	return c
}

func (t *GimbalControl) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GimbalControl) SetDefaults() {
	t.ControlMode = 0
	t.Target.SetDefaults()
}

func (t *GimbalControl) GetTypeSupport() humble.MessageTypeSupport {
	return GimbalControlTypeSupport
}

// GimbalControlPublisher wraps humble.Publisher to provide type safe helper
// functions
type GimbalControlPublisher struct {
	*humble.Publisher
}

// NewGimbalControlPublisher creates and returns a new publisher for the
// GimbalControl
func NewGimbalControlPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GimbalControlPublisher, error) {
	pub, err := node.NewPublisher(topicName, GimbalControlTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalControlPublisher{pub}, nil
}

func (p *GimbalControlPublisher) Publish(msg *GimbalControl) error {
	return p.Publisher.Publish(msg)
}

// GimbalControlSubscription wraps humble.Subscription to provide type safe helper
// functions
type GimbalControlSubscription struct {
	*humble.Subscription
}

// GimbalControlSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalControlSubscription.
type GimbalControlSubscriptionCallback func(msg *GimbalControl, info *humble.MessageInfo, err error)

// NewGimbalControlSubscription creates and returns a new subscription for the
// GimbalControl
func NewGimbalControlSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GimbalControlSubscriptionCallback) (*GimbalControlSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GimbalControl
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GimbalControlTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalControlSubscription{sub}, nil
}

func (s *GimbalControlSubscription) TakeMessage(out *GimbalControl) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalControlSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalControlSlice(dst, src []GimbalControl) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalControlTypeSupport humble.MessageTypeSupport = _GimbalControlTypeSupport{}

type _GimbalControlTypeSupport struct{}

func (t _GimbalControlTypeSupport) New() humble.Message {
	return NewGimbalControl()
}

func (t _GimbalControlTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__GimbalControl
	return (unsafe.Pointer)(C.as2_msgs__msg__GimbalControl__create())
}

func (t _GimbalControlTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__GimbalControl__destroy((*C.as2_msgs__msg__GimbalControl)(pointer_to_free))
}

func (t _GimbalControlTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GimbalControl)
	mem := (*C.as2_msgs__msg__GimbalControl)(dst)
	mem.control_mode = C.uint8_t(m.ControlMode)
	geometry_msgs_msg.Vector3StampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.target), &m.Target)
}

func (t _GimbalControlTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalControl)
	mem := (*C.as2_msgs__msg__GimbalControl)(ros2_message_buffer)
	m.ControlMode = uint8(mem.control_mode)
	geometry_msgs_msg.Vector3StampedTypeSupport.AsGoStruct(&m.Target, unsafe.Pointer(&mem.target))
}

func (t _GimbalControlTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__GimbalControl())
}

type CGimbalControl = C.as2_msgs__msg__GimbalControl
type CGimbalControlSequence = C.as2_msgs__msg__GimbalControl__Sequence

func GimbalControlSequenceToGo(goSlice *[]GimbalControl, cSlice CGimbalControlSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalControl, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalControlTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GimbalControlSequenceToC(cSlice *CGimbalControlSequence, goSlice []GimbalControl) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__GimbalControl)(C.malloc(C.sizeof_struct_as2_msgs__msg__GimbalControl * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalControlTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GimbalControlArrayToGo(goSlice []GimbalControl, cSlice []CGimbalControl) {
	for i := 0; i < len(cSlice); i++ {
		GimbalControlTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GimbalControlArrayToC(cSlice []CGimbalControl, goSlice []GimbalControl) {
	for i := 0; i < len(goSlice); i++ {
		GimbalControlTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

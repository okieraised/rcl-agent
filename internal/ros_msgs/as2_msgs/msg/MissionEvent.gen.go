// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/mission_event.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/MissionEvent", MissionEventTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/MissionEvent", MissionEventTypeSupport)
}

type MissionEvent struct {
	Header std_msgs_msg.Header `yaml:"header"` // Message header
	Data   string              `yaml:"data"`   // (Optional) data to send with the trigger
}

// NewMissionEvent creates a new MissionEvent with default values.
func NewMissionEvent() *MissionEvent {
	self := MissionEvent{}
	self.SetDefaults()
	return &self
}

func (t *MissionEvent) Clone() *MissionEvent {
	c := &MissionEvent{}
	c.Header = *t.Header.Clone()
	c.Data = t.Data
	return c
}

func (t *MissionEvent) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MissionEvent) SetDefaults() {
	t.Header.SetDefaults()
	t.Data = ""
}

func (t *MissionEvent) GetTypeSupport() humble.MessageTypeSupport {
	return MissionEventTypeSupport
}

// MissionEventPublisher wraps humble.Publisher to provide type safe helper
// functions
type MissionEventPublisher struct {
	*humble.Publisher
}

// NewMissionEventPublisher creates and returns a new publisher for the
// MissionEvent
func NewMissionEventPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MissionEventPublisher, error) {
	pub, err := node.NewPublisher(topicName, MissionEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MissionEventPublisher{pub}, nil
}

func (p *MissionEventPublisher) Publish(msg *MissionEvent) error {
	return p.Publisher.Publish(msg)
}

// MissionEventSubscription wraps humble.Subscription to provide type safe helper
// functions
type MissionEventSubscription struct {
	*humble.Subscription
}

// MissionEventSubscriptionCallback type is used to provide a subscription
// handler function for a MissionEventSubscription.
type MissionEventSubscriptionCallback func(msg *MissionEvent, info *humble.MessageInfo, err error)

// NewMissionEventSubscription creates and returns a new subscription for the
// MissionEvent
func NewMissionEventSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MissionEventSubscriptionCallback) (*MissionEventSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MissionEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MissionEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MissionEventSubscription{sub}, nil
}

func (s *MissionEventSubscription) TakeMessage(out *MissionEvent) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMissionEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMissionEventSlice(dst, src []MissionEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MissionEventTypeSupport humble.MessageTypeSupport = _MissionEventTypeSupport{}

type _MissionEventTypeSupport struct{}

func (t _MissionEventTypeSupport) New() humble.Message {
	return NewMissionEvent()
}

func (t _MissionEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__MissionEvent
	return (unsafe.Pointer)(C.as2_msgs__msg__MissionEvent__create())
}

func (t _MissionEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__MissionEvent__destroy((*C.as2_msgs__msg__MissionEvent)(pointer_to_free))
}

func (t _MissionEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MissionEvent)
	mem := (*C.as2_msgs__msg__MissionEvent)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	humble.StringAsCStruct(unsafe.Pointer(&mem.data), m.Data)
}

func (t _MissionEventTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MissionEvent)
	mem := (*C.as2_msgs__msg__MissionEvent)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	humble.StringAsGoStruct(&m.Data, unsafe.Pointer(&mem.data))
}

func (t _MissionEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__MissionEvent())
}

type CMissionEvent = C.as2_msgs__msg__MissionEvent
type CMissionEventSequence = C.as2_msgs__msg__MissionEvent__Sequence

func MissionEventSequenceToGo(goSlice *[]MissionEvent, cSlice CMissionEventSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MissionEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MissionEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MissionEventSequenceToC(cSlice *CMissionEventSequence, goSlice []MissionEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__MissionEvent)(C.malloc(C.sizeof_struct_as2_msgs__msg__MissionEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MissionEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MissionEventArrayToGo(goSlice []MissionEvent, cSlice []CMissionEvent) {
	for i := 0; i < len(cSlice); i++ {
		MissionEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MissionEventArrayToC(cSlice []CMissionEvent, goSlice []MissionEvent) {
	for i := 0; i < len(goSlice); i++ {
		MissionEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

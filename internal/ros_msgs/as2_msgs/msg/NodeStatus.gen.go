// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/node_status.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/NodeStatus", NodeStatusTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/NodeStatus", NodeStatusTypeSupport)
}

const (
	NodeStatus_UNCONFIGURED int8 = 0
	NodeStatus_INACTIVE     int8 = 1
	NodeStatus_ACTIVE       int8 = 2
	NodeStatus_FINALIZED    int8 = 3
)

type NodeStatus struct {
	Status int8 `yaml:"status"` // node status
}

// NewNodeStatus creates a new NodeStatus with default values.
func NewNodeStatus() *NodeStatus {
	self := NodeStatus{}
	self.SetDefaults()
	return &self
}

func (t *NodeStatus) Clone() *NodeStatus {
	c := &NodeStatus{}
	c.Status = t.Status
	return c
}

func (t *NodeStatus) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *NodeStatus) SetDefaults() {
	t.Status = 0
}

func (t *NodeStatus) GetTypeSupport() humble.MessageTypeSupport {
	return NodeStatusTypeSupport
}

// NodeStatusPublisher wraps humble.Publisher to provide type safe helper
// functions
type NodeStatusPublisher struct {
	*humble.Publisher
}

// NewNodeStatusPublisher creates and returns a new publisher for the
// NodeStatus
func NewNodeStatusPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*NodeStatusPublisher, error) {
	pub, err := node.NewPublisher(topicName, NodeStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NodeStatusPublisher{pub}, nil
}

func (p *NodeStatusPublisher) Publish(msg *NodeStatus) error {
	return p.Publisher.Publish(msg)
}

// NodeStatusSubscription wraps humble.Subscription to provide type safe helper
// functions
type NodeStatusSubscription struct {
	*humble.Subscription
}

// NodeStatusSubscriptionCallback type is used to provide a subscription
// handler function for a NodeStatusSubscription.
type NodeStatusSubscriptionCallback func(msg *NodeStatus, info *humble.MessageInfo, err error)

// NewNodeStatusSubscription creates and returns a new subscription for the
// NodeStatus
func NewNodeStatusSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback NodeStatusSubscriptionCallback) (*NodeStatusSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg NodeStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, NodeStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &NodeStatusSubscription{sub}, nil
}

func (s *NodeStatusSubscription) TakeMessage(out *NodeStatus) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneNodeStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNodeStatusSlice(dst, src []NodeStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NodeStatusTypeSupport humble.MessageTypeSupport = _NodeStatusTypeSupport{}

type _NodeStatusTypeSupport struct{}

func (t _NodeStatusTypeSupport) New() humble.Message {
	return NewNodeStatus()
}

func (t _NodeStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__NodeStatus
	return (unsafe.Pointer)(C.as2_msgs__msg__NodeStatus__create())
}

func (t _NodeStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__NodeStatus__destroy((*C.as2_msgs__msg__NodeStatus)(pointer_to_free))
}

func (t _NodeStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*NodeStatus)
	mem := (*C.as2_msgs__msg__NodeStatus)(dst)
	mem.status = C.int8_t(m.Status)
}

func (t _NodeStatusTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NodeStatus)
	mem := (*C.as2_msgs__msg__NodeStatus)(ros2_message_buffer)
	m.Status = int8(mem.status)
}

func (t _NodeStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__NodeStatus())
}

type CNodeStatus = C.as2_msgs__msg__NodeStatus
type CNodeStatusSequence = C.as2_msgs__msg__NodeStatus__Sequence

func NodeStatusSequenceToGo(goSlice *[]NodeStatus, cSlice CNodeStatusSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NodeStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		NodeStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func NodeStatusSequenceToC(cSlice *CNodeStatusSequence, goSlice []NodeStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__NodeStatus)(C.malloc(C.sizeof_struct_as2_msgs__msg__NodeStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		NodeStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func NodeStatusArrayToGo(goSlice []NodeStatus, cSlice []CNodeStatus) {
	for i := 0; i < len(cSlice); i++ {
		NodeStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func NodeStatusArrayToC(cSlice []CNodeStatus, goSlice []NodeStatus) {
	for i := 0; i < len(goSlice); i++ {
		NodeStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

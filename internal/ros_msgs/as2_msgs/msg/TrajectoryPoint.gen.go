// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/trajectory_point.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/TrajectoryPoint", TrajectoryPointTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/TrajectoryPoint", TrajectoryPointTypeSupport)
}

type TrajectoryPoint struct {
	Position     geometry_msgs_msg.Vector3 `yaml:"position"`     // Position of the vehicle in the frame_id frame
	Twist        geometry_msgs_msg.Vector3 `yaml:"twist"`        // Twist of the vehicle in the frame_id frame
	Acceleration geometry_msgs_msg.Vector3 `yaml:"acceleration"` // Acceleration of the vehicle in the frame_id frame
	YawAngle     float32                   `yaml:"yaw_angle"`    // Yaw angle of the vehicle (rad) in the frame_id frame
}

// NewTrajectoryPoint creates a new TrajectoryPoint with default values.
func NewTrajectoryPoint() *TrajectoryPoint {
	self := TrajectoryPoint{}
	self.SetDefaults()
	return &self
}

func (t *TrajectoryPoint) Clone() *TrajectoryPoint {
	c := &TrajectoryPoint{}
	c.Position = *t.Position.Clone()
	c.Twist = *t.Twist.Clone()
	c.Acceleration = *t.Acceleration.Clone()
	c.YawAngle = t.YawAngle
	return c
}

func (t *TrajectoryPoint) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TrajectoryPoint) SetDefaults() {
	t.Position.SetDefaults()
	t.Twist.SetDefaults()
	t.Acceleration.SetDefaults()
	t.YawAngle = 0
}

func (t *TrajectoryPoint) GetTypeSupport() humble.MessageTypeSupport {
	return TrajectoryPointTypeSupport
}

// TrajectoryPointPublisher wraps humble.Publisher to provide type safe helper
// functions
type TrajectoryPointPublisher struct {
	*humble.Publisher
}

// NewTrajectoryPointPublisher creates and returns a new publisher for the
// TrajectoryPoint
func NewTrajectoryPointPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TrajectoryPointPublisher, error) {
	pub, err := node.NewPublisher(topicName, TrajectoryPointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TrajectoryPointPublisher{pub}, nil
}

func (p *TrajectoryPointPublisher) Publish(msg *TrajectoryPoint) error {
	return p.Publisher.Publish(msg)
}

// TrajectoryPointSubscription wraps humble.Subscription to provide type safe helper
// functions
type TrajectoryPointSubscription struct {
	*humble.Subscription
}

// TrajectoryPointSubscriptionCallback type is used to provide a subscription
// handler function for a TrajectoryPointSubscription.
type TrajectoryPointSubscriptionCallback func(msg *TrajectoryPoint, info *humble.MessageInfo, err error)

// NewTrajectoryPointSubscription creates and returns a new subscription for the
// TrajectoryPoint
func NewTrajectoryPointSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TrajectoryPointSubscriptionCallback) (*TrajectoryPointSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TrajectoryPoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TrajectoryPointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TrajectoryPointSubscription{sub}, nil
}

func (s *TrajectoryPointSubscription) TakeMessage(out *TrajectoryPoint) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrajectoryPointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajectoryPointSlice(dst, src []TrajectoryPoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajectoryPointTypeSupport humble.MessageTypeSupport = _TrajectoryPointTypeSupport{}

type _TrajectoryPointTypeSupport struct{}

func (t _TrajectoryPointTypeSupport) New() humble.Message {
	return NewTrajectoryPoint()
}

func (t _TrajectoryPointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__TrajectoryPoint
	return (unsafe.Pointer)(C.as2_msgs__msg__TrajectoryPoint__create())
}

func (t _TrajectoryPointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__TrajectoryPoint__destroy((*C.as2_msgs__msg__TrajectoryPoint)(pointer_to_free))
}

func (t _TrajectoryPointTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TrajectoryPoint)
	mem := (*C.as2_msgs__msg__TrajectoryPoint)(dst)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.position), &m.Position)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.twist), &m.Twist)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.acceleration), &m.Acceleration)
	mem.yaw_angle = C.float(m.YawAngle)
}

func (t _TrajectoryPointTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TrajectoryPoint)
	mem := (*C.as2_msgs__msg__TrajectoryPoint)(ros2_message_buffer)
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Position, unsafe.Pointer(&mem.position))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Twist, unsafe.Pointer(&mem.twist))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Acceleration, unsafe.Pointer(&mem.acceleration))
	m.YawAngle = float32(mem.yaw_angle)
}

func (t _TrajectoryPointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__TrajectoryPoint())
}

type CTrajectoryPoint = C.as2_msgs__msg__TrajectoryPoint
type CTrajectoryPointSequence = C.as2_msgs__msg__TrajectoryPoint__Sequence

func TrajectoryPointSequenceToGo(goSlice *[]TrajectoryPoint, cSlice CTrajectoryPointSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrajectoryPoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TrajectoryPointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TrajectoryPointSequenceToC(cSlice *CTrajectoryPointSequence, goSlice []TrajectoryPoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__TrajectoryPoint)(C.malloc(C.sizeof_struct_as2_msgs__msg__TrajectoryPoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TrajectoryPointArrayToGo(goSlice []TrajectoryPoint, cSlice []CTrajectoryPoint) {
	for i := 0; i < len(cSlice); i++ {
		TrajectoryPointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TrajectoryPointArrayToC(cSlice []CTrajectoryPoint, goSlice []TrajectoryPoint) {
	for i := 0; i < len(goSlice); i++ {
		TrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/platform_state_machine_event.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PlatformStateMachineEvent", PlatformStateMachineEventTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/PlatformStateMachineEvent", PlatformStateMachineEventTypeSupport)
}

const (
	PlatformStateMachineEvent_EMERGENCY int8 = -1
	PlatformStateMachineEvent_ARM       int8 = 0
	PlatformStateMachineEvent_DISARM    int8 = 1
	PlatformStateMachineEvent_TAKE_OFF  int8 = 2
	PlatformStateMachineEvent_TOOK_OFF  int8 = 3
	PlatformStateMachineEvent_LAND      int8 = 4
	PlatformStateMachineEvent_LANDED    int8 = 5
)

type PlatformStateMachineEvent struct {
	Event int8 `yaml:"event"` // Platform state machine event
}

// NewPlatformStateMachineEvent creates a new PlatformStateMachineEvent with default values.
func NewPlatformStateMachineEvent() *PlatformStateMachineEvent {
	self := PlatformStateMachineEvent{}
	self.SetDefaults()
	return &self
}

func (t *PlatformStateMachineEvent) Clone() *PlatformStateMachineEvent {
	c := &PlatformStateMachineEvent{}
	c.Event = t.Event
	return c
}

func (t *PlatformStateMachineEvent) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PlatformStateMachineEvent) SetDefaults() {
	t.Event = 0
}

func (t *PlatformStateMachineEvent) GetTypeSupport() humble.MessageTypeSupport {
	return PlatformStateMachineEventTypeSupport
}

// PlatformStateMachineEventPublisher wraps humble.Publisher to provide type safe helper
// functions
type PlatformStateMachineEventPublisher struct {
	*humble.Publisher
}

// NewPlatformStateMachineEventPublisher creates and returns a new publisher for the
// PlatformStateMachineEvent
func NewPlatformStateMachineEventPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PlatformStateMachineEventPublisher, error) {
	pub, err := node.NewPublisher(topicName, PlatformStateMachineEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PlatformStateMachineEventPublisher{pub}, nil
}

func (p *PlatformStateMachineEventPublisher) Publish(msg *PlatformStateMachineEvent) error {
	return p.Publisher.Publish(msg)
}

// PlatformStateMachineEventSubscription wraps humble.Subscription to provide type safe helper
// functions
type PlatformStateMachineEventSubscription struct {
	*humble.Subscription
}

// PlatformStateMachineEventSubscriptionCallback type is used to provide a subscription
// handler function for a PlatformStateMachineEventSubscription.
type PlatformStateMachineEventSubscriptionCallback func(msg *PlatformStateMachineEvent, info *humble.MessageInfo, err error)

// NewPlatformStateMachineEventSubscription creates and returns a new subscription for the
// PlatformStateMachineEvent
func NewPlatformStateMachineEventSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PlatformStateMachineEventSubscriptionCallback) (*PlatformStateMachineEventSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PlatformStateMachineEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PlatformStateMachineEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PlatformStateMachineEventSubscription{sub}, nil
}

func (s *PlatformStateMachineEventSubscription) TakeMessage(out *PlatformStateMachineEvent) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePlatformStateMachineEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePlatformStateMachineEventSlice(dst, src []PlatformStateMachineEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PlatformStateMachineEventTypeSupport humble.MessageTypeSupport = _PlatformStateMachineEventTypeSupport{}

type _PlatformStateMachineEventTypeSupport struct{}

func (t _PlatformStateMachineEventTypeSupport) New() humble.Message {
	return NewPlatformStateMachineEvent()
}

func (t _PlatformStateMachineEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__PlatformStateMachineEvent
	return (unsafe.Pointer)(C.as2_msgs__msg__PlatformStateMachineEvent__create())
}

func (t _PlatformStateMachineEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__PlatformStateMachineEvent__destroy((*C.as2_msgs__msg__PlatformStateMachineEvent)(pointer_to_free))
}

func (t _PlatformStateMachineEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PlatformStateMachineEvent)
	mem := (*C.as2_msgs__msg__PlatformStateMachineEvent)(dst)
	mem.event = C.int8_t(m.Event)
}

func (t _PlatformStateMachineEventTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PlatformStateMachineEvent)
	mem := (*C.as2_msgs__msg__PlatformStateMachineEvent)(ros2_message_buffer)
	m.Event = int8(mem.event)
}

func (t _PlatformStateMachineEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__PlatformStateMachineEvent())
}

type CPlatformStateMachineEvent = C.as2_msgs__msg__PlatformStateMachineEvent
type CPlatformStateMachineEventSequence = C.as2_msgs__msg__PlatformStateMachineEvent__Sequence

func PlatformStateMachineEventSequenceToGo(goSlice *[]PlatformStateMachineEvent, cSlice CPlatformStateMachineEventSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PlatformStateMachineEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PlatformStateMachineEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PlatformStateMachineEventSequenceToC(cSlice *CPlatformStateMachineEventSequence, goSlice []PlatformStateMachineEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__PlatformStateMachineEvent)(C.malloc(C.sizeof_struct_as2_msgs__msg__PlatformStateMachineEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PlatformStateMachineEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PlatformStateMachineEventArrayToGo(goSlice []PlatformStateMachineEvent, cSlice []CPlatformStateMachineEvent) {
	for i := 0; i < len(cSlice); i++ {
		PlatformStateMachineEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PlatformStateMachineEventArrayToC(cSlice []CPlatformStateMachineEvent, goSlice []PlatformStateMachineEvent) {
	for i := 0; i < len(goSlice); i++ {
		PlatformStateMachineEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/yaw_mode.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/YawMode", YawModeTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/YawMode", YawModeTypeSupport)
}

const (
	YawMode_KEEP_YAW             uint8 = 0 // Keep the current yaw angle
	YawMode_PATH_FACING          uint8 = 1 // Yaw angle is aligned with the path
	YawMode_FIXED_YAW            uint8 = 2 // Yaw angle is fixed to a given angle
	YawMode_YAW_FROM_TOPIC       uint8 = 3 // Yaw angle is set by a topic
	YawMode_YAW_FROM_ORIENTATION uint8 = 4 // Yaw angle is set by pose orientation
	YawMode_YAW_TO_FRAME         uint8 = 5 // Yaw angle is set to face the used frame
	YawMode_FACE_REFERENCE       uint8 = 6 // Yaw angle is set to face the next reference
)

type YawMode struct {
	Mode  uint8   `yaml:"mode"`  // Yaw mode
	Angle float32 `yaml:"angle"` // Fixed yaw (rad)
}

// NewYawMode creates a new YawMode with default values.
func NewYawMode() *YawMode {
	self := YawMode{}
	self.SetDefaults()
	return &self
}

func (t *YawMode) Clone() *YawMode {
	c := &YawMode{}
	c.Mode = t.Mode
	c.Angle = t.Angle
	return c
}

func (t *YawMode) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *YawMode) SetDefaults() {
	t.Mode = 0
	t.Angle = 0
}

func (t *YawMode) GetTypeSupport() humble.MessageTypeSupport {
	return YawModeTypeSupport
}

// YawModePublisher wraps humble.Publisher to provide type safe helper
// functions
type YawModePublisher struct {
	*humble.Publisher
}

// NewYawModePublisher creates and returns a new publisher for the
// YawMode
func NewYawModePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*YawModePublisher, error) {
	pub, err := node.NewPublisher(topicName, YawModeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &YawModePublisher{pub}, nil
}

func (p *YawModePublisher) Publish(msg *YawMode) error {
	return p.Publisher.Publish(msg)
}

// YawModeSubscription wraps humble.Subscription to provide type safe helper
// functions
type YawModeSubscription struct {
	*humble.Subscription
}

// YawModeSubscriptionCallback type is used to provide a subscription
// handler function for a YawModeSubscription.
type YawModeSubscriptionCallback func(msg *YawMode, info *humble.MessageInfo, err error)

// NewYawModeSubscription creates and returns a new subscription for the
// YawMode
func NewYawModeSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback YawModeSubscriptionCallback) (*YawModeSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg YawMode
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, YawModeTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &YawModeSubscription{sub}, nil
}

func (s *YawModeSubscription) TakeMessage(out *YawMode) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneYawModeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneYawModeSlice(dst, src []YawMode) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var YawModeTypeSupport humble.MessageTypeSupport = _YawModeTypeSupport{}

type _YawModeTypeSupport struct{}

func (t _YawModeTypeSupport) New() humble.Message {
	return NewYawMode()
}

func (t _YawModeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__YawMode
	return (unsafe.Pointer)(C.as2_msgs__msg__YawMode__create())
}

func (t _YawModeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__YawMode__destroy((*C.as2_msgs__msg__YawMode)(pointer_to_free))
}

func (t _YawModeTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*YawMode)
	mem := (*C.as2_msgs__msg__YawMode)(dst)
	mem.mode = C.uint8_t(m.Mode)
	mem.angle = C.float(m.Angle)
}

func (t _YawModeTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*YawMode)
	mem := (*C.as2_msgs__msg__YawMode)(ros2_message_buffer)
	m.Mode = uint8(mem.mode)
	m.Angle = float32(mem.angle)
}

func (t _YawModeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__YawMode())
}

type CYawMode = C.as2_msgs__msg__YawMode
type CYawModeSequence = C.as2_msgs__msg__YawMode__Sequence

func YawModeSequenceToGo(goSlice *[]YawMode, cSlice CYawModeSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]YawMode, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		YawModeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func YawModeSequenceToC(cSlice *CYawModeSequence, goSlice []YawMode) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__YawMode)(C.malloc(C.sizeof_struct_as2_msgs__msg__YawMode * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		YawModeTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func YawModeArrayToGo(goSlice []YawMode, cSlice []CYawMode) {
	for i := 0; i < len(cSlice); i++ {
		YawModeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func YawModeArrayToC(cSlice []CYawMode, goSlice []YawMode) {
	for i := 0; i < len(goSlice); i++ {
		YawModeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

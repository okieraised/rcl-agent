// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/control_mode.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/ControlMode", ControlModeTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/ControlMode", ControlModeTypeSupport)
}

const (
	ControlMode_NONE                 int8 = 0
	ControlMode_YAW_ANGLE            int8 = 1 // Yaw angle control mode (rad)
	ControlMode_YAW_SPEED            int8 = 2 // Yaw speed control mode (rad/s)
	ControlMode_UNSET                int8 = 0 // mode when the controller is not set
	ControlMode_HOVER                int8 = 1 // mode when the controller is in hover mode
	ControlMode_POSITION             int8 = 2 // x,   y , z  refs
	ControlMode_SPEED                int8 = 3 // vx, vy , vz refs
	ControlMode_SPEED_IN_A_PLANE     int8 = 4 // vx, vy , z refs
	ControlMode_ATTITUDE             int8 = 5 // roll, pitch, yaw  refs
	ControlMode_ACRO                 int8 = 6 // roll, pitch, yawrate  refs
	ControlMode_TRAJECTORY           int8 = 7 // x, y z, vx, vy, vz, ax, ay, az refs
	ControlMode_UNDEFINED_FRAME      int8 = 0
	ControlMode_LOCAL_ENU_FRAME      int8 = 1 // local coordinates (use this by default)
	ControlMode_BODY_FLU_FRAME       int8 = 2 // body coordinates
	ControlMode_GLOBAL_LAT_LONG_ASML int8 = 3 // gnss wcoordinates
)

type ControlMode struct {
	Header         std_msgs_msg.Header `yaml:"header"`          // Message header
	YawMode        int8                `yaml:"yaw_mode"`        // Yaw mode
	ControlMode    int8                `yaml:"control_mode"`    // Control mode
	ReferenceFrame int8                `yaml:"reference_frame"` // Reference frame
}

// NewControlMode creates a new ControlMode with default values.
func NewControlMode() *ControlMode {
	self := ControlMode{}
	self.SetDefaults()
	return &self
}

func (t *ControlMode) Clone() *ControlMode {
	c := &ControlMode{}
	c.Header = *t.Header.Clone()
	c.YawMode = t.YawMode
	c.ControlMode = t.ControlMode
	c.ReferenceFrame = t.ReferenceFrame
	return c
}

func (t *ControlMode) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ControlMode) SetDefaults() {
	t.Header.SetDefaults()
	t.YawMode = 0
	t.ControlMode = 0
	t.ReferenceFrame = 0
}

func (t *ControlMode) GetTypeSupport() humble.MessageTypeSupport {
	return ControlModeTypeSupport
}

// ControlModePublisher wraps humble.Publisher to provide type safe helper
// functions
type ControlModePublisher struct {
	*humble.Publisher
}

// NewControlModePublisher creates and returns a new publisher for the
// ControlMode
func NewControlModePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ControlModePublisher, error) {
	pub, err := node.NewPublisher(topicName, ControlModeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ControlModePublisher{pub}, nil
}

func (p *ControlModePublisher) Publish(msg *ControlMode) error {
	return p.Publisher.Publish(msg)
}

// ControlModeSubscription wraps humble.Subscription to provide type safe helper
// functions
type ControlModeSubscription struct {
	*humble.Subscription
}

// ControlModeSubscriptionCallback type is used to provide a subscription
// handler function for a ControlModeSubscription.
type ControlModeSubscriptionCallback func(msg *ControlMode, info *humble.MessageInfo, err error)

// NewControlModeSubscription creates and returns a new subscription for the
// ControlMode
func NewControlModeSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ControlModeSubscriptionCallback) (*ControlModeSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ControlMode
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ControlModeTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ControlModeSubscription{sub}, nil
}

func (s *ControlModeSubscription) TakeMessage(out *ControlMode) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneControlModeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneControlModeSlice(dst, src []ControlMode) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ControlModeTypeSupport humble.MessageTypeSupport = _ControlModeTypeSupport{}

type _ControlModeTypeSupport struct{}

func (t _ControlModeTypeSupport) New() humble.Message {
	return NewControlMode()
}

func (t _ControlModeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__ControlMode
	return (unsafe.Pointer)(C.as2_msgs__msg__ControlMode__create())
}

func (t _ControlModeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__ControlMode__destroy((*C.as2_msgs__msg__ControlMode)(pointer_to_free))
}

func (t _ControlModeTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ControlMode)
	mem := (*C.as2_msgs__msg__ControlMode)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.yaw_mode = C.int8_t(m.YawMode)
	mem.control_mode = C.int8_t(m.ControlMode)
	mem.reference_frame = C.int8_t(m.ReferenceFrame)
}

func (t _ControlModeTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ControlMode)
	mem := (*C.as2_msgs__msg__ControlMode)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.YawMode = int8(mem.yaw_mode)
	m.ControlMode = int8(mem.control_mode)
	m.ReferenceFrame = int8(mem.reference_frame)
}

func (t _ControlModeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__ControlMode())
}

type CControlMode = C.as2_msgs__msg__ControlMode
type CControlModeSequence = C.as2_msgs__msg__ControlMode__Sequence

func ControlModeSequenceToGo(goSlice *[]ControlMode, cSlice CControlModeSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ControlMode, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ControlModeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ControlModeSequenceToC(cSlice *CControlModeSequence, goSlice []ControlMode) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__ControlMode)(C.malloc(C.sizeof_struct_as2_msgs__msg__ControlMode * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ControlModeTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ControlModeArrayToGo(goSlice []ControlMode, cSlice []CControlMode) {
	for i := 0; i < len(cSlice); i++ {
		ControlModeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ControlModeArrayToC(cSlice []CControlMode, goSlice []ControlMode) {
	for i := 0; i < len(goSlice); i++ {
		ControlModeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

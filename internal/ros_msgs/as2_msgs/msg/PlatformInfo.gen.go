// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/platform_info.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PlatformInfo", PlatformInfoTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/PlatformInfo", PlatformInfoTypeSupport)
}

type PlatformInfo struct {
	Header             std_msgs_msg.Header `yaml:"header"`               // Message header
	Connected          bool                `yaml:"connected"`            // Whether the platform is connected or not
	Armed              bool                `yaml:"armed"`                // Whether the platform is armed or not
	Offboard           bool                `yaml:"offboard"`             // Whether the offboard mode is set or not
	Status             PlatformStatus      `yaml:"status"`               // Platform status
	CurrentControlMode ControlMode         `yaml:"current_control_mode"` // Platform control mode
}

// NewPlatformInfo creates a new PlatformInfo with default values.
func NewPlatformInfo() *PlatformInfo {
	self := PlatformInfo{}
	self.SetDefaults()
	return &self
}

func (t *PlatformInfo) Clone() *PlatformInfo {
	c := &PlatformInfo{}
	c.Header = *t.Header.Clone()
	c.Connected = t.Connected
	c.Armed = t.Armed
	c.Offboard = t.Offboard
	c.Status = *t.Status.Clone()
	c.CurrentControlMode = *t.CurrentControlMode.Clone()
	return c
}

func (t *PlatformInfo) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PlatformInfo) SetDefaults() {
	t.Header.SetDefaults()
	t.Connected = false
	t.Armed = false
	t.Offboard = false
	t.Status.SetDefaults()
	t.CurrentControlMode.SetDefaults()
}

func (t *PlatformInfo) GetTypeSupport() humble.MessageTypeSupport {
	return PlatformInfoTypeSupport
}

// PlatformInfoPublisher wraps humble.Publisher to provide type safe helper
// functions
type PlatformInfoPublisher struct {
	*humble.Publisher
}

// NewPlatformInfoPublisher creates and returns a new publisher for the
// PlatformInfo
func NewPlatformInfoPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PlatformInfoPublisher, error) {
	pub, err := node.NewPublisher(topicName, PlatformInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PlatformInfoPublisher{pub}, nil
}

func (p *PlatformInfoPublisher) Publish(msg *PlatformInfo) error {
	return p.Publisher.Publish(msg)
}

// PlatformInfoSubscription wraps humble.Subscription to provide type safe helper
// functions
type PlatformInfoSubscription struct {
	*humble.Subscription
}

// PlatformInfoSubscriptionCallback type is used to provide a subscription
// handler function for a PlatformInfoSubscription.
type PlatformInfoSubscriptionCallback func(msg *PlatformInfo, info *humble.MessageInfo, err error)

// NewPlatformInfoSubscription creates and returns a new subscription for the
// PlatformInfo
func NewPlatformInfoSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PlatformInfoSubscriptionCallback) (*PlatformInfoSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PlatformInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PlatformInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PlatformInfoSubscription{sub}, nil
}

func (s *PlatformInfoSubscription) TakeMessage(out *PlatformInfo) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePlatformInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePlatformInfoSlice(dst, src []PlatformInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PlatformInfoTypeSupport humble.MessageTypeSupport = _PlatformInfoTypeSupport{}

type _PlatformInfoTypeSupport struct{}

func (t _PlatformInfoTypeSupport) New() humble.Message {
	return NewPlatformInfo()
}

func (t _PlatformInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__PlatformInfo
	return (unsafe.Pointer)(C.as2_msgs__msg__PlatformInfo__create())
}

func (t _PlatformInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__PlatformInfo__destroy((*C.as2_msgs__msg__PlatformInfo)(pointer_to_free))
}

func (t _PlatformInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PlatformInfo)
	mem := (*C.as2_msgs__msg__PlatformInfo)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.connected = C.bool(m.Connected)
	mem.armed = C.bool(m.Armed)
	mem.offboard = C.bool(m.Offboard)
	PlatformStatusTypeSupport.AsCStruct(unsafe.Pointer(&mem.status), &m.Status)
	ControlModeTypeSupport.AsCStruct(unsafe.Pointer(&mem.current_control_mode), &m.CurrentControlMode)
}

func (t _PlatformInfoTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PlatformInfo)
	mem := (*C.as2_msgs__msg__PlatformInfo)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Connected = bool(mem.connected)
	m.Armed = bool(mem.armed)
	m.Offboard = bool(mem.offboard)
	PlatformStatusTypeSupport.AsGoStruct(&m.Status, unsafe.Pointer(&mem.status))
	ControlModeTypeSupport.AsGoStruct(&m.CurrentControlMode, unsafe.Pointer(&mem.current_control_mode))
}

func (t _PlatformInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__PlatformInfo())
}

type CPlatformInfo = C.as2_msgs__msg__PlatformInfo
type CPlatformInfoSequence = C.as2_msgs__msg__PlatformInfo__Sequence

func PlatformInfoSequenceToGo(goSlice *[]PlatformInfo, cSlice CPlatformInfoSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PlatformInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PlatformInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PlatformInfoSequenceToC(cSlice *CPlatformInfoSequence, goSlice []PlatformInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__PlatformInfo)(C.malloc(C.sizeof_struct_as2_msgs__msg__PlatformInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PlatformInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PlatformInfoArrayToGo(goSlice []PlatformInfo, cSlice []CPlatformInfo) {
	for i := 0; i < len(cSlice); i++ {
		PlatformInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PlatformInfoArrayToC(cSlice []CPlatformInfo, goSlice []PlatformInfo) {
	for i := 0; i < len(goSlice); i++ {
		PlatformInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/controller_info.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/ControllerInfo", ControllerInfoTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/ControllerInfo", ControllerInfoTypeSupport)
}

type ControllerInfo struct {
	Header            std_msgs_msg.Header `yaml:"header"`              // Message header
	InputControlMode  ControlMode         `yaml:"input_control_mode"`  // Input control mode
	OutputControlMode ControlMode         `yaml:"output_control_mode"` // Output control mode
}

// NewControllerInfo creates a new ControllerInfo with default values.
func NewControllerInfo() *ControllerInfo {
	self := ControllerInfo{}
	self.SetDefaults()
	return &self
}

func (t *ControllerInfo) Clone() *ControllerInfo {
	c := &ControllerInfo{}
	c.Header = *t.Header.Clone()
	c.InputControlMode = *t.InputControlMode.Clone()
	c.OutputControlMode = *t.OutputControlMode.Clone()
	return c
}

func (t *ControllerInfo) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ControllerInfo) SetDefaults() {
	t.Header.SetDefaults()
	t.InputControlMode.SetDefaults()
	t.OutputControlMode.SetDefaults()
}

func (t *ControllerInfo) GetTypeSupport() humble.MessageTypeSupport {
	return ControllerInfoTypeSupport
}

// ControllerInfoPublisher wraps humble.Publisher to provide type safe helper
// functions
type ControllerInfoPublisher struct {
	*humble.Publisher
}

// NewControllerInfoPublisher creates and returns a new publisher for the
// ControllerInfo
func NewControllerInfoPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ControllerInfoPublisher, error) {
	pub, err := node.NewPublisher(topicName, ControllerInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ControllerInfoPublisher{pub}, nil
}

func (p *ControllerInfoPublisher) Publish(msg *ControllerInfo) error {
	return p.Publisher.Publish(msg)
}

// ControllerInfoSubscription wraps humble.Subscription to provide type safe helper
// functions
type ControllerInfoSubscription struct {
	*humble.Subscription
}

// ControllerInfoSubscriptionCallback type is used to provide a subscription
// handler function for a ControllerInfoSubscription.
type ControllerInfoSubscriptionCallback func(msg *ControllerInfo, info *humble.MessageInfo, err error)

// NewControllerInfoSubscription creates and returns a new subscription for the
// ControllerInfo
func NewControllerInfoSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ControllerInfoSubscriptionCallback) (*ControllerInfoSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ControllerInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ControllerInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ControllerInfoSubscription{sub}, nil
}

func (s *ControllerInfoSubscription) TakeMessage(out *ControllerInfo) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneControllerInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneControllerInfoSlice(dst, src []ControllerInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ControllerInfoTypeSupport humble.MessageTypeSupport = _ControllerInfoTypeSupport{}

type _ControllerInfoTypeSupport struct{}

func (t _ControllerInfoTypeSupport) New() humble.Message {
	return NewControllerInfo()
}

func (t _ControllerInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__ControllerInfo
	return (unsafe.Pointer)(C.as2_msgs__msg__ControllerInfo__create())
}

func (t _ControllerInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__ControllerInfo__destroy((*C.as2_msgs__msg__ControllerInfo)(pointer_to_free))
}

func (t _ControllerInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ControllerInfo)
	mem := (*C.as2_msgs__msg__ControllerInfo)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	ControlModeTypeSupport.AsCStruct(unsafe.Pointer(&mem.input_control_mode), &m.InputControlMode)
	ControlModeTypeSupport.AsCStruct(unsafe.Pointer(&mem.output_control_mode), &m.OutputControlMode)
}

func (t _ControllerInfoTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ControllerInfo)
	mem := (*C.as2_msgs__msg__ControllerInfo)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	ControlModeTypeSupport.AsGoStruct(&m.InputControlMode, unsafe.Pointer(&mem.input_control_mode))
	ControlModeTypeSupport.AsGoStruct(&m.OutputControlMode, unsafe.Pointer(&mem.output_control_mode))
}

func (t _ControllerInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__ControllerInfo())
}

type CControllerInfo = C.as2_msgs__msg__ControllerInfo
type CControllerInfoSequence = C.as2_msgs__msg__ControllerInfo__Sequence

func ControllerInfoSequenceToGo(goSlice *[]ControllerInfo, cSlice CControllerInfoSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ControllerInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ControllerInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ControllerInfoSequenceToC(cSlice *CControllerInfoSequence, goSlice []ControllerInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__ControllerInfo)(C.malloc(C.sizeof_struct_as2_msgs__msg__ControllerInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ControllerInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ControllerInfoArrayToGo(goSlice []ControllerInfo, cSlice []CControllerInfo) {
	for i := 0; i < len(cSlice); i++ {
		ControllerInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ControllerInfoArrayToC(cSlice []CControllerInfo, goSlice []ControllerInfo) {
	for i := 0; i < len(goSlice); i++ {
		ControllerInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

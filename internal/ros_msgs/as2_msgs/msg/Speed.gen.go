// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/speed.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/Speed", SpeedTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/Speed", SpeedTypeSupport)
}

type Speed struct {
	Header std_msgs_msg.Header `yaml:"header"` // Message header
	Speed  float32             `yaml:"speed"`  // speed (m/s)
}

// NewSpeed creates a new Speed with default values.
func NewSpeed() *Speed {
	self := Speed{}
	self.SetDefaults()
	return &self
}

func (t *Speed) Clone() *Speed {
	c := &Speed{}
	c.Header = *t.Header.Clone()
	c.Speed = t.Speed
	return c
}

func (t *Speed) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Speed) SetDefaults() {
	t.Header.SetDefaults()
	t.Speed = 0
}

func (t *Speed) GetTypeSupport() humble.MessageTypeSupport {
	return SpeedTypeSupport
}

// SpeedPublisher wraps humble.Publisher to provide type safe helper
// functions
type SpeedPublisher struct {
	*humble.Publisher
}

// NewSpeedPublisher creates and returns a new publisher for the
// Speed
func NewSpeedPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SpeedPublisher, error) {
	pub, err := node.NewPublisher(topicName, SpeedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SpeedPublisher{pub}, nil
}

func (p *SpeedPublisher) Publish(msg *Speed) error {
	return p.Publisher.Publish(msg)
}

// SpeedSubscription wraps humble.Subscription to provide type safe helper
// functions
type SpeedSubscription struct {
	*humble.Subscription
}

// SpeedSubscriptionCallback type is used to provide a subscription
// handler function for a SpeedSubscription.
type SpeedSubscriptionCallback func(msg *Speed, info *humble.MessageInfo, err error)

// NewSpeedSubscription creates and returns a new subscription for the
// Speed
func NewSpeedSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SpeedSubscriptionCallback) (*SpeedSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Speed
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SpeedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SpeedSubscription{sub}, nil
}

func (s *SpeedSubscription) TakeMessage(out *Speed) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSpeedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSpeedSlice(dst, src []Speed) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SpeedTypeSupport humble.MessageTypeSupport = _SpeedTypeSupport{}

type _SpeedTypeSupport struct{}

func (t _SpeedTypeSupport) New() humble.Message {
	return NewSpeed()
}

func (t _SpeedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__Speed
	return (unsafe.Pointer)(C.as2_msgs__msg__Speed__create())
}

func (t _SpeedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__Speed__destroy((*C.as2_msgs__msg__Speed)(pointer_to_free))
}

func (t _SpeedTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Speed)
	mem := (*C.as2_msgs__msg__Speed)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.speed = C.float(m.Speed)
}

func (t _SpeedTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Speed)
	mem := (*C.as2_msgs__msg__Speed)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Speed = float32(mem.speed)
}

func (t _SpeedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__Speed())
}

type CSpeed = C.as2_msgs__msg__Speed
type CSpeedSequence = C.as2_msgs__msg__Speed__Sequence

func SpeedSequenceToGo(goSlice *[]Speed, cSlice CSpeedSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Speed, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SpeedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SpeedSequenceToC(cSlice *CSpeedSequence, goSlice []Speed) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__Speed)(C.malloc(C.sizeof_struct_as2_msgs__msg__Speed * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SpeedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SpeedArrayToGo(goSlice []Speed, cSlice []CSpeed) {
	for i := 0; i < len(cSlice); i++ {
		SpeedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SpeedArrayToC(cSlice []CSpeed, goSlice []Speed) {
	for i := 0; i < len(goSlice); i++ {
		SpeedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_msg

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/msg/u_int16_multi_array_stamped.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/UInt16MultiArrayStamped", UInt16MultiArrayStampedTypeSupport)
	humble.RegisterMessage("as2_msgs/msg/UInt16MultiArrayStamped", UInt16MultiArrayStampedTypeSupport)
}

type UInt16MultiArrayStamped struct {
	Stamp  builtin_interfaces_msg.Time   `yaml:"stamp"`  // Message timestamp
	Layout std_msgs_msg.MultiArrayLayout `yaml:"layout"` // Specification of data layout
	Data   []uint16                      `yaml:"data"`   // Array of data
}

// NewUInt16MultiArrayStamped creates a new UInt16MultiArrayStamped with default values.
func NewUInt16MultiArrayStamped() *UInt16MultiArrayStamped {
	self := UInt16MultiArrayStamped{}
	self.SetDefaults()
	return &self
}

func (t *UInt16MultiArrayStamped) Clone() *UInt16MultiArrayStamped {
	c := &UInt16MultiArrayStamped{}
	c.Stamp = *t.Stamp.Clone()
	c.Layout = *t.Layout.Clone()
	if t.Data != nil {
		c.Data = make([]uint16, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *UInt16MultiArrayStamped) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *UInt16MultiArrayStamped) SetDefaults() {
	t.Stamp.SetDefaults()
	t.Layout.SetDefaults()
	t.Data = nil
}

func (t *UInt16MultiArrayStamped) GetTypeSupport() humble.MessageTypeSupport {
	return UInt16MultiArrayStampedTypeSupport
}

// UInt16MultiArrayStampedPublisher wraps humble.Publisher to provide type safe helper
// functions
type UInt16MultiArrayStampedPublisher struct {
	*humble.Publisher
}

// NewUInt16MultiArrayStampedPublisher creates and returns a new publisher for the
// UInt16MultiArrayStamped
func NewUInt16MultiArrayStampedPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*UInt16MultiArrayStampedPublisher, error) {
	pub, err := node.NewPublisher(topicName, UInt16MultiArrayStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UInt16MultiArrayStampedPublisher{pub}, nil
}

func (p *UInt16MultiArrayStampedPublisher) Publish(msg *UInt16MultiArrayStamped) error {
	return p.Publisher.Publish(msg)
}

// UInt16MultiArrayStampedSubscription wraps humble.Subscription to provide type safe helper
// functions
type UInt16MultiArrayStampedSubscription struct {
	*humble.Subscription
}

// UInt16MultiArrayStampedSubscriptionCallback type is used to provide a subscription
// handler function for a UInt16MultiArrayStampedSubscription.
type UInt16MultiArrayStampedSubscriptionCallback func(msg *UInt16MultiArrayStamped, info *humble.MessageInfo, err error)

// NewUInt16MultiArrayStampedSubscription creates and returns a new subscription for the
// UInt16MultiArrayStamped
func NewUInt16MultiArrayStampedSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback UInt16MultiArrayStampedSubscriptionCallback) (*UInt16MultiArrayStampedSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg UInt16MultiArrayStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, UInt16MultiArrayStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &UInt16MultiArrayStampedSubscription{sub}, nil
}

func (s *UInt16MultiArrayStampedSubscription) TakeMessage(out *UInt16MultiArrayStamped) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneUInt16MultiArrayStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUInt16MultiArrayStampedSlice(dst, src []UInt16MultiArrayStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UInt16MultiArrayStampedTypeSupport humble.MessageTypeSupport = _UInt16MultiArrayStampedTypeSupport{}

type _UInt16MultiArrayStampedTypeSupport struct{}

func (t _UInt16MultiArrayStampedTypeSupport) New() humble.Message {
	return NewUInt16MultiArrayStamped()
}

func (t _UInt16MultiArrayStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__msg__UInt16MultiArrayStamped
	return (unsafe.Pointer)(C.as2_msgs__msg__UInt16MultiArrayStamped__create())
}

func (t _UInt16MultiArrayStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__msg__UInt16MultiArrayStamped__destroy((*C.as2_msgs__msg__UInt16MultiArrayStamped)(pointer_to_free))
}

func (t _UInt16MultiArrayStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*UInt16MultiArrayStamped)
	mem := (*C.as2_msgs__msg__UInt16MultiArrayStamped)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.stamp), &m.Stamp)
	std_msgs_msg.MultiArrayLayoutTypeSupport.AsCStruct(unsafe.Pointer(&mem.layout), &m.Layout)
	humble.Uint16SequenceToC((*humble.CUint16Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _UInt16MultiArrayStampedTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UInt16MultiArrayStamped)
	mem := (*C.as2_msgs__msg__UInt16MultiArrayStamped)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Stamp, unsafe.Pointer(&mem.stamp))
	std_msgs_msg.MultiArrayLayoutTypeSupport.AsGoStruct(&m.Layout, unsafe.Pointer(&mem.layout))
	humble.Uint16SequenceToGo(&m.Data, *(*humble.CUint16Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _UInt16MultiArrayStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__msg__UInt16MultiArrayStamped())
}

type CUInt16MultiArrayStamped = C.as2_msgs__msg__UInt16MultiArrayStamped
type CUInt16MultiArrayStampedSequence = C.as2_msgs__msg__UInt16MultiArrayStamped__Sequence

func UInt16MultiArrayStampedSequenceToGo(goSlice *[]UInt16MultiArrayStamped, cSlice CUInt16MultiArrayStampedSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UInt16MultiArrayStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		UInt16MultiArrayStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func UInt16MultiArrayStampedSequenceToC(cSlice *CUInt16MultiArrayStampedSequence, goSlice []UInt16MultiArrayStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__msg__UInt16MultiArrayStamped)(C.malloc(C.sizeof_struct_as2_msgs__msg__UInt16MultiArrayStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		UInt16MultiArrayStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func UInt16MultiArrayStampedArrayToGo(goSlice []UInt16MultiArrayStamped, cSlice []CUInt16MultiArrayStamped) {
	for i := 0; i < len(cSlice); i++ {
		UInt16MultiArrayStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func UInt16MultiArrayStampedArrayToC(cSlice []CUInt16MultiArrayStamped, goSlice []UInt16MultiArrayStamped) {
	for i := 0; i < len(goSlice); i++ {
		UInt16MultiArrayStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

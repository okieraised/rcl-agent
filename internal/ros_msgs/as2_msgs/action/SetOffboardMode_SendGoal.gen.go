// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/set_offboard_mode.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("as2_msgs/SetOffboardMode_SendGoal", SetOffboardMode_SendGoalTypeSupport)
	humble.RegisterService("as2_msgs/action/SetOffboardMode_SendGoal", SetOffboardMode_SendGoalTypeSupport)
}

type _SetOffboardMode_SendGoalTypeSupport struct {}

func (s _SetOffboardMode_SendGoalTypeSupport) Request() humble.MessageTypeSupport {
	return SetOffboardMode_SendGoal_RequestTypeSupport
}

func (s _SetOffboardMode_SendGoalTypeSupport) Response() humble.MessageTypeSupport {
	return SetOffboardMode_SendGoal_ResponseTypeSupport
}

func (s _SetOffboardMode_SendGoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__SetOffboardMode_SendGoal())
}

// Modifying this variable is undefined behavior.
var SetOffboardMode_SendGoalTypeSupport humble.ServiceTypeSupport = _SetOffboardMode_SendGoalTypeSupport{}

// SetOffboardMode_SendGoalClient wraps humble.Client to provide type safe helper
// functions
type SetOffboardMode_SendGoalClient struct {
	*humble.Client
}

// NewSetOffboardMode_SendGoalClient creates and returns a new client for the
// SetOffboardMode_SendGoal
func NewSetOffboardMode_SendGoalClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*SetOffboardMode_SendGoalClient, error) {
	client, err := node.NewClient(serviceName, SetOffboardMode_SendGoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetOffboardMode_SendGoalClient{client}, nil
}

func (s *SetOffboardMode_SendGoalClient) Send(ctx context.Context, req *SetOffboardMode_SendGoal_Request) (*SetOffboardMode_SendGoal_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetOffboardMode_SendGoal_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetOffboardMode_SendGoalServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s SetOffboardMode_SendGoalServiceResponseSender) SendResponse(resp *SetOffboardMode_SendGoal_Response) error {
	return s.sender.SendResponse(resp)
}

type SetOffboardMode_SendGoalServiceRequestHandler func(*humble.ServiceInfo, *SetOffboardMode_SendGoal_Request, SetOffboardMode_SendGoalServiceResponseSender)

// SetOffboardMode_SendGoalService wraps humble.Service to provide type safe helper
// functions
type SetOffboardMode_SendGoalService struct {
	*humble.Service
}

// NewSetOffboardMode_SendGoalService creates and returns a new service for the
// SetOffboardMode_SendGoal
func NewSetOffboardMode_SendGoalService(node *humble.Node, name string, options *humble.ServiceOptions, handler SetOffboardMode_SendGoalServiceRequestHandler) (*SetOffboardMode_SendGoalService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*SetOffboardMode_SendGoal_Request)
		responseSender := SetOffboardMode_SendGoalServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetOffboardMode_SendGoalTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetOffboardMode_SendGoalService{service}, nil
}
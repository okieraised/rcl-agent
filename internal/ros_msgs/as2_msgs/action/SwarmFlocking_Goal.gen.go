// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/swarm_flocking.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SwarmFlocking_Goal", SwarmFlocking_GoalTypeSupport)
	humble.RegisterMessage("as2_msgs/action/SwarmFlocking_Goal", SwarmFlocking_GoalTypeSupport)
}

type SwarmFlocking_Goal struct {
	VirtualCentroid geometry_msgs_msg.PoseStamped `yaml:"virtual_centroid"` // Offset of the virtual centroid to the following frame. Request
	SwarmFormation  []as2_msgs_msg.PoseWithID     `yaml:"swarm_formation"`  // Pose of the drones with respect to the virtual centroid
	DronesNamespace []string                      `yaml:"drones_namespace"` // Namespaces of the drones in the swarm
}

// NewSwarmFlocking_Goal creates a new SwarmFlocking_Goal with default values.
func NewSwarmFlocking_Goal() *SwarmFlocking_Goal {
	self := SwarmFlocking_Goal{}
	self.SetDefaults()
	return &self
}

func (t *SwarmFlocking_Goal) Clone() *SwarmFlocking_Goal {
	c := &SwarmFlocking_Goal{}
	c.VirtualCentroid = *t.VirtualCentroid.Clone()
	if t.SwarmFormation != nil {
		c.SwarmFormation = make([]as2_msgs_msg.PoseWithID, len(t.SwarmFormation))
		as2_msgs_msg.ClonePoseWithIDSlice(c.SwarmFormation, t.SwarmFormation)
	}
	if t.DronesNamespace != nil {
		c.DronesNamespace = make([]string, len(t.DronesNamespace))
		copy(c.DronesNamespace, t.DronesNamespace)
	}
	return c
}

func (t *SwarmFlocking_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SwarmFlocking_Goal) SetDefaults() {
	t.VirtualCentroid.SetDefaults()
	t.SwarmFormation = nil
	t.DronesNamespace = nil
}

func (t *SwarmFlocking_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return SwarmFlocking_GoalTypeSupport
}

// SwarmFlocking_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type SwarmFlocking_GoalPublisher struct {
	*humble.Publisher
}

// NewSwarmFlocking_GoalPublisher creates and returns a new publisher for the
// SwarmFlocking_Goal
func NewSwarmFlocking_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SwarmFlocking_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, SwarmFlocking_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SwarmFlocking_GoalPublisher{pub}, nil
}

func (p *SwarmFlocking_GoalPublisher) Publish(msg *SwarmFlocking_Goal) error {
	return p.Publisher.Publish(msg)
}

// SwarmFlocking_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type SwarmFlocking_GoalSubscription struct {
	*humble.Subscription
}

// SwarmFlocking_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a SwarmFlocking_GoalSubscription.
type SwarmFlocking_GoalSubscriptionCallback func(msg *SwarmFlocking_Goal, info *humble.MessageInfo, err error)

// NewSwarmFlocking_GoalSubscription creates and returns a new subscription for the
// SwarmFlocking_Goal
func NewSwarmFlocking_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SwarmFlocking_GoalSubscriptionCallback) (*SwarmFlocking_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SwarmFlocking_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SwarmFlocking_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SwarmFlocking_GoalSubscription{sub}, nil
}

func (s *SwarmFlocking_GoalSubscription) TakeMessage(out *SwarmFlocking_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSwarmFlocking_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSwarmFlocking_GoalSlice(dst, src []SwarmFlocking_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SwarmFlocking_GoalTypeSupport humble.MessageTypeSupport = _SwarmFlocking_GoalTypeSupport{}

type _SwarmFlocking_GoalTypeSupport struct{}

func (t _SwarmFlocking_GoalTypeSupport) New() humble.Message {
	return NewSwarmFlocking_Goal()
}

func (t _SwarmFlocking_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__SwarmFlocking_Goal
	return (unsafe.Pointer)(C.as2_msgs__action__SwarmFlocking_Goal__create())
}

func (t _SwarmFlocking_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__SwarmFlocking_Goal__destroy((*C.as2_msgs__action__SwarmFlocking_Goal)(pointer_to_free))
}

func (t _SwarmFlocking_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SwarmFlocking_Goal)
	mem := (*C.as2_msgs__action__SwarmFlocking_Goal)(dst)
	geometry_msgs_msg.PoseStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.virtual_centroid), &m.VirtualCentroid)
	as2_msgs_msg.PoseWithIDSequenceToC((*as2_msgs_msg.CPoseWithIDSequence)(unsafe.Pointer(&mem.swarm_formation)), m.SwarmFormation)
	humble.StringSequenceToC((*humble.CStringSequence)(unsafe.Pointer(&mem.drones_namespace)), m.DronesNamespace)
}

func (t _SwarmFlocking_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SwarmFlocking_Goal)
	mem := (*C.as2_msgs__action__SwarmFlocking_Goal)(ros2_message_buffer)
	geometry_msgs_msg.PoseStampedTypeSupport.AsGoStruct(&m.VirtualCentroid, unsafe.Pointer(&mem.virtual_centroid))
	as2_msgs_msg.PoseWithIDSequenceToGo(&m.SwarmFormation, *(*as2_msgs_msg.CPoseWithIDSequence)(unsafe.Pointer(&mem.swarm_formation)))
	humble.StringSequenceToGo(&m.DronesNamespace, *(*humble.CStringSequence)(unsafe.Pointer(&mem.drones_namespace)))
}

func (t _SwarmFlocking_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__SwarmFlocking_Goal())
}

type CSwarmFlocking_Goal = C.as2_msgs__action__SwarmFlocking_Goal
type CSwarmFlocking_GoalSequence = C.as2_msgs__action__SwarmFlocking_Goal__Sequence

func SwarmFlocking_GoalSequenceToGo(goSlice *[]SwarmFlocking_Goal, cSlice CSwarmFlocking_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SwarmFlocking_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SwarmFlocking_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SwarmFlocking_GoalSequenceToC(cSlice *CSwarmFlocking_GoalSequence, goSlice []SwarmFlocking_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__SwarmFlocking_Goal)(C.malloc(C.sizeof_struct_as2_msgs__action__SwarmFlocking_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SwarmFlocking_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SwarmFlocking_GoalArrayToGo(goSlice []SwarmFlocking_Goal, cSlice []CSwarmFlocking_Goal) {
	for i := 0; i < len(cSlice); i++ {
		SwarmFlocking_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SwarmFlocking_GoalArrayToC(cSlice []CSwarmFlocking_Goal, goSlice []SwarmFlocking_Goal) {
	for i := 0; i < len(goSlice); i++ {
		SwarmFlocking_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/navigate_to_point.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/NavigateToPoint_SendGoal_Response", NavigateToPoint_SendGoal_ResponseTypeSupport)
	humble.RegisterMessage("as2_msgs/action/NavigateToPoint_SendGoal_Response", NavigateToPoint_SendGoal_ResponseTypeSupport)
}

type NavigateToPoint_SendGoal_Response struct {
	Accepted bool                        `yaml:"accepted"`
	Stamp    builtin_interfaces_msg.Time `yaml:"stamp"`
}

// NewNavigateToPoint_SendGoal_Response creates a new NavigateToPoint_SendGoal_Response with default values.
func NewNavigateToPoint_SendGoal_Response() *NavigateToPoint_SendGoal_Response {
	self := NavigateToPoint_SendGoal_Response{}
	self.SetDefaults()
	return &self
}

func (t *NavigateToPoint_SendGoal_Response) Clone() *NavigateToPoint_SendGoal_Response {
	c := &NavigateToPoint_SendGoal_Response{}
	c.Accepted = t.Accepted
	c.Stamp = *t.Stamp.Clone()
	return c
}

func (t *NavigateToPoint_SendGoal_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *NavigateToPoint_SendGoal_Response) SetDefaults() {
	t.Accepted = false
	t.Stamp.SetDefaults()
}

func (t *NavigateToPoint_SendGoal_Response) GetTypeSupport() humble.MessageTypeSupport {
	return NavigateToPoint_SendGoal_ResponseTypeSupport
}
func (t *NavigateToPoint_SendGoal_Response) GetGoalAccepted() bool {
	return t.Accepted
}

// NavigateToPoint_SendGoal_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type NavigateToPoint_SendGoal_ResponsePublisher struct {
	*humble.Publisher
}

// NewNavigateToPoint_SendGoal_ResponsePublisher creates and returns a new publisher for the
// NavigateToPoint_SendGoal_Response
func NewNavigateToPoint_SendGoal_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*NavigateToPoint_SendGoal_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, NavigateToPoint_SendGoal_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NavigateToPoint_SendGoal_ResponsePublisher{pub}, nil
}

func (p *NavigateToPoint_SendGoal_ResponsePublisher) Publish(msg *NavigateToPoint_SendGoal_Response) error {
	return p.Publisher.Publish(msg)
}

// NavigateToPoint_SendGoal_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type NavigateToPoint_SendGoal_ResponseSubscription struct {
	*humble.Subscription
}

// NavigateToPoint_SendGoal_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a NavigateToPoint_SendGoal_ResponseSubscription.
type NavigateToPoint_SendGoal_ResponseSubscriptionCallback func(msg *NavigateToPoint_SendGoal_Response, info *humble.MessageInfo, err error)

// NewNavigateToPoint_SendGoal_ResponseSubscription creates and returns a new subscription for the
// NavigateToPoint_SendGoal_Response
func NewNavigateToPoint_SendGoal_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback NavigateToPoint_SendGoal_ResponseSubscriptionCallback) (*NavigateToPoint_SendGoal_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg NavigateToPoint_SendGoal_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, NavigateToPoint_SendGoal_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &NavigateToPoint_SendGoal_ResponseSubscription{sub}, nil
}

func (s *NavigateToPoint_SendGoal_ResponseSubscription) TakeMessage(out *NavigateToPoint_SendGoal_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneNavigateToPoint_SendGoal_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNavigateToPoint_SendGoal_ResponseSlice(dst, src []NavigateToPoint_SendGoal_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NavigateToPoint_SendGoal_ResponseTypeSupport humble.MessageTypeSupport = _NavigateToPoint_SendGoal_ResponseTypeSupport{}

type _NavigateToPoint_SendGoal_ResponseTypeSupport struct{}

func (t _NavigateToPoint_SendGoal_ResponseTypeSupport) New() humble.Message {
	return NewNavigateToPoint_SendGoal_Response()
}

func (t _NavigateToPoint_SendGoal_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__NavigateToPoint_SendGoal_Response
	return (unsafe.Pointer)(C.as2_msgs__action__NavigateToPoint_SendGoal_Response__create())
}

func (t _NavigateToPoint_SendGoal_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__NavigateToPoint_SendGoal_Response__destroy((*C.as2_msgs__action__NavigateToPoint_SendGoal_Response)(pointer_to_free))
}

func (t _NavigateToPoint_SendGoal_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*NavigateToPoint_SendGoal_Response)
	mem := (*C.as2_msgs__action__NavigateToPoint_SendGoal_Response)(dst)
	mem.accepted = C.bool(m.Accepted)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.stamp), &m.Stamp)
}

func (t _NavigateToPoint_SendGoal_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NavigateToPoint_SendGoal_Response)
	mem := (*C.as2_msgs__action__NavigateToPoint_SendGoal_Response)(ros2_message_buffer)
	m.Accepted = bool(mem.accepted)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Stamp, unsafe.Pointer(&mem.stamp))
}

func (t _NavigateToPoint_SendGoal_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__NavigateToPoint_SendGoal_Response())
}

type CNavigateToPoint_SendGoal_Response = C.as2_msgs__action__NavigateToPoint_SendGoal_Response
type CNavigateToPoint_SendGoal_ResponseSequence = C.as2_msgs__action__NavigateToPoint_SendGoal_Response__Sequence

func NavigateToPoint_SendGoal_ResponseSequenceToGo(goSlice *[]NavigateToPoint_SendGoal_Response, cSlice CNavigateToPoint_SendGoal_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NavigateToPoint_SendGoal_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		NavigateToPoint_SendGoal_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func NavigateToPoint_SendGoal_ResponseSequenceToC(cSlice *CNavigateToPoint_SendGoal_ResponseSequence, goSlice []NavigateToPoint_SendGoal_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__NavigateToPoint_SendGoal_Response)(C.malloc(C.sizeof_struct_as2_msgs__action__NavigateToPoint_SendGoal_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		NavigateToPoint_SendGoal_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func NavigateToPoint_SendGoal_ResponseArrayToGo(goSlice []NavigateToPoint_SendGoal_Response, cSlice []CNavigateToPoint_SendGoal_Response) {
	for i := 0; i < len(cSlice); i++ {
		NavigateToPoint_SendGoal_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func NavigateToPoint_SendGoal_ResponseArrayToC(cSlice []CNavigateToPoint_SendGoal_Response, goSlice []NavigateToPoint_SendGoal_Response) {
	for i := 0; i < len(goSlice); i++ {
		NavigateToPoint_SendGoal_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

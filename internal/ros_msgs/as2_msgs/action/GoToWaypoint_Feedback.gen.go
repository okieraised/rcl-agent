// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/go_to_waypoint.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GoToWaypoint_Feedback", GoToWaypoint_FeedbackTypeSupport)
	humble.RegisterMessage("as2_msgs/action/GoToWaypoint_Feedback", GoToWaypoint_FeedbackTypeSupport)
}

type GoToWaypoint_Feedback struct {
	ActualSpeed          float32 `yaml:"actual_speed"`            // Actual speed (m/s). Feedback
	ActualDistanceToGoal float32 `yaml:"actual_distance_to_goal"` // Distance to goal (m)
}

// NewGoToWaypoint_Feedback creates a new GoToWaypoint_Feedback with default values.
func NewGoToWaypoint_Feedback() *GoToWaypoint_Feedback {
	self := GoToWaypoint_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *GoToWaypoint_Feedback) Clone() *GoToWaypoint_Feedback {
	c := &GoToWaypoint_Feedback{}
	c.ActualSpeed = t.ActualSpeed
	c.ActualDistanceToGoal = t.ActualDistanceToGoal
	return c
}

func (t *GoToWaypoint_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GoToWaypoint_Feedback) SetDefaults() {
	t.ActualSpeed = 0
	t.ActualDistanceToGoal = 0
}

func (t *GoToWaypoint_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return GoToWaypoint_FeedbackTypeSupport
}

// GoToWaypoint_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type GoToWaypoint_FeedbackPublisher struct {
	*humble.Publisher
}

// NewGoToWaypoint_FeedbackPublisher creates and returns a new publisher for the
// GoToWaypoint_Feedback
func NewGoToWaypoint_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GoToWaypoint_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, GoToWaypoint_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GoToWaypoint_FeedbackPublisher{pub}, nil
}

func (p *GoToWaypoint_FeedbackPublisher) Publish(msg *GoToWaypoint_Feedback) error {
	return p.Publisher.Publish(msg)
}

// GoToWaypoint_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type GoToWaypoint_FeedbackSubscription struct {
	*humble.Subscription
}

// GoToWaypoint_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a GoToWaypoint_FeedbackSubscription.
type GoToWaypoint_FeedbackSubscriptionCallback func(msg *GoToWaypoint_Feedback, info *humble.MessageInfo, err error)

// NewGoToWaypoint_FeedbackSubscription creates and returns a new subscription for the
// GoToWaypoint_Feedback
func NewGoToWaypoint_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GoToWaypoint_FeedbackSubscriptionCallback) (*GoToWaypoint_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GoToWaypoint_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GoToWaypoint_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GoToWaypoint_FeedbackSubscription{sub}, nil
}

func (s *GoToWaypoint_FeedbackSubscription) TakeMessage(out *GoToWaypoint_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGoToWaypoint_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGoToWaypoint_FeedbackSlice(dst, src []GoToWaypoint_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GoToWaypoint_FeedbackTypeSupport humble.MessageTypeSupport = _GoToWaypoint_FeedbackTypeSupport{}

type _GoToWaypoint_FeedbackTypeSupport struct{}

func (t _GoToWaypoint_FeedbackTypeSupport) New() humble.Message {
	return NewGoToWaypoint_Feedback()
}

func (t _GoToWaypoint_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__GoToWaypoint_Feedback
	return (unsafe.Pointer)(C.as2_msgs__action__GoToWaypoint_Feedback__create())
}

func (t _GoToWaypoint_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__GoToWaypoint_Feedback__destroy((*C.as2_msgs__action__GoToWaypoint_Feedback)(pointer_to_free))
}

func (t _GoToWaypoint_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GoToWaypoint_Feedback)
	mem := (*C.as2_msgs__action__GoToWaypoint_Feedback)(dst)
	mem.actual_speed = C.float(m.ActualSpeed)
	mem.actual_distance_to_goal = C.float(m.ActualDistanceToGoal)
}

func (t _GoToWaypoint_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GoToWaypoint_Feedback)
	mem := (*C.as2_msgs__action__GoToWaypoint_Feedback)(ros2_message_buffer)
	m.ActualSpeed = float32(mem.actual_speed)
	m.ActualDistanceToGoal = float32(mem.actual_distance_to_goal)
}

func (t _GoToWaypoint_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__GoToWaypoint_Feedback())
}

type CGoToWaypoint_Feedback = C.as2_msgs__action__GoToWaypoint_Feedback
type CGoToWaypoint_FeedbackSequence = C.as2_msgs__action__GoToWaypoint_Feedback__Sequence

func GoToWaypoint_FeedbackSequenceToGo(goSlice *[]GoToWaypoint_Feedback, cSlice CGoToWaypoint_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GoToWaypoint_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GoToWaypoint_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GoToWaypoint_FeedbackSequenceToC(cSlice *CGoToWaypoint_FeedbackSequence, goSlice []GoToWaypoint_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__GoToWaypoint_Feedback)(C.malloc(C.sizeof_struct_as2_msgs__action__GoToWaypoint_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GoToWaypoint_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GoToWaypoint_FeedbackArrayToGo(goSlice []GoToWaypoint_Feedback, cSlice []CGoToWaypoint_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		GoToWaypoint_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GoToWaypoint_FeedbackArrayToC(cSlice []CGoToWaypoint_Feedback, goSlice []GoToWaypoint_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		GoToWaypoint_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

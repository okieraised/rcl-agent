// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/generate_polynomial_trajectory.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GeneratePolynomialTrajectory_Feedback", GeneratePolynomialTrajectory_FeedbackTypeSupport)
	humble.RegisterMessage("as2_msgs/action/GeneratePolynomialTrajectory_Feedback", GeneratePolynomialTrajectory_FeedbackTypeSupport)
}

type GeneratePolynomialTrajectory_Feedback struct {
	NextWaypointId     string `yaml:"next_waypoint_id"`    // Next waypoint id in path to follow. Feedback
	RemainingWaypoints uint16 `yaml:"remaining_waypoints"` // Number of remaining waypoints to follow
}

// NewGeneratePolynomialTrajectory_Feedback creates a new GeneratePolynomialTrajectory_Feedback with default values.
func NewGeneratePolynomialTrajectory_Feedback() *GeneratePolynomialTrajectory_Feedback {
	self := GeneratePolynomialTrajectory_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *GeneratePolynomialTrajectory_Feedback) Clone() *GeneratePolynomialTrajectory_Feedback {
	c := &GeneratePolynomialTrajectory_Feedback{}
	c.NextWaypointId = t.NextWaypointId
	c.RemainingWaypoints = t.RemainingWaypoints
	return c
}

func (t *GeneratePolynomialTrajectory_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GeneratePolynomialTrajectory_Feedback) SetDefaults() {
	t.NextWaypointId = ""
	t.RemainingWaypoints = 0
}

func (t *GeneratePolynomialTrajectory_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return GeneratePolynomialTrajectory_FeedbackTypeSupport
}

// GeneratePolynomialTrajectory_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type GeneratePolynomialTrajectory_FeedbackPublisher struct {
	*humble.Publisher
}

// NewGeneratePolynomialTrajectory_FeedbackPublisher creates and returns a new publisher for the
// GeneratePolynomialTrajectory_Feedback
func NewGeneratePolynomialTrajectory_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GeneratePolynomialTrajectory_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, GeneratePolynomialTrajectory_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeneratePolynomialTrajectory_FeedbackPublisher{pub}, nil
}

func (p *GeneratePolynomialTrajectory_FeedbackPublisher) Publish(msg *GeneratePolynomialTrajectory_Feedback) error {
	return p.Publisher.Publish(msg)
}

// GeneratePolynomialTrajectory_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type GeneratePolynomialTrajectory_FeedbackSubscription struct {
	*humble.Subscription
}

// GeneratePolynomialTrajectory_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a GeneratePolynomialTrajectory_FeedbackSubscription.
type GeneratePolynomialTrajectory_FeedbackSubscriptionCallback func(msg *GeneratePolynomialTrajectory_Feedback, info *humble.MessageInfo, err error)

// NewGeneratePolynomialTrajectory_FeedbackSubscription creates and returns a new subscription for the
// GeneratePolynomialTrajectory_Feedback
func NewGeneratePolynomialTrajectory_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GeneratePolynomialTrajectory_FeedbackSubscriptionCallback) (*GeneratePolynomialTrajectory_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GeneratePolynomialTrajectory_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GeneratePolynomialTrajectory_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeneratePolynomialTrajectory_FeedbackSubscription{sub}, nil
}

func (s *GeneratePolynomialTrajectory_FeedbackSubscription) TakeMessage(out *GeneratePolynomialTrajectory_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeneratePolynomialTrajectory_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeneratePolynomialTrajectory_FeedbackSlice(dst, src []GeneratePolynomialTrajectory_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeneratePolynomialTrajectory_FeedbackTypeSupport humble.MessageTypeSupport = _GeneratePolynomialTrajectory_FeedbackTypeSupport{}

type _GeneratePolynomialTrajectory_FeedbackTypeSupport struct{}

func (t _GeneratePolynomialTrajectory_FeedbackTypeSupport) New() humble.Message {
	return NewGeneratePolynomialTrajectory_Feedback()
}

func (t _GeneratePolynomialTrajectory_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback
	return (unsafe.Pointer)(C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback__create())
}

func (t _GeneratePolynomialTrajectory_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback__destroy((*C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback)(pointer_to_free))
}

func (t _GeneratePolynomialTrajectory_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GeneratePolynomialTrajectory_Feedback)
	mem := (*C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.next_waypoint_id), m.NextWaypointId)
	mem.remaining_waypoints = C.uint16_t(m.RemainingWaypoints)
}

func (t _GeneratePolynomialTrajectory_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeneratePolynomialTrajectory_Feedback)
	mem := (*C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.NextWaypointId, unsafe.Pointer(&mem.next_waypoint_id))
	m.RemainingWaypoints = uint16(mem.remaining_waypoints)
}

func (t _GeneratePolynomialTrajectory_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__GeneratePolynomialTrajectory_Feedback())
}

type CGeneratePolynomialTrajectory_Feedback = C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback
type CGeneratePolynomialTrajectory_FeedbackSequence = C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback__Sequence

func GeneratePolynomialTrajectory_FeedbackSequenceToGo(goSlice *[]GeneratePolynomialTrajectory_Feedback, cSlice CGeneratePolynomialTrajectory_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeneratePolynomialTrajectory_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeneratePolynomialTrajectory_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GeneratePolynomialTrajectory_FeedbackSequenceToC(cSlice *CGeneratePolynomialTrajectory_FeedbackSequence, goSlice []GeneratePolynomialTrajectory_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__GeneratePolynomialTrajectory_Feedback)(C.malloc(C.sizeof_struct_as2_msgs__action__GeneratePolynomialTrajectory_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeneratePolynomialTrajectory_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GeneratePolynomialTrajectory_FeedbackArrayToGo(goSlice []GeneratePolynomialTrajectory_Feedback, cSlice []CGeneratePolynomialTrajectory_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		GeneratePolynomialTrajectory_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GeneratePolynomialTrajectory_FeedbackArrayToC(cSlice []CGeneratePolynomialTrajectory_Feedback, goSlice []GeneratePolynomialTrajectory_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		GeneratePolynomialTrajectory_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

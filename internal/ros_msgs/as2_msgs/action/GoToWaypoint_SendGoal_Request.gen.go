// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	unique_identifier_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/unique_identifier_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/go_to_waypoint.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GoToWaypoint_SendGoal_Request", GoToWaypoint_SendGoal_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/action/GoToWaypoint_SendGoal_Request", GoToWaypoint_SendGoal_RequestTypeSupport)
}

type GoToWaypoint_SendGoal_Request struct {
	GoalID unique_identifier_msgs_msg.UUID `yaml:"goal_id"`
	Goal   GoToWaypoint_Goal               `yaml:"goal"`
}

// NewGoToWaypoint_SendGoal_Request creates a new GoToWaypoint_SendGoal_Request with default values.
func NewGoToWaypoint_SendGoal_Request() *GoToWaypoint_SendGoal_Request {
	self := GoToWaypoint_SendGoal_Request{}
	self.SetDefaults()
	return &self
}

func (t *GoToWaypoint_SendGoal_Request) Clone() *GoToWaypoint_SendGoal_Request {
	c := &GoToWaypoint_SendGoal_Request{}
	c.GoalID = *t.GoalID.Clone()
	c.Goal = *t.Goal.Clone()
	return c
}

func (t *GoToWaypoint_SendGoal_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GoToWaypoint_SendGoal_Request) SetDefaults() {
	t.GoalID.SetDefaults()
	t.Goal.SetDefaults()
}

func (t *GoToWaypoint_SendGoal_Request) GetTypeSupport() humble.MessageTypeSupport {
	return GoToWaypoint_SendGoal_RequestTypeSupport
}
func (t *GoToWaypoint_SendGoal_Request) GetGoalID() *humble.GoalID {
	return (*humble.GoalID)(&t.GoalID.Uuid)
}

func (t *GoToWaypoint_SendGoal_Request) SetGoalID(id *humble.GoalID) {
	t.GoalID.Uuid = *id
}
func (t *GoToWaypoint_SendGoal_Request) GetGoalDescription() humble.Message {
	return &t.Goal
}

func (t *GoToWaypoint_SendGoal_Request) SetGoalDescription(desc humble.Message) {
	t.Goal = *desc.(*GoToWaypoint_Goal)
}

// GoToWaypoint_SendGoal_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type GoToWaypoint_SendGoal_RequestPublisher struct {
	*humble.Publisher
}

// NewGoToWaypoint_SendGoal_RequestPublisher creates and returns a new publisher for the
// GoToWaypoint_SendGoal_Request
func NewGoToWaypoint_SendGoal_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GoToWaypoint_SendGoal_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, GoToWaypoint_SendGoal_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GoToWaypoint_SendGoal_RequestPublisher{pub}, nil
}

func (p *GoToWaypoint_SendGoal_RequestPublisher) Publish(msg *GoToWaypoint_SendGoal_Request) error {
	return p.Publisher.Publish(msg)
}

// GoToWaypoint_SendGoal_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type GoToWaypoint_SendGoal_RequestSubscription struct {
	*humble.Subscription
}

// GoToWaypoint_SendGoal_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GoToWaypoint_SendGoal_RequestSubscription.
type GoToWaypoint_SendGoal_RequestSubscriptionCallback func(msg *GoToWaypoint_SendGoal_Request, info *humble.MessageInfo, err error)

// NewGoToWaypoint_SendGoal_RequestSubscription creates and returns a new subscription for the
// GoToWaypoint_SendGoal_Request
func NewGoToWaypoint_SendGoal_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GoToWaypoint_SendGoal_RequestSubscriptionCallback) (*GoToWaypoint_SendGoal_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GoToWaypoint_SendGoal_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GoToWaypoint_SendGoal_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GoToWaypoint_SendGoal_RequestSubscription{sub}, nil
}

func (s *GoToWaypoint_SendGoal_RequestSubscription) TakeMessage(out *GoToWaypoint_SendGoal_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGoToWaypoint_SendGoal_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGoToWaypoint_SendGoal_RequestSlice(dst, src []GoToWaypoint_SendGoal_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GoToWaypoint_SendGoal_RequestTypeSupport humble.MessageTypeSupport = _GoToWaypoint_SendGoal_RequestTypeSupport{}

type _GoToWaypoint_SendGoal_RequestTypeSupport struct{}

func (t _GoToWaypoint_SendGoal_RequestTypeSupport) New() humble.Message {
	return NewGoToWaypoint_SendGoal_Request()
}

func (t _GoToWaypoint_SendGoal_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__GoToWaypoint_SendGoal_Request
	return (unsafe.Pointer)(C.as2_msgs__action__GoToWaypoint_SendGoal_Request__create())
}

func (t _GoToWaypoint_SendGoal_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__GoToWaypoint_SendGoal_Request__destroy((*C.as2_msgs__action__GoToWaypoint_SendGoal_Request)(pointer_to_free))
}

func (t _GoToWaypoint_SendGoal_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GoToWaypoint_SendGoal_Request)
	mem := (*C.as2_msgs__action__GoToWaypoint_SendGoal_Request)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_id), &m.GoalID)
	GoToWaypoint_GoalTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal), &m.Goal)
}

func (t _GoToWaypoint_SendGoal_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GoToWaypoint_SendGoal_Request)
	mem := (*C.as2_msgs__action__GoToWaypoint_SendGoal_Request)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.GoalID, unsafe.Pointer(&mem.goal_id))
	GoToWaypoint_GoalTypeSupport.AsGoStruct(&m.Goal, unsafe.Pointer(&mem.goal))
}

func (t _GoToWaypoint_SendGoal_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__GoToWaypoint_SendGoal_Request())
}

type CGoToWaypoint_SendGoal_Request = C.as2_msgs__action__GoToWaypoint_SendGoal_Request
type CGoToWaypoint_SendGoal_RequestSequence = C.as2_msgs__action__GoToWaypoint_SendGoal_Request__Sequence

func GoToWaypoint_SendGoal_RequestSequenceToGo(goSlice *[]GoToWaypoint_SendGoal_Request, cSlice CGoToWaypoint_SendGoal_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GoToWaypoint_SendGoal_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GoToWaypoint_SendGoal_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GoToWaypoint_SendGoal_RequestSequenceToC(cSlice *CGoToWaypoint_SendGoal_RequestSequence, goSlice []GoToWaypoint_SendGoal_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__GoToWaypoint_SendGoal_Request)(C.malloc(C.sizeof_struct_as2_msgs__action__GoToWaypoint_SendGoal_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GoToWaypoint_SendGoal_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GoToWaypoint_SendGoal_RequestArrayToGo(goSlice []GoToWaypoint_SendGoal_Request, cSlice []CGoToWaypoint_SendGoal_Request) {
	for i := 0; i < len(cSlice); i++ {
		GoToWaypoint_SendGoal_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GoToWaypoint_SendGoal_RequestArrayToC(cSlice []CGoToWaypoint_SendGoal_Request, goSlice []GoToWaypoint_SendGoal_Request) {
	for i := 0; i < len(goSlice); i++ {
		GoToWaypoint_SendGoal_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/follow_reference.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/FollowReference_Result", FollowReference_ResultTypeSupport)
	humble.RegisterMessage("as2_msgs/action/FollowReference_Result", FollowReference_ResultTypeSupport)
}

type FollowReference_Result struct {
	FollowReferenceSuccess bool `yaml:"follow_reference_success"` // False if failed to takeoff. Result
}

// NewFollowReference_Result creates a new FollowReference_Result with default values.
func NewFollowReference_Result() *FollowReference_Result {
	self := FollowReference_Result{}
	self.SetDefaults()
	return &self
}

func (t *FollowReference_Result) Clone() *FollowReference_Result {
	c := &FollowReference_Result{}
	c.FollowReferenceSuccess = t.FollowReferenceSuccess
	return c
}

func (t *FollowReference_Result) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *FollowReference_Result) SetDefaults() {
	t.FollowReferenceSuccess = false
}

func (t *FollowReference_Result) GetTypeSupport() humble.MessageTypeSupport {
	return FollowReference_ResultTypeSupport
}

// FollowReference_ResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type FollowReference_ResultPublisher struct {
	*humble.Publisher
}

// NewFollowReference_ResultPublisher creates and returns a new publisher for the
// FollowReference_Result
func NewFollowReference_ResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*FollowReference_ResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, FollowReference_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowReference_ResultPublisher{pub}, nil
}

func (p *FollowReference_ResultPublisher) Publish(msg *FollowReference_Result) error {
	return p.Publisher.Publish(msg)
}

// FollowReference_ResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type FollowReference_ResultSubscription struct {
	*humble.Subscription
}

// FollowReference_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a FollowReference_ResultSubscription.
type FollowReference_ResultSubscriptionCallback func(msg *FollowReference_Result, info *humble.MessageInfo, err error)

// NewFollowReference_ResultSubscription creates and returns a new subscription for the
// FollowReference_Result
func NewFollowReference_ResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback FollowReference_ResultSubscriptionCallback) (*FollowReference_ResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg FollowReference_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, FollowReference_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowReference_ResultSubscription{sub}, nil
}

func (s *FollowReference_ResultSubscription) TakeMessage(out *FollowReference_Result) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowReference_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowReference_ResultSlice(dst, src []FollowReference_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowReference_ResultTypeSupport humble.MessageTypeSupport = _FollowReference_ResultTypeSupport{}

type _FollowReference_ResultTypeSupport struct{}

func (t _FollowReference_ResultTypeSupport) New() humble.Message {
	return NewFollowReference_Result()
}

func (t _FollowReference_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__FollowReference_Result
	return (unsafe.Pointer)(C.as2_msgs__action__FollowReference_Result__create())
}

func (t _FollowReference_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__FollowReference_Result__destroy((*C.as2_msgs__action__FollowReference_Result)(pointer_to_free))
}

func (t _FollowReference_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*FollowReference_Result)
	mem := (*C.as2_msgs__action__FollowReference_Result)(dst)
	mem.follow_reference_success = C.bool(m.FollowReferenceSuccess)
}

func (t _FollowReference_ResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowReference_Result)
	mem := (*C.as2_msgs__action__FollowReference_Result)(ros2_message_buffer)
	m.FollowReferenceSuccess = bool(mem.follow_reference_success)
}

func (t _FollowReference_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__FollowReference_Result())
}

type CFollowReference_Result = C.as2_msgs__action__FollowReference_Result
type CFollowReference_ResultSequence = C.as2_msgs__action__FollowReference_Result__Sequence

func FollowReference_ResultSequenceToGo(goSlice *[]FollowReference_Result, cSlice CFollowReference_ResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowReference_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowReference_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func FollowReference_ResultSequenceToC(cSlice *CFollowReference_ResultSequence, goSlice []FollowReference_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__FollowReference_Result)(C.malloc(C.sizeof_struct_as2_msgs__action__FollowReference_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowReference_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func FollowReference_ResultArrayToGo(goSlice []FollowReference_Result, cSlice []CFollowReference_Result) {
	for i := 0; i < len(cSlice); i++ {
		FollowReference_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func FollowReference_ResultArrayToC(cSlice []CFollowReference_Result, goSlice []FollowReference_Result) {
	for i := 0; i < len(goSlice); i++ {
		FollowReference_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

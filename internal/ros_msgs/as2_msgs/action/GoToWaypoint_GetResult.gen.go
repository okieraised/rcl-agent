// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/go_to_waypoint.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("as2_msgs/GoToWaypoint_GetResult", GoToWaypoint_GetResultTypeSupport)
	humble.RegisterService("as2_msgs/action/GoToWaypoint_GetResult", GoToWaypoint_GetResultTypeSupport)
}

type _GoToWaypoint_GetResultTypeSupport struct{}

func (s _GoToWaypoint_GetResultTypeSupport) Request() humble.MessageTypeSupport {
	return GoToWaypoint_GetResult_RequestTypeSupport
}

func (s _GoToWaypoint_GetResultTypeSupport) Response() humble.MessageTypeSupport {
	return GoToWaypoint_GetResult_ResponseTypeSupport
}

func (s _GoToWaypoint_GetResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__GoToWaypoint_GetResult())
}

// Modifying this variable is undefined behavior.
var GoToWaypoint_GetResultTypeSupport humble.ServiceTypeSupport = _GoToWaypoint_GetResultTypeSupport{}

// GoToWaypoint_GetResultClient wraps humble.Client to provide type safe helper
// functions
type GoToWaypoint_GetResultClient struct {
	*humble.Client
}

// NewGoToWaypoint_GetResultClient creates and returns a new client for the
// GoToWaypoint_GetResult
func NewGoToWaypoint_GetResultClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*GoToWaypoint_GetResultClient, error) {
	client, err := node.NewClient(serviceName, GoToWaypoint_GetResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GoToWaypoint_GetResultClient{client}, nil
}

func (s *GoToWaypoint_GetResultClient) Send(ctx context.Context, req *GoToWaypoint_GetResult_Request) (*GoToWaypoint_GetResult_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GoToWaypoint_GetResult_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GoToWaypoint_GetResultServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s GoToWaypoint_GetResultServiceResponseSender) SendResponse(resp *GoToWaypoint_GetResult_Response) error {
	return s.sender.SendResponse(resp)
}

type GoToWaypoint_GetResultServiceRequestHandler func(*humble.ServiceInfo, *GoToWaypoint_GetResult_Request, GoToWaypoint_GetResultServiceResponseSender)

// GoToWaypoint_GetResultService wraps humble.Service to provide type safe helper
// functions
type GoToWaypoint_GetResultService struct {
	*humble.Service
}

// NewGoToWaypoint_GetResultService creates and returns a new service for the
// GoToWaypoint_GetResult
func NewGoToWaypoint_GetResultService(node *humble.Node, name string, options *humble.ServiceOptions, handler GoToWaypoint_GetResultServiceRequestHandler) (*GoToWaypoint_GetResultService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*GoToWaypoint_GetResult_Request)
		responseSender := GoToWaypoint_GetResultServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GoToWaypoint_GetResultTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GoToWaypoint_GetResultService{service}, nil
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/navigate_to_point.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/NavigateToPoint_Feedback", NavigateToPoint_FeedbackTypeSupport)
	humble.RegisterMessage("as2_msgs/action/NavigateToPoint_Feedback", NavigateToPoint_FeedbackTypeSupport)
}

type NavigateToPoint_Feedback struct {
	CurrentPose            geometry_msgs_msg.PoseStamped   `yaml:"current_pose"`             // Current pose (m). Feedback
	CurrentSpeed           geometry_msgs_msg.TwistStamped  `yaml:"current_speed"`            // Current speed (m/s)
	NavigationTime         builtin_interfaces_msg.Duration `yaml:"navigation_time"`          // Time from departure (s)
	EstimatedTimeRemaining builtin_interfaces_msg.Duration `yaml:"estimated_time_remaining"` // Time to goal (s)
	DistanceRemaining      float32                         `yaml:"distance_remaining"`       // Distance to goal (m)
}

// NewNavigateToPoint_Feedback creates a new NavigateToPoint_Feedback with default values.
func NewNavigateToPoint_Feedback() *NavigateToPoint_Feedback {
	self := NavigateToPoint_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *NavigateToPoint_Feedback) Clone() *NavigateToPoint_Feedback {
	c := &NavigateToPoint_Feedback{}
	c.CurrentPose = *t.CurrentPose.Clone()
	c.CurrentSpeed = *t.CurrentSpeed.Clone()
	c.NavigationTime = *t.NavigationTime.Clone()
	c.EstimatedTimeRemaining = *t.EstimatedTimeRemaining.Clone()
	c.DistanceRemaining = t.DistanceRemaining
	return c
}

func (t *NavigateToPoint_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *NavigateToPoint_Feedback) SetDefaults() {
	t.CurrentPose.SetDefaults()
	t.CurrentSpeed.SetDefaults()
	t.NavigationTime.SetDefaults()
	t.EstimatedTimeRemaining.SetDefaults()
	t.DistanceRemaining = 0
}

func (t *NavigateToPoint_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return NavigateToPoint_FeedbackTypeSupport
}

// NavigateToPoint_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type NavigateToPoint_FeedbackPublisher struct {
	*humble.Publisher
}

// NewNavigateToPoint_FeedbackPublisher creates and returns a new publisher for the
// NavigateToPoint_Feedback
func NewNavigateToPoint_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*NavigateToPoint_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, NavigateToPoint_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NavigateToPoint_FeedbackPublisher{pub}, nil
}

func (p *NavigateToPoint_FeedbackPublisher) Publish(msg *NavigateToPoint_Feedback) error {
	return p.Publisher.Publish(msg)
}

// NavigateToPoint_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type NavigateToPoint_FeedbackSubscription struct {
	*humble.Subscription
}

// NavigateToPoint_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a NavigateToPoint_FeedbackSubscription.
type NavigateToPoint_FeedbackSubscriptionCallback func(msg *NavigateToPoint_Feedback, info *humble.MessageInfo, err error)

// NewNavigateToPoint_FeedbackSubscription creates and returns a new subscription for the
// NavigateToPoint_Feedback
func NewNavigateToPoint_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback NavigateToPoint_FeedbackSubscriptionCallback) (*NavigateToPoint_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg NavigateToPoint_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, NavigateToPoint_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &NavigateToPoint_FeedbackSubscription{sub}, nil
}

func (s *NavigateToPoint_FeedbackSubscription) TakeMessage(out *NavigateToPoint_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneNavigateToPoint_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNavigateToPoint_FeedbackSlice(dst, src []NavigateToPoint_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NavigateToPoint_FeedbackTypeSupport humble.MessageTypeSupport = _NavigateToPoint_FeedbackTypeSupport{}

type _NavigateToPoint_FeedbackTypeSupport struct{}

func (t _NavigateToPoint_FeedbackTypeSupport) New() humble.Message {
	return NewNavigateToPoint_Feedback()
}

func (t _NavigateToPoint_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__NavigateToPoint_Feedback
	return (unsafe.Pointer)(C.as2_msgs__action__NavigateToPoint_Feedback__create())
}

func (t _NavigateToPoint_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__NavigateToPoint_Feedback__destroy((*C.as2_msgs__action__NavigateToPoint_Feedback)(pointer_to_free))
}

func (t _NavigateToPoint_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*NavigateToPoint_Feedback)
	mem := (*C.as2_msgs__action__NavigateToPoint_Feedback)(dst)
	geometry_msgs_msg.PoseStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.current_pose), &m.CurrentPose)
	geometry_msgs_msg.TwistStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.current_speed), &m.CurrentSpeed)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.navigation_time), &m.NavigationTime)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.estimated_time_remaining), &m.EstimatedTimeRemaining)
	mem.distance_remaining = C.float(m.DistanceRemaining)
}

func (t _NavigateToPoint_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NavigateToPoint_Feedback)
	mem := (*C.as2_msgs__action__NavigateToPoint_Feedback)(ros2_message_buffer)
	geometry_msgs_msg.PoseStampedTypeSupport.AsGoStruct(&m.CurrentPose, unsafe.Pointer(&mem.current_pose))
	geometry_msgs_msg.TwistStampedTypeSupport.AsGoStruct(&m.CurrentSpeed, unsafe.Pointer(&mem.current_speed))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.NavigationTime, unsafe.Pointer(&mem.navigation_time))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.EstimatedTimeRemaining, unsafe.Pointer(&mem.estimated_time_remaining))
	m.DistanceRemaining = float32(mem.distance_remaining)
}

func (t _NavigateToPoint_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__NavigateToPoint_Feedback())
}

type CNavigateToPoint_Feedback = C.as2_msgs__action__NavigateToPoint_Feedback
type CNavigateToPoint_FeedbackSequence = C.as2_msgs__action__NavigateToPoint_Feedback__Sequence

func NavigateToPoint_FeedbackSequenceToGo(goSlice *[]NavigateToPoint_Feedback, cSlice CNavigateToPoint_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NavigateToPoint_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		NavigateToPoint_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func NavigateToPoint_FeedbackSequenceToC(cSlice *CNavigateToPoint_FeedbackSequence, goSlice []NavigateToPoint_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__NavigateToPoint_Feedback)(C.malloc(C.sizeof_struct_as2_msgs__action__NavigateToPoint_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		NavigateToPoint_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func NavigateToPoint_FeedbackArrayToGo(goSlice []NavigateToPoint_Feedback, cSlice []CNavigateToPoint_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		NavigateToPoint_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func NavigateToPoint_FeedbackArrayToC(cSlice []CNavigateToPoint_Feedback, goSlice []NavigateToPoint_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		NavigateToPoint_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/land.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/Land_Goal", Land_GoalTypeSupport)
	humble.RegisterMessage("as2_msgs/action/Land_Goal", Land_GoalTypeSupport)
}

type Land_Goal struct {
	LandSpeed float32 `yaml:"land_speed"` // land speed (m/s). Request
}

// NewLand_Goal creates a new Land_Goal with default values.
func NewLand_Goal() *Land_Goal {
	self := Land_Goal{}
	self.SetDefaults()
	return &self
}

func (t *Land_Goal) Clone() *Land_Goal {
	c := &Land_Goal{}
	c.LandSpeed = t.LandSpeed
	return c
}

func (t *Land_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Land_Goal) SetDefaults() {
	t.LandSpeed = 0
}

func (t *Land_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return Land_GoalTypeSupport
}

// Land_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type Land_GoalPublisher struct {
	*humble.Publisher
}

// NewLand_GoalPublisher creates and returns a new publisher for the
// Land_Goal
func NewLand_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Land_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, Land_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Land_GoalPublisher{pub}, nil
}

func (p *Land_GoalPublisher) Publish(msg *Land_Goal) error {
	return p.Publisher.Publish(msg)
}

// Land_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type Land_GoalSubscription struct {
	*humble.Subscription
}

// Land_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a Land_GoalSubscription.
type Land_GoalSubscriptionCallback func(msg *Land_Goal, info *humble.MessageInfo, err error)

// NewLand_GoalSubscription creates and returns a new subscription for the
// Land_Goal
func NewLand_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Land_GoalSubscriptionCallback) (*Land_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Land_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Land_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Land_GoalSubscription{sub}, nil
}

func (s *Land_GoalSubscription) TakeMessage(out *Land_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLand_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLand_GoalSlice(dst, src []Land_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Land_GoalTypeSupport humble.MessageTypeSupport = _Land_GoalTypeSupport{}

type _Land_GoalTypeSupport struct{}

func (t _Land_GoalTypeSupport) New() humble.Message {
	return NewLand_Goal()
}

func (t _Land_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__Land_Goal
	return (unsafe.Pointer)(C.as2_msgs__action__Land_Goal__create())
}

func (t _Land_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__Land_Goal__destroy((*C.as2_msgs__action__Land_Goal)(pointer_to_free))
}

func (t _Land_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Land_Goal)
	mem := (*C.as2_msgs__action__Land_Goal)(dst)
	mem.land_speed = C.float(m.LandSpeed)
}

func (t _Land_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Land_Goal)
	mem := (*C.as2_msgs__action__Land_Goal)(ros2_message_buffer)
	m.LandSpeed = float32(mem.land_speed)
}

func (t _Land_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__Land_Goal())
}

type CLand_Goal = C.as2_msgs__action__Land_Goal
type CLand_GoalSequence = C.as2_msgs__action__Land_Goal__Sequence

func Land_GoalSequenceToGo(goSlice *[]Land_Goal, cSlice CLand_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Land_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Land_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Land_GoalSequenceToC(cSlice *CLand_GoalSequence, goSlice []Land_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__Land_Goal)(C.malloc(C.sizeof_struct_as2_msgs__action__Land_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Land_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Land_GoalArrayToGo(goSlice []Land_Goal, cSlice []CLand_Goal) {
	for i := 0; i < len(cSlice); i++ {
		Land_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Land_GoalArrayToC(cSlice []CLand_Goal, goSlice []Land_Goal) {
	for i := 0; i < len(goSlice); i++ {
		Land_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

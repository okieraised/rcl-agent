// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/follow_path.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/FollowPath_Result", FollowPath_ResultTypeSupport)
	humble.RegisterMessage("as2_msgs/action/FollowPath_Result", FollowPath_ResultTypeSupport)
}

type FollowPath_Result struct {
	FollowPathSuccess bool `yaml:"follow_path_success"` // False if failed to follow_path. Result
}

// NewFollowPath_Result creates a new FollowPath_Result with default values.
func NewFollowPath_Result() *FollowPath_Result {
	self := FollowPath_Result{}
	self.SetDefaults()
	return &self
}

func (t *FollowPath_Result) Clone() *FollowPath_Result {
	c := &FollowPath_Result{}
	c.FollowPathSuccess = t.FollowPathSuccess
	return c
}

func (t *FollowPath_Result) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *FollowPath_Result) SetDefaults() {
	t.FollowPathSuccess = false
}

func (t *FollowPath_Result) GetTypeSupport() humble.MessageTypeSupport {
	return FollowPath_ResultTypeSupport
}

// FollowPath_ResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type FollowPath_ResultPublisher struct {
	*humble.Publisher
}

// NewFollowPath_ResultPublisher creates and returns a new publisher for the
// FollowPath_Result
func NewFollowPath_ResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*FollowPath_ResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, FollowPath_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowPath_ResultPublisher{pub}, nil
}

func (p *FollowPath_ResultPublisher) Publish(msg *FollowPath_Result) error {
	return p.Publisher.Publish(msg)
}

// FollowPath_ResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type FollowPath_ResultSubscription struct {
	*humble.Subscription
}

// FollowPath_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a FollowPath_ResultSubscription.
type FollowPath_ResultSubscriptionCallback func(msg *FollowPath_Result, info *humble.MessageInfo, err error)

// NewFollowPath_ResultSubscription creates and returns a new subscription for the
// FollowPath_Result
func NewFollowPath_ResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback FollowPath_ResultSubscriptionCallback) (*FollowPath_ResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg FollowPath_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, FollowPath_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowPath_ResultSubscription{sub}, nil
}

func (s *FollowPath_ResultSubscription) TakeMessage(out *FollowPath_Result) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowPath_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowPath_ResultSlice(dst, src []FollowPath_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowPath_ResultTypeSupport humble.MessageTypeSupport = _FollowPath_ResultTypeSupport{}

type _FollowPath_ResultTypeSupport struct{}

func (t _FollowPath_ResultTypeSupport) New() humble.Message {
	return NewFollowPath_Result()
}

func (t _FollowPath_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__FollowPath_Result
	return (unsafe.Pointer)(C.as2_msgs__action__FollowPath_Result__create())
}

func (t _FollowPath_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__FollowPath_Result__destroy((*C.as2_msgs__action__FollowPath_Result)(pointer_to_free))
}

func (t _FollowPath_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*FollowPath_Result)
	mem := (*C.as2_msgs__action__FollowPath_Result)(dst)
	mem.follow_path_success = C.bool(m.FollowPathSuccess)
}

func (t _FollowPath_ResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowPath_Result)
	mem := (*C.as2_msgs__action__FollowPath_Result)(ros2_message_buffer)
	m.FollowPathSuccess = bool(mem.follow_path_success)
}

func (t _FollowPath_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__FollowPath_Result())
}

type CFollowPath_Result = C.as2_msgs__action__FollowPath_Result
type CFollowPath_ResultSequence = C.as2_msgs__action__FollowPath_Result__Sequence

func FollowPath_ResultSequenceToGo(goSlice *[]FollowPath_Result, cSlice CFollowPath_ResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowPath_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowPath_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func FollowPath_ResultSequenceToC(cSlice *CFollowPath_ResultSequence, goSlice []FollowPath_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__FollowPath_Result)(C.malloc(C.sizeof_struct_as2_msgs__action__FollowPath_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowPath_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func FollowPath_ResultArrayToGo(goSlice []FollowPath_Result, cSlice []CFollowPath_Result) {
	for i := 0; i < len(cSlice); i++ {
		FollowPath_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func FollowPath_ResultArrayToC(cSlice []CFollowPath_Result, goSlice []FollowPath_Result) {
	for i := 0; i < len(goSlice); i++ {
		FollowPath_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

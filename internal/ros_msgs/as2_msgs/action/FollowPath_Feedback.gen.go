// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/follow_path.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/FollowPath_Feedback", FollowPath_FeedbackTypeSupport)
	humble.RegisterMessage("as2_msgs/action/FollowPath_Feedback", FollowPath_FeedbackTypeSupport)
}

type FollowPath_Feedback struct {
	ActualSpeed                  float32 `yaml:"actual_speed"`                     // Actual speed (m/s). Feedback
	ActualDistanceToNextWaypoint float32 `yaml:"actual_distance_to_next_waypoint"` // Distance to next waypoint (m)
	RemainingWaypoints           uint16  `yaml:"remaining_waypoints"`              // Remaining_waypoints
	NextWaypointId               string  `yaml:"next_waypoint_id"`                 // Next waypoint id in path to follow
}

// NewFollowPath_Feedback creates a new FollowPath_Feedback with default values.
func NewFollowPath_Feedback() *FollowPath_Feedback {
	self := FollowPath_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *FollowPath_Feedback) Clone() *FollowPath_Feedback {
	c := &FollowPath_Feedback{}
	c.ActualSpeed = t.ActualSpeed
	c.ActualDistanceToNextWaypoint = t.ActualDistanceToNextWaypoint
	c.RemainingWaypoints = t.RemainingWaypoints
	c.NextWaypointId = t.NextWaypointId
	return c
}

func (t *FollowPath_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *FollowPath_Feedback) SetDefaults() {
	t.ActualSpeed = 0
	t.ActualDistanceToNextWaypoint = 0
	t.RemainingWaypoints = 0
	t.NextWaypointId = ""
}

func (t *FollowPath_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return FollowPath_FeedbackTypeSupport
}

// FollowPath_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type FollowPath_FeedbackPublisher struct {
	*humble.Publisher
}

// NewFollowPath_FeedbackPublisher creates and returns a new publisher for the
// FollowPath_Feedback
func NewFollowPath_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*FollowPath_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, FollowPath_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowPath_FeedbackPublisher{pub}, nil
}

func (p *FollowPath_FeedbackPublisher) Publish(msg *FollowPath_Feedback) error {
	return p.Publisher.Publish(msg)
}

// FollowPath_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type FollowPath_FeedbackSubscription struct {
	*humble.Subscription
}

// FollowPath_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a FollowPath_FeedbackSubscription.
type FollowPath_FeedbackSubscriptionCallback func(msg *FollowPath_Feedback, info *humble.MessageInfo, err error)

// NewFollowPath_FeedbackSubscription creates and returns a new subscription for the
// FollowPath_Feedback
func NewFollowPath_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback FollowPath_FeedbackSubscriptionCallback) (*FollowPath_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg FollowPath_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, FollowPath_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowPath_FeedbackSubscription{sub}, nil
}

func (s *FollowPath_FeedbackSubscription) TakeMessage(out *FollowPath_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowPath_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowPath_FeedbackSlice(dst, src []FollowPath_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowPath_FeedbackTypeSupport humble.MessageTypeSupport = _FollowPath_FeedbackTypeSupport{}

type _FollowPath_FeedbackTypeSupport struct{}

func (t _FollowPath_FeedbackTypeSupport) New() humble.Message {
	return NewFollowPath_Feedback()
}

func (t _FollowPath_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__FollowPath_Feedback
	return (unsafe.Pointer)(C.as2_msgs__action__FollowPath_Feedback__create())
}

func (t _FollowPath_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__FollowPath_Feedback__destroy((*C.as2_msgs__action__FollowPath_Feedback)(pointer_to_free))
}

func (t _FollowPath_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*FollowPath_Feedback)
	mem := (*C.as2_msgs__action__FollowPath_Feedback)(dst)
	mem.actual_speed = C.float(m.ActualSpeed)
	mem.actual_distance_to_next_waypoint = C.float(m.ActualDistanceToNextWaypoint)
	mem.remaining_waypoints = C.uint16_t(m.RemainingWaypoints)
	humble.StringAsCStruct(unsafe.Pointer(&mem.next_waypoint_id), m.NextWaypointId)
}

func (t _FollowPath_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowPath_Feedback)
	mem := (*C.as2_msgs__action__FollowPath_Feedback)(ros2_message_buffer)
	m.ActualSpeed = float32(mem.actual_speed)
	m.ActualDistanceToNextWaypoint = float32(mem.actual_distance_to_next_waypoint)
	m.RemainingWaypoints = uint16(mem.remaining_waypoints)
	humble.StringAsGoStruct(&m.NextWaypointId, unsafe.Pointer(&mem.next_waypoint_id))
}

func (t _FollowPath_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__FollowPath_Feedback())
}

type CFollowPath_Feedback = C.as2_msgs__action__FollowPath_Feedback
type CFollowPath_FeedbackSequence = C.as2_msgs__action__FollowPath_Feedback__Sequence

func FollowPath_FeedbackSequenceToGo(goSlice *[]FollowPath_Feedback, cSlice CFollowPath_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowPath_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowPath_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func FollowPath_FeedbackSequenceToC(cSlice *CFollowPath_FeedbackSequence, goSlice []FollowPath_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__FollowPath_Feedback)(C.malloc(C.sizeof_struct_as2_msgs__action__FollowPath_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowPath_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func FollowPath_FeedbackArrayToGo(goSlice []FollowPath_Feedback, cSlice []CFollowPath_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		FollowPath_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func FollowPath_FeedbackArrayToC(cSlice []CFollowPath_Feedback, goSlice []FollowPath_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		FollowPath_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/set_offboard_mode.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SetOffboardMode_Feedback", SetOffboardMode_FeedbackTypeSupport)
	humble.RegisterMessage("as2_msgs/action/SetOffboardMode_Feedback", SetOffboardMode_FeedbackTypeSupport)
}

type SetOffboardMode_Feedback struct {
}

// NewSetOffboardMode_Feedback creates a new SetOffboardMode_Feedback with default values.
func NewSetOffboardMode_Feedback() *SetOffboardMode_Feedback {
	self := SetOffboardMode_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *SetOffboardMode_Feedback) Clone() *SetOffboardMode_Feedback {
	c := &SetOffboardMode_Feedback{}
	return c
}

func (t *SetOffboardMode_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetOffboardMode_Feedback) SetDefaults() {
}

func (t *SetOffboardMode_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return SetOffboardMode_FeedbackTypeSupport
}

// SetOffboardMode_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type SetOffboardMode_FeedbackPublisher struct {
	*humble.Publisher
}

// NewSetOffboardMode_FeedbackPublisher creates and returns a new publisher for the
// SetOffboardMode_Feedback
func NewSetOffboardMode_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetOffboardMode_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, SetOffboardMode_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetOffboardMode_FeedbackPublisher{pub}, nil
}

func (p *SetOffboardMode_FeedbackPublisher) Publish(msg *SetOffboardMode_Feedback) error {
	return p.Publisher.Publish(msg)
}

// SetOffboardMode_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetOffboardMode_FeedbackSubscription struct {
	*humble.Subscription
}

// SetOffboardMode_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a SetOffboardMode_FeedbackSubscription.
type SetOffboardMode_FeedbackSubscriptionCallback func(msg *SetOffboardMode_Feedback, info *humble.MessageInfo, err error)

// NewSetOffboardMode_FeedbackSubscription creates and returns a new subscription for the
// SetOffboardMode_Feedback
func NewSetOffboardMode_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetOffboardMode_FeedbackSubscriptionCallback) (*SetOffboardMode_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetOffboardMode_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetOffboardMode_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetOffboardMode_FeedbackSubscription{sub}, nil
}

func (s *SetOffboardMode_FeedbackSubscription) TakeMessage(out *SetOffboardMode_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetOffboardMode_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetOffboardMode_FeedbackSlice(dst, src []SetOffboardMode_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetOffboardMode_FeedbackTypeSupport humble.MessageTypeSupport = _SetOffboardMode_FeedbackTypeSupport{}

type _SetOffboardMode_FeedbackTypeSupport struct{}

func (t _SetOffboardMode_FeedbackTypeSupport) New() humble.Message {
	return NewSetOffboardMode_Feedback()
}

func (t _SetOffboardMode_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__SetOffboardMode_Feedback
	return (unsafe.Pointer)(C.as2_msgs__action__SetOffboardMode_Feedback__create())
}

func (t _SetOffboardMode_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__SetOffboardMode_Feedback__destroy((*C.as2_msgs__action__SetOffboardMode_Feedback)(pointer_to_free))
}

func (t _SetOffboardMode_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {

}

func (t _SetOffboardMode_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _SetOffboardMode_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__SetOffboardMode_Feedback())
}

type CSetOffboardMode_Feedback = C.as2_msgs__action__SetOffboardMode_Feedback
type CSetOffboardMode_FeedbackSequence = C.as2_msgs__action__SetOffboardMode_Feedback__Sequence

func SetOffboardMode_FeedbackSequenceToGo(goSlice *[]SetOffboardMode_Feedback, cSlice CSetOffboardMode_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetOffboardMode_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetOffboardMode_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetOffboardMode_FeedbackSequenceToC(cSlice *CSetOffboardMode_FeedbackSequence, goSlice []SetOffboardMode_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__SetOffboardMode_Feedback)(C.malloc(C.sizeof_struct_as2_msgs__action__SetOffboardMode_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetOffboardMode_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetOffboardMode_FeedbackArrayToGo(goSlice []SetOffboardMode_Feedback, cSlice []CSetOffboardMode_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		SetOffboardMode_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetOffboardMode_FeedbackArrayToC(cSlice []CSetOffboardMode_Feedback, goSlice []SetOffboardMode_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		SetOffboardMode_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

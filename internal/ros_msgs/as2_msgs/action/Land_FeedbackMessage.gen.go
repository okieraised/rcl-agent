// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	unique_identifier_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/unique_identifier_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/land.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/Land_FeedbackMessage", Land_FeedbackMessageTypeSupport)
	humble.RegisterMessage("as2_msgs/action/Land_FeedbackMessage", Land_FeedbackMessageTypeSupport)
}

type Land_FeedbackMessage struct {
	GoalID   unique_identifier_msgs_msg.UUID `yaml:"goal_id"`
	Feedback Land_Feedback                   `yaml:"feedback"`
}

// NewLand_FeedbackMessage creates a new Land_FeedbackMessage with default values.
func NewLand_FeedbackMessage() *Land_FeedbackMessage {
	self := Land_FeedbackMessage{}
	self.SetDefaults()
	return &self
}

func (t *Land_FeedbackMessage) Clone() *Land_FeedbackMessage {
	c := &Land_FeedbackMessage{}
	c.GoalID = *t.GoalID.Clone()
	c.Feedback = *t.Feedback.Clone()
	return c
}

func (t *Land_FeedbackMessage) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Land_FeedbackMessage) SetDefaults() {
	t.GoalID.SetDefaults()
	t.Feedback.SetDefaults()
}

func (t *Land_FeedbackMessage) GetTypeSupport() humble.MessageTypeSupport {
	return Land_FeedbackMessageTypeSupport
}
func (t *Land_FeedbackMessage) GetGoalID() *humble.GoalID {
	return (*humble.GoalID)(&t.GoalID.Uuid)
}

func (t *Land_FeedbackMessage) SetGoalID(id *humble.GoalID) {
	t.GoalID.Uuid = *id
}

// Land_FeedbackMessagePublisher wraps humble.Publisher to provide type safe helper
// functions
type Land_FeedbackMessagePublisher struct {
	*humble.Publisher
}

// NewLand_FeedbackMessagePublisher creates and returns a new publisher for the
// Land_FeedbackMessage
func NewLand_FeedbackMessagePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Land_FeedbackMessagePublisher, error) {
	pub, err := node.NewPublisher(topicName, Land_FeedbackMessageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Land_FeedbackMessagePublisher{pub}, nil
}

func (p *Land_FeedbackMessagePublisher) Publish(msg *Land_FeedbackMessage) error {
	return p.Publisher.Publish(msg)
}

// Land_FeedbackMessageSubscription wraps humble.Subscription to provide type safe helper
// functions
type Land_FeedbackMessageSubscription struct {
	*humble.Subscription
}

// Land_FeedbackMessageSubscriptionCallback type is used to provide a subscription
// handler function for a Land_FeedbackMessageSubscription.
type Land_FeedbackMessageSubscriptionCallback func(msg *Land_FeedbackMessage, info *humble.MessageInfo, err error)

// NewLand_FeedbackMessageSubscription creates and returns a new subscription for the
// Land_FeedbackMessage
func NewLand_FeedbackMessageSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Land_FeedbackMessageSubscriptionCallback) (*Land_FeedbackMessageSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Land_FeedbackMessage
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Land_FeedbackMessageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Land_FeedbackMessageSubscription{sub}, nil
}

func (s *Land_FeedbackMessageSubscription) TakeMessage(out *Land_FeedbackMessage) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLand_FeedbackMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLand_FeedbackMessageSlice(dst, src []Land_FeedbackMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Land_FeedbackMessageTypeSupport humble.MessageTypeSupport = _Land_FeedbackMessageTypeSupport{}

type _Land_FeedbackMessageTypeSupport struct{}

func (t _Land_FeedbackMessageTypeSupport) New() humble.Message {
	return NewLand_FeedbackMessage()
}

func (t _Land_FeedbackMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__Land_FeedbackMessage
	return (unsafe.Pointer)(C.as2_msgs__action__Land_FeedbackMessage__create())
}

func (t _Land_FeedbackMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__Land_FeedbackMessage__destroy((*C.as2_msgs__action__Land_FeedbackMessage)(pointer_to_free))
}

func (t _Land_FeedbackMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Land_FeedbackMessage)
	mem := (*C.as2_msgs__action__Land_FeedbackMessage)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_id), &m.GoalID)
	Land_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&mem.feedback), &m.Feedback)
}

func (t _Land_FeedbackMessageTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Land_FeedbackMessage)
	mem := (*C.as2_msgs__action__Land_FeedbackMessage)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.GoalID, unsafe.Pointer(&mem.goal_id))
	Land_FeedbackTypeSupport.AsGoStruct(&m.Feedback, unsafe.Pointer(&mem.feedback))
}

func (t _Land_FeedbackMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__Land_FeedbackMessage())
}

type CLand_FeedbackMessage = C.as2_msgs__action__Land_FeedbackMessage
type CLand_FeedbackMessageSequence = C.as2_msgs__action__Land_FeedbackMessage__Sequence

func Land_FeedbackMessageSequenceToGo(goSlice *[]Land_FeedbackMessage, cSlice CLand_FeedbackMessageSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Land_FeedbackMessage, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Land_FeedbackMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Land_FeedbackMessageSequenceToC(cSlice *CLand_FeedbackMessageSequence, goSlice []Land_FeedbackMessage) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__Land_FeedbackMessage)(C.malloc(C.sizeof_struct_as2_msgs__action__Land_FeedbackMessage * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Land_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Land_FeedbackMessageArrayToGo(goSlice []Land_FeedbackMessage, cSlice []CLand_FeedbackMessage) {
	for i := 0; i < len(cSlice); i++ {
		Land_FeedbackMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Land_FeedbackMessageArrayToC(cSlice []CLand_FeedbackMessage, goSlice []Land_FeedbackMessage) {
	for i := 0; i < len(goSlice); i++ {
		Land_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

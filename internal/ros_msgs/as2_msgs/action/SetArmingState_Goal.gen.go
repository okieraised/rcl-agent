// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/set_arming_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SetArmingState_Goal", SetArmingState_GoalTypeSupport)
	humble.RegisterMessage("as2_msgs/action/SetArmingState_Goal", SetArmingState_GoalTypeSupport)
}

type SetArmingState_Goal struct {
	Request bool `yaml:"request"` // Request
}

// NewSetArmingState_Goal creates a new SetArmingState_Goal with default values.
func NewSetArmingState_Goal() *SetArmingState_Goal {
	self := SetArmingState_Goal{}
	self.SetDefaults()
	return &self
}

func (t *SetArmingState_Goal) Clone() *SetArmingState_Goal {
	c := &SetArmingState_Goal{}
	c.Request = t.Request
	return c
}

func (t *SetArmingState_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetArmingState_Goal) SetDefaults() {
	t.Request = false
}

func (t *SetArmingState_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return SetArmingState_GoalTypeSupport
}

// SetArmingState_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type SetArmingState_GoalPublisher struct {
	*humble.Publisher
}

// NewSetArmingState_GoalPublisher creates and returns a new publisher for the
// SetArmingState_Goal
func NewSetArmingState_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetArmingState_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, SetArmingState_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetArmingState_GoalPublisher{pub}, nil
}

func (p *SetArmingState_GoalPublisher) Publish(msg *SetArmingState_Goal) error {
	return p.Publisher.Publish(msg)
}

// SetArmingState_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetArmingState_GoalSubscription struct {
	*humble.Subscription
}

// SetArmingState_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a SetArmingState_GoalSubscription.
type SetArmingState_GoalSubscriptionCallback func(msg *SetArmingState_Goal, info *humble.MessageInfo, err error)

// NewSetArmingState_GoalSubscription creates and returns a new subscription for the
// SetArmingState_Goal
func NewSetArmingState_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetArmingState_GoalSubscriptionCallback) (*SetArmingState_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetArmingState_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetArmingState_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetArmingState_GoalSubscription{sub}, nil
}

func (s *SetArmingState_GoalSubscription) TakeMessage(out *SetArmingState_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetArmingState_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetArmingState_GoalSlice(dst, src []SetArmingState_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetArmingState_GoalTypeSupport humble.MessageTypeSupport = _SetArmingState_GoalTypeSupport{}

type _SetArmingState_GoalTypeSupport struct{}

func (t _SetArmingState_GoalTypeSupport) New() humble.Message {
	return NewSetArmingState_Goal()
}

func (t _SetArmingState_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__SetArmingState_Goal
	return (unsafe.Pointer)(C.as2_msgs__action__SetArmingState_Goal__create())
}

func (t _SetArmingState_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__SetArmingState_Goal__destroy((*C.as2_msgs__action__SetArmingState_Goal)(pointer_to_free))
}

func (t _SetArmingState_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SetArmingState_Goal)
	mem := (*C.as2_msgs__action__SetArmingState_Goal)(dst)
	mem.request = C.bool(m.Request)
}

func (t _SetArmingState_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetArmingState_Goal)
	mem := (*C.as2_msgs__action__SetArmingState_Goal)(ros2_message_buffer)
	m.Request = bool(mem.request)
}

func (t _SetArmingState_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__SetArmingState_Goal())
}

type CSetArmingState_Goal = C.as2_msgs__action__SetArmingState_Goal
type CSetArmingState_GoalSequence = C.as2_msgs__action__SetArmingState_Goal__Sequence

func SetArmingState_GoalSequenceToGo(goSlice *[]SetArmingState_Goal, cSlice CSetArmingState_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetArmingState_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetArmingState_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetArmingState_GoalSequenceToC(cSlice *CSetArmingState_GoalSequence, goSlice []SetArmingState_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__SetArmingState_Goal)(C.malloc(C.sizeof_struct_as2_msgs__action__SetArmingState_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetArmingState_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetArmingState_GoalArrayToGo(goSlice []SetArmingState_Goal, cSlice []CSetArmingState_Goal) {
	for i := 0; i < len(cSlice); i++ {
		SetArmingState_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetArmingState_GoalArrayToC(cSlice []CSetArmingState_Goal, goSlice []SetArmingState_Goal) {
	for i := 0; i < len(goSlice); i++ {
		SetArmingState_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

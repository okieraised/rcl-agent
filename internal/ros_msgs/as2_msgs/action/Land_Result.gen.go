// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/land.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/Land_Result", Land_ResultTypeSupport)
	humble.RegisterMessage("as2_msgs/action/Land_Result", Land_ResultTypeSupport)
}

type Land_Result struct {
	LandSuccess bool `yaml:"land_success"` // false if failed to land. Result
}

// NewLand_Result creates a new Land_Result with default values.
func NewLand_Result() *Land_Result {
	self := Land_Result{}
	self.SetDefaults()
	return &self
}

func (t *Land_Result) Clone() *Land_Result {
	c := &Land_Result{}
	c.LandSuccess = t.LandSuccess
	return c
}

func (t *Land_Result) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Land_Result) SetDefaults() {
	t.LandSuccess = false
}

func (t *Land_Result) GetTypeSupport() humble.MessageTypeSupport {
	return Land_ResultTypeSupport
}

// Land_ResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type Land_ResultPublisher struct {
	*humble.Publisher
}

// NewLand_ResultPublisher creates and returns a new publisher for the
// Land_Result
func NewLand_ResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Land_ResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, Land_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Land_ResultPublisher{pub}, nil
}

func (p *Land_ResultPublisher) Publish(msg *Land_Result) error {
	return p.Publisher.Publish(msg)
}

// Land_ResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type Land_ResultSubscription struct {
	*humble.Subscription
}

// Land_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a Land_ResultSubscription.
type Land_ResultSubscriptionCallback func(msg *Land_Result, info *humble.MessageInfo, err error)

// NewLand_ResultSubscription creates and returns a new subscription for the
// Land_Result
func NewLand_ResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Land_ResultSubscriptionCallback) (*Land_ResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Land_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Land_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Land_ResultSubscription{sub}, nil
}

func (s *Land_ResultSubscription) TakeMessage(out *Land_Result) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLand_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLand_ResultSlice(dst, src []Land_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Land_ResultTypeSupport humble.MessageTypeSupport = _Land_ResultTypeSupport{}

type _Land_ResultTypeSupport struct{}

func (t _Land_ResultTypeSupport) New() humble.Message {
	return NewLand_Result()
}

func (t _Land_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__Land_Result
	return (unsafe.Pointer)(C.as2_msgs__action__Land_Result__create())
}

func (t _Land_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__Land_Result__destroy((*C.as2_msgs__action__Land_Result)(pointer_to_free))
}

func (t _Land_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Land_Result)
	mem := (*C.as2_msgs__action__Land_Result)(dst)
	mem.land_success = C.bool(m.LandSuccess)
}

func (t _Land_ResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Land_Result)
	mem := (*C.as2_msgs__action__Land_Result)(ros2_message_buffer)
	m.LandSuccess = bool(mem.land_success)
}

func (t _Land_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__Land_Result())
}

type CLand_Result = C.as2_msgs__action__Land_Result
type CLand_ResultSequence = C.as2_msgs__action__Land_Result__Sequence

func Land_ResultSequenceToGo(goSlice *[]Land_Result, cSlice CLand_ResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Land_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Land_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Land_ResultSequenceToC(cSlice *CLand_ResultSequence, goSlice []Land_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__Land_Result)(C.malloc(C.sizeof_struct_as2_msgs__action__Land_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Land_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Land_ResultArrayToGo(goSlice []Land_Result, cSlice []CLand_Result) {
	for i := 0; i < len(cSlice); i++ {
		Land_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Land_ResultArrayToC(cSlice []CLand_Result, goSlice []Land_Result) {
	for i := 0; i < len(goSlice); i++ {
		Land_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

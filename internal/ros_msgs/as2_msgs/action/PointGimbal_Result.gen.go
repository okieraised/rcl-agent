// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/point_gimbal.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PointGimbal_Result", PointGimbal_ResultTypeSupport)
	humble.RegisterMessage("as2_msgs/action/PointGimbal_Result", PointGimbal_ResultTypeSupport)
}

type PointGimbal_Result struct {
	Success bool `yaml:"success"` // False if failed to point to target. Result
}

// NewPointGimbal_Result creates a new PointGimbal_Result with default values.
func NewPointGimbal_Result() *PointGimbal_Result {
	self := PointGimbal_Result{}
	self.SetDefaults()
	return &self
}

func (t *PointGimbal_Result) Clone() *PointGimbal_Result {
	c := &PointGimbal_Result{}
	c.Success = t.Success
	return c
}

func (t *PointGimbal_Result) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PointGimbal_Result) SetDefaults() {
	t.Success = false
}

func (t *PointGimbal_Result) GetTypeSupport() humble.MessageTypeSupport {
	return PointGimbal_ResultTypeSupport
}

// PointGimbal_ResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type PointGimbal_ResultPublisher struct {
	*humble.Publisher
}

// NewPointGimbal_ResultPublisher creates and returns a new publisher for the
// PointGimbal_Result
func NewPointGimbal_ResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PointGimbal_ResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, PointGimbal_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_ResultPublisher{pub}, nil
}

func (p *PointGimbal_ResultPublisher) Publish(msg *PointGimbal_Result) error {
	return p.Publisher.Publish(msg)
}

// PointGimbal_ResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type PointGimbal_ResultSubscription struct {
	*humble.Subscription
}

// PointGimbal_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a PointGimbal_ResultSubscription.
type PointGimbal_ResultSubscriptionCallback func(msg *PointGimbal_Result, info *humble.MessageInfo, err error)

// NewPointGimbal_ResultSubscription creates and returns a new subscription for the
// PointGimbal_Result
func NewPointGimbal_ResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PointGimbal_ResultSubscriptionCallback) (*PointGimbal_ResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PointGimbal_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PointGimbal_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_ResultSubscription{sub}, nil
}

func (s *PointGimbal_ResultSubscription) TakeMessage(out *PointGimbal_Result) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePointGimbal_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePointGimbal_ResultSlice(dst, src []PointGimbal_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PointGimbal_ResultTypeSupport humble.MessageTypeSupport = _PointGimbal_ResultTypeSupport{}

type _PointGimbal_ResultTypeSupport struct{}

func (t _PointGimbal_ResultTypeSupport) New() humble.Message {
	return NewPointGimbal_Result()
}

func (t _PointGimbal_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__PointGimbal_Result
	return (unsafe.Pointer)(C.as2_msgs__action__PointGimbal_Result__create())
}

func (t _PointGimbal_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__PointGimbal_Result__destroy((*C.as2_msgs__action__PointGimbal_Result)(pointer_to_free))
}

func (t _PointGimbal_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PointGimbal_Result)
	mem := (*C.as2_msgs__action__PointGimbal_Result)(dst)
	mem.success = C.bool(m.Success)
}

func (t _PointGimbal_ResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PointGimbal_Result)
	mem := (*C.as2_msgs__action__PointGimbal_Result)(ros2_message_buffer)
	m.Success = bool(mem.success)
}

func (t _PointGimbal_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__PointGimbal_Result())
}

type CPointGimbal_Result = C.as2_msgs__action__PointGimbal_Result
type CPointGimbal_ResultSequence = C.as2_msgs__action__PointGimbal_Result__Sequence

func PointGimbal_ResultSequenceToGo(goSlice *[]PointGimbal_Result, cSlice CPointGimbal_ResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PointGimbal_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PointGimbal_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PointGimbal_ResultSequenceToC(cSlice *CPointGimbal_ResultSequence, goSlice []PointGimbal_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__PointGimbal_Result)(C.malloc(C.sizeof_struct_as2_msgs__action__PointGimbal_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PointGimbal_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PointGimbal_ResultArrayToGo(goSlice []PointGimbal_Result, cSlice []CPointGimbal_Result) {
	for i := 0; i < len(cSlice); i++ {
		PointGimbal_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PointGimbal_ResultArrayToC(cSlice []CPointGimbal_Result, goSlice []PointGimbal_Result) {
	for i := 0; i < len(goSlice); i++ {
		PointGimbal_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

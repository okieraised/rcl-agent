// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/swarm_flocking.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("as2_msgs/SwarmFlocking_SendGoal", SwarmFlocking_SendGoalTypeSupport)
	humble.RegisterService("as2_msgs/action/SwarmFlocking_SendGoal", SwarmFlocking_SendGoalTypeSupport)
}

type _SwarmFlocking_SendGoalTypeSupport struct {}

func (s _SwarmFlocking_SendGoalTypeSupport) Request() humble.MessageTypeSupport {
	return SwarmFlocking_SendGoal_RequestTypeSupport
}

func (s _SwarmFlocking_SendGoalTypeSupport) Response() humble.MessageTypeSupport {
	return SwarmFlocking_SendGoal_ResponseTypeSupport
}

func (s _SwarmFlocking_SendGoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__SwarmFlocking_SendGoal())
}

// Modifying this variable is undefined behavior.
var SwarmFlocking_SendGoalTypeSupport humble.ServiceTypeSupport = _SwarmFlocking_SendGoalTypeSupport{}

// SwarmFlocking_SendGoalClient wraps humble.Client to provide type safe helper
// functions
type SwarmFlocking_SendGoalClient struct {
	*humble.Client
}

// NewSwarmFlocking_SendGoalClient creates and returns a new client for the
// SwarmFlocking_SendGoal
func NewSwarmFlocking_SendGoalClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*SwarmFlocking_SendGoalClient, error) {
	client, err := node.NewClient(serviceName, SwarmFlocking_SendGoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SwarmFlocking_SendGoalClient{client}, nil
}

func (s *SwarmFlocking_SendGoalClient) Send(ctx context.Context, req *SwarmFlocking_SendGoal_Request) (*SwarmFlocking_SendGoal_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SwarmFlocking_SendGoal_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SwarmFlocking_SendGoalServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s SwarmFlocking_SendGoalServiceResponseSender) SendResponse(resp *SwarmFlocking_SendGoal_Response) error {
	return s.sender.SendResponse(resp)
}

type SwarmFlocking_SendGoalServiceRequestHandler func(*humble.ServiceInfo, *SwarmFlocking_SendGoal_Request, SwarmFlocking_SendGoalServiceResponseSender)

// SwarmFlocking_SendGoalService wraps humble.Service to provide type safe helper
// functions
type SwarmFlocking_SendGoalService struct {
	*humble.Service
}

// NewSwarmFlocking_SendGoalService creates and returns a new service for the
// SwarmFlocking_SendGoal
func NewSwarmFlocking_SendGoalService(node *humble.Node, name string, options *humble.ServiceOptions, handler SwarmFlocking_SendGoalServiceRequestHandler) (*SwarmFlocking_SendGoalService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*SwarmFlocking_SendGoal_Request)
		responseSender := SwarmFlocking_SendGoalServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SwarmFlocking_SendGoalTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SwarmFlocking_SendGoalService{service}, nil
}
// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/generate_polynomial_trajectory.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GeneratePolynomialTrajectory_Goal", GeneratePolynomialTrajectory_GoalTypeSupport)
	humble.RegisterMessage("as2_msgs/action/GeneratePolynomialTrajectory_Goal", GeneratePolynomialTrajectory_GoalTypeSupport)
}

type GeneratePolynomialTrajectory_Goal struct {
	Stamp    builtin_interfaces_msg.Time      `yaml:"stamp"`     // Request timestamp. Request
	Yaw      as2_msgs_msg.YawMode             `yaml:"yaw"`       // Yaw goal mode
	Path     []as2_msgs_msg.PoseStampedWithID `yaml:"path"`      // List of poses with ID in path, with each frame id and time stamp
	MaxSpeed float32                          `yaml:"max_speed"` // Maximum speed desired in path (m/s)
}

// NewGeneratePolynomialTrajectory_Goal creates a new GeneratePolynomialTrajectory_Goal with default values.
func NewGeneratePolynomialTrajectory_Goal() *GeneratePolynomialTrajectory_Goal {
	self := GeneratePolynomialTrajectory_Goal{}
	self.SetDefaults()
	return &self
}

func (t *GeneratePolynomialTrajectory_Goal) Clone() *GeneratePolynomialTrajectory_Goal {
	c := &GeneratePolynomialTrajectory_Goal{}
	c.Stamp = *t.Stamp.Clone()
	c.Yaw = *t.Yaw.Clone()
	if t.Path != nil {
		c.Path = make([]as2_msgs_msg.PoseStampedWithID, len(t.Path))
		as2_msgs_msg.ClonePoseStampedWithIDSlice(c.Path, t.Path)
	}
	c.MaxSpeed = t.MaxSpeed
	return c
}

func (t *GeneratePolynomialTrajectory_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GeneratePolynomialTrajectory_Goal) SetDefaults() {
	t.Stamp.SetDefaults()
	t.Yaw.SetDefaults()
	t.Path = nil
	t.MaxSpeed = 0
}

func (t *GeneratePolynomialTrajectory_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return GeneratePolynomialTrajectory_GoalTypeSupport
}

// GeneratePolynomialTrajectory_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type GeneratePolynomialTrajectory_GoalPublisher struct {
	*humble.Publisher
}

// NewGeneratePolynomialTrajectory_GoalPublisher creates and returns a new publisher for the
// GeneratePolynomialTrajectory_Goal
func NewGeneratePolynomialTrajectory_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GeneratePolynomialTrajectory_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, GeneratePolynomialTrajectory_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeneratePolynomialTrajectory_GoalPublisher{pub}, nil
}

func (p *GeneratePolynomialTrajectory_GoalPublisher) Publish(msg *GeneratePolynomialTrajectory_Goal) error {
	return p.Publisher.Publish(msg)
}

// GeneratePolynomialTrajectory_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type GeneratePolynomialTrajectory_GoalSubscription struct {
	*humble.Subscription
}

// GeneratePolynomialTrajectory_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a GeneratePolynomialTrajectory_GoalSubscription.
type GeneratePolynomialTrajectory_GoalSubscriptionCallback func(msg *GeneratePolynomialTrajectory_Goal, info *humble.MessageInfo, err error)

// NewGeneratePolynomialTrajectory_GoalSubscription creates and returns a new subscription for the
// GeneratePolynomialTrajectory_Goal
func NewGeneratePolynomialTrajectory_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GeneratePolynomialTrajectory_GoalSubscriptionCallback) (*GeneratePolynomialTrajectory_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GeneratePolynomialTrajectory_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GeneratePolynomialTrajectory_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeneratePolynomialTrajectory_GoalSubscription{sub}, nil
}

func (s *GeneratePolynomialTrajectory_GoalSubscription) TakeMessage(out *GeneratePolynomialTrajectory_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeneratePolynomialTrajectory_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeneratePolynomialTrajectory_GoalSlice(dst, src []GeneratePolynomialTrajectory_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeneratePolynomialTrajectory_GoalTypeSupport humble.MessageTypeSupport = _GeneratePolynomialTrajectory_GoalTypeSupport{}

type _GeneratePolynomialTrajectory_GoalTypeSupport struct{}

func (t _GeneratePolynomialTrajectory_GoalTypeSupport) New() humble.Message {
	return NewGeneratePolynomialTrajectory_Goal()
}

func (t _GeneratePolynomialTrajectory_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__GeneratePolynomialTrajectory_Goal
	return (unsafe.Pointer)(C.as2_msgs__action__GeneratePolynomialTrajectory_Goal__create())
}

func (t _GeneratePolynomialTrajectory_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__GeneratePolynomialTrajectory_Goal__destroy((*C.as2_msgs__action__GeneratePolynomialTrajectory_Goal)(pointer_to_free))
}

func (t _GeneratePolynomialTrajectory_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GeneratePolynomialTrajectory_Goal)
	mem := (*C.as2_msgs__action__GeneratePolynomialTrajectory_Goal)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.stamp), &m.Stamp)
	as2_msgs_msg.YawModeTypeSupport.AsCStruct(unsafe.Pointer(&mem.yaw), &m.Yaw)
	as2_msgs_msg.PoseStampedWithIDSequenceToC((*as2_msgs_msg.CPoseStampedWithIDSequence)(unsafe.Pointer(&mem.path)), m.Path)
	mem.max_speed = C.float(m.MaxSpeed)
}

func (t _GeneratePolynomialTrajectory_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeneratePolynomialTrajectory_Goal)
	mem := (*C.as2_msgs__action__GeneratePolynomialTrajectory_Goal)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Stamp, unsafe.Pointer(&mem.stamp))
	as2_msgs_msg.YawModeTypeSupport.AsGoStruct(&m.Yaw, unsafe.Pointer(&mem.yaw))
	as2_msgs_msg.PoseStampedWithIDSequenceToGo(&m.Path, *(*as2_msgs_msg.CPoseStampedWithIDSequence)(unsafe.Pointer(&mem.path)))
	m.MaxSpeed = float32(mem.max_speed)
}

func (t _GeneratePolynomialTrajectory_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__GeneratePolynomialTrajectory_Goal())
}

type CGeneratePolynomialTrajectory_Goal = C.as2_msgs__action__GeneratePolynomialTrajectory_Goal
type CGeneratePolynomialTrajectory_GoalSequence = C.as2_msgs__action__GeneratePolynomialTrajectory_Goal__Sequence

func GeneratePolynomialTrajectory_GoalSequenceToGo(goSlice *[]GeneratePolynomialTrajectory_Goal, cSlice CGeneratePolynomialTrajectory_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeneratePolynomialTrajectory_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeneratePolynomialTrajectory_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GeneratePolynomialTrajectory_GoalSequenceToC(cSlice *CGeneratePolynomialTrajectory_GoalSequence, goSlice []GeneratePolynomialTrajectory_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__GeneratePolynomialTrajectory_Goal)(C.malloc(C.sizeof_struct_as2_msgs__action__GeneratePolynomialTrajectory_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeneratePolynomialTrajectory_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GeneratePolynomialTrajectory_GoalArrayToGo(goSlice []GeneratePolynomialTrajectory_Goal, cSlice []CGeneratePolynomialTrajectory_Goal) {
	for i := 0; i < len(cSlice); i++ {
		GeneratePolynomialTrajectory_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GeneratePolynomialTrajectory_GoalArrayToC(cSlice []CGeneratePolynomialTrajectory_Goal, goSlice []GeneratePolynomialTrajectory_Goal) {
	for i := 0; i < len(goSlice); i++ {
		GeneratePolynomialTrajectory_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/follow_reference.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/FollowReference_Goal", FollowReference_GoalTypeSupport)
	humble.RegisterMessage("as2_msgs/action/FollowReference_Goal", FollowReference_GoalTypeSupport)
}

type FollowReference_Goal struct {
	Yaw        as2_msgs_msg.YawMode           `yaml:"yaw"`         // Yaw mode
	TargetPose geometry_msgs_msg.PointStamped `yaml:"target_pose"` // Goal pose 3D (m)
	MaxSpeedX  float32                        `yaml:"max_speed_x"` // Maximum speed in x (m/s)
	MaxSpeedY  float32                        `yaml:"max_speed_y"` // Maximum speed in x (m/s)
	MaxSpeedZ  float32                        `yaml:"max_speed_z"` // Maximum speed in x (m/s)
}

// NewFollowReference_Goal creates a new FollowReference_Goal with default values.
func NewFollowReference_Goal() *FollowReference_Goal {
	self := FollowReference_Goal{}
	self.SetDefaults()
	return &self
}

func (t *FollowReference_Goal) Clone() *FollowReference_Goal {
	c := &FollowReference_Goal{}
	c.Yaw = *t.Yaw.Clone()
	c.TargetPose = *t.TargetPose.Clone()
	c.MaxSpeedX = t.MaxSpeedX
	c.MaxSpeedY = t.MaxSpeedY
	c.MaxSpeedZ = t.MaxSpeedZ
	return c
}

func (t *FollowReference_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *FollowReference_Goal) SetDefaults() {
	t.Yaw.SetDefaults()
	t.TargetPose.SetDefaults()
	t.MaxSpeedX = 0
	t.MaxSpeedY = 0
	t.MaxSpeedZ = 0
}

func (t *FollowReference_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return FollowReference_GoalTypeSupport
}

// FollowReference_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type FollowReference_GoalPublisher struct {
	*humble.Publisher
}

// NewFollowReference_GoalPublisher creates and returns a new publisher for the
// FollowReference_Goal
func NewFollowReference_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*FollowReference_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, FollowReference_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowReference_GoalPublisher{pub}, nil
}

func (p *FollowReference_GoalPublisher) Publish(msg *FollowReference_Goal) error {
	return p.Publisher.Publish(msg)
}

// FollowReference_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type FollowReference_GoalSubscription struct {
	*humble.Subscription
}

// FollowReference_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a FollowReference_GoalSubscription.
type FollowReference_GoalSubscriptionCallback func(msg *FollowReference_Goal, info *humble.MessageInfo, err error)

// NewFollowReference_GoalSubscription creates and returns a new subscription for the
// FollowReference_Goal
func NewFollowReference_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback FollowReference_GoalSubscriptionCallback) (*FollowReference_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg FollowReference_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, FollowReference_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowReference_GoalSubscription{sub}, nil
}

func (s *FollowReference_GoalSubscription) TakeMessage(out *FollowReference_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowReference_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowReference_GoalSlice(dst, src []FollowReference_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowReference_GoalTypeSupport humble.MessageTypeSupport = _FollowReference_GoalTypeSupport{}

type _FollowReference_GoalTypeSupport struct{}

func (t _FollowReference_GoalTypeSupport) New() humble.Message {
	return NewFollowReference_Goal()
}

func (t _FollowReference_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__FollowReference_Goal
	return (unsafe.Pointer)(C.as2_msgs__action__FollowReference_Goal__create())
}

func (t _FollowReference_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__FollowReference_Goal__destroy((*C.as2_msgs__action__FollowReference_Goal)(pointer_to_free))
}

func (t _FollowReference_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*FollowReference_Goal)
	mem := (*C.as2_msgs__action__FollowReference_Goal)(dst)
	as2_msgs_msg.YawModeTypeSupport.AsCStruct(unsafe.Pointer(&mem.yaw), &m.Yaw)
	geometry_msgs_msg.PointStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.target_pose), &m.TargetPose)
	mem.max_speed_x = C.float(m.MaxSpeedX)
	mem.max_speed_y = C.float(m.MaxSpeedY)
	mem.max_speed_z = C.float(m.MaxSpeedZ)
}

func (t _FollowReference_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowReference_Goal)
	mem := (*C.as2_msgs__action__FollowReference_Goal)(ros2_message_buffer)
	as2_msgs_msg.YawModeTypeSupport.AsGoStruct(&m.Yaw, unsafe.Pointer(&mem.yaw))
	geometry_msgs_msg.PointStampedTypeSupport.AsGoStruct(&m.TargetPose, unsafe.Pointer(&mem.target_pose))
	m.MaxSpeedX = float32(mem.max_speed_x)
	m.MaxSpeedY = float32(mem.max_speed_y)
	m.MaxSpeedZ = float32(mem.max_speed_z)
}

func (t _FollowReference_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__FollowReference_Goal())
}

type CFollowReference_Goal = C.as2_msgs__action__FollowReference_Goal
type CFollowReference_GoalSequence = C.as2_msgs__action__FollowReference_Goal__Sequence

func FollowReference_GoalSequenceToGo(goSlice *[]FollowReference_Goal, cSlice CFollowReference_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowReference_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowReference_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func FollowReference_GoalSequenceToC(cSlice *CFollowReference_GoalSequence, goSlice []FollowReference_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__FollowReference_Goal)(C.malloc(C.sizeof_struct_as2_msgs__action__FollowReference_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowReference_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func FollowReference_GoalArrayToGo(goSlice []FollowReference_Goal, cSlice []CFollowReference_Goal) {
	for i := 0; i < len(cSlice); i++ {
		FollowReference_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func FollowReference_GoalArrayToC(cSlice []CFollowReference_Goal, goSlice []FollowReference_Goal) {
	for i := 0; i < len(goSlice); i++ {
		FollowReference_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	unique_identifier_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/unique_identifier_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/point_gimbal.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PointGimbal_GetResult_Request", PointGimbal_GetResult_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/action/PointGimbal_GetResult_Request", PointGimbal_GetResult_RequestTypeSupport)
}

type PointGimbal_GetResult_Request struct {
	GoalID unique_identifier_msgs_msg.UUID `yaml:"goal_id"`
}

// NewPointGimbal_GetResult_Request creates a new PointGimbal_GetResult_Request with default values.
func NewPointGimbal_GetResult_Request() *PointGimbal_GetResult_Request {
	self := PointGimbal_GetResult_Request{}
	self.SetDefaults()
	return &self
}

func (t *PointGimbal_GetResult_Request) Clone() *PointGimbal_GetResult_Request {
	c := &PointGimbal_GetResult_Request{}
	c.GoalID = *t.GoalID.Clone()
	return c
}

func (t *PointGimbal_GetResult_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PointGimbal_GetResult_Request) SetDefaults() {
	t.GoalID.SetDefaults()
}

func (t *PointGimbal_GetResult_Request) GetTypeSupport() humble.MessageTypeSupport {
	return PointGimbal_GetResult_RequestTypeSupport
}
func (t *PointGimbal_GetResult_Request) GetGoalID() *humble.GoalID {
	return (*humble.GoalID)(&t.GoalID.Uuid)
}

func (t *PointGimbal_GetResult_Request) SetGoalID(id *humble.GoalID) {
	t.GoalID.Uuid = *id
}

// PointGimbal_GetResult_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type PointGimbal_GetResult_RequestPublisher struct {
	*humble.Publisher
}

// NewPointGimbal_GetResult_RequestPublisher creates and returns a new publisher for the
// PointGimbal_GetResult_Request
func NewPointGimbal_GetResult_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PointGimbal_GetResult_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, PointGimbal_GetResult_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_GetResult_RequestPublisher{pub}, nil
}

func (p *PointGimbal_GetResult_RequestPublisher) Publish(msg *PointGimbal_GetResult_Request) error {
	return p.Publisher.Publish(msg)
}

// PointGimbal_GetResult_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type PointGimbal_GetResult_RequestSubscription struct {
	*humble.Subscription
}

// PointGimbal_GetResult_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a PointGimbal_GetResult_RequestSubscription.
type PointGimbal_GetResult_RequestSubscriptionCallback func(msg *PointGimbal_GetResult_Request, info *humble.MessageInfo, err error)

// NewPointGimbal_GetResult_RequestSubscription creates and returns a new subscription for the
// PointGimbal_GetResult_Request
func NewPointGimbal_GetResult_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PointGimbal_GetResult_RequestSubscriptionCallback) (*PointGimbal_GetResult_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PointGimbal_GetResult_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PointGimbal_GetResult_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_GetResult_RequestSubscription{sub}, nil
}

func (s *PointGimbal_GetResult_RequestSubscription) TakeMessage(out *PointGimbal_GetResult_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePointGimbal_GetResult_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePointGimbal_GetResult_RequestSlice(dst, src []PointGimbal_GetResult_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PointGimbal_GetResult_RequestTypeSupport humble.MessageTypeSupport = _PointGimbal_GetResult_RequestTypeSupport{}

type _PointGimbal_GetResult_RequestTypeSupport struct{}

func (t _PointGimbal_GetResult_RequestTypeSupport) New() humble.Message {
	return NewPointGimbal_GetResult_Request()
}

func (t _PointGimbal_GetResult_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__PointGimbal_GetResult_Request
	return (unsafe.Pointer)(C.as2_msgs__action__PointGimbal_GetResult_Request__create())
}

func (t _PointGimbal_GetResult_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__PointGimbal_GetResult_Request__destroy((*C.as2_msgs__action__PointGimbal_GetResult_Request)(pointer_to_free))
}

func (t _PointGimbal_GetResult_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PointGimbal_GetResult_Request)
	mem := (*C.as2_msgs__action__PointGimbal_GetResult_Request)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_id), &m.GoalID)
}

func (t _PointGimbal_GetResult_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PointGimbal_GetResult_Request)
	mem := (*C.as2_msgs__action__PointGimbal_GetResult_Request)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.GoalID, unsafe.Pointer(&mem.goal_id))
}

func (t _PointGimbal_GetResult_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__PointGimbal_GetResult_Request())
}

type CPointGimbal_GetResult_Request = C.as2_msgs__action__PointGimbal_GetResult_Request
type CPointGimbal_GetResult_RequestSequence = C.as2_msgs__action__PointGimbal_GetResult_Request__Sequence

func PointGimbal_GetResult_RequestSequenceToGo(goSlice *[]PointGimbal_GetResult_Request, cSlice CPointGimbal_GetResult_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PointGimbal_GetResult_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PointGimbal_GetResult_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PointGimbal_GetResult_RequestSequenceToC(cSlice *CPointGimbal_GetResult_RequestSequence, goSlice []PointGimbal_GetResult_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__PointGimbal_GetResult_Request)(C.malloc(C.sizeof_struct_as2_msgs__action__PointGimbal_GetResult_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PointGimbal_GetResult_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PointGimbal_GetResult_RequestArrayToGo(goSlice []PointGimbal_GetResult_Request, cSlice []CPointGimbal_GetResult_Request) {
	for i := 0; i < len(cSlice); i++ {
		PointGimbal_GetResult_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PointGimbal_GetResult_RequestArrayToC(cSlice []CPointGimbal_GetResult_Request, goSlice []PointGimbal_GetResult_Request) {
	for i := 0; i < len(goSlice); i++ {
		PointGimbal_GetResult_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

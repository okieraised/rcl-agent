// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/takeoff.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/Takeoff_Feedback", Takeoff_FeedbackTypeSupport)
	humble.RegisterMessage("as2_msgs/action/Takeoff_Feedback", Takeoff_FeedbackTypeSupport)
}

type Takeoff_Feedback struct {
	ActualTakeoffSpeed  float32 `yaml:"actual_takeoff_speed"`  // actual speed (m/s). Feedback
	ActualTakeoffHeight float32 `yaml:"actual_takeoff_height"` // actual height (m)
}

// NewTakeoff_Feedback creates a new Takeoff_Feedback with default values.
func NewTakeoff_Feedback() *Takeoff_Feedback {
	self := Takeoff_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *Takeoff_Feedback) Clone() *Takeoff_Feedback {
	c := &Takeoff_Feedback{}
	c.ActualTakeoffSpeed = t.ActualTakeoffSpeed
	c.ActualTakeoffHeight = t.ActualTakeoffHeight
	return c
}

func (t *Takeoff_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Takeoff_Feedback) SetDefaults() {
	t.ActualTakeoffSpeed = 0
	t.ActualTakeoffHeight = 0
}

func (t *Takeoff_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return Takeoff_FeedbackTypeSupport
}

// Takeoff_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type Takeoff_FeedbackPublisher struct {
	*humble.Publisher
}

// NewTakeoff_FeedbackPublisher creates and returns a new publisher for the
// Takeoff_Feedback
func NewTakeoff_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Takeoff_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, Takeoff_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Takeoff_FeedbackPublisher{pub}, nil
}

func (p *Takeoff_FeedbackPublisher) Publish(msg *Takeoff_Feedback) error {
	return p.Publisher.Publish(msg)
}

// Takeoff_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type Takeoff_FeedbackSubscription struct {
	*humble.Subscription
}

// Takeoff_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a Takeoff_FeedbackSubscription.
type Takeoff_FeedbackSubscriptionCallback func(msg *Takeoff_Feedback, info *humble.MessageInfo, err error)

// NewTakeoff_FeedbackSubscription creates and returns a new subscription for the
// Takeoff_Feedback
func NewTakeoff_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Takeoff_FeedbackSubscriptionCallback) (*Takeoff_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Takeoff_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Takeoff_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Takeoff_FeedbackSubscription{sub}, nil
}

func (s *Takeoff_FeedbackSubscription) TakeMessage(out *Takeoff_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTakeoff_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTakeoff_FeedbackSlice(dst, src []Takeoff_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Takeoff_FeedbackTypeSupport humble.MessageTypeSupport = _Takeoff_FeedbackTypeSupport{}

type _Takeoff_FeedbackTypeSupport struct{}

func (t _Takeoff_FeedbackTypeSupport) New() humble.Message {
	return NewTakeoff_Feedback()
}

func (t _Takeoff_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__Takeoff_Feedback
	return (unsafe.Pointer)(C.as2_msgs__action__Takeoff_Feedback__create())
}

func (t _Takeoff_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__Takeoff_Feedback__destroy((*C.as2_msgs__action__Takeoff_Feedback)(pointer_to_free))
}

func (t _Takeoff_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Takeoff_Feedback)
	mem := (*C.as2_msgs__action__Takeoff_Feedback)(dst)
	mem.actual_takeoff_speed = C.float(m.ActualTakeoffSpeed)
	mem.actual_takeoff_height = C.float(m.ActualTakeoffHeight)
}

func (t _Takeoff_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Takeoff_Feedback)
	mem := (*C.as2_msgs__action__Takeoff_Feedback)(ros2_message_buffer)
	m.ActualTakeoffSpeed = float32(mem.actual_takeoff_speed)
	m.ActualTakeoffHeight = float32(mem.actual_takeoff_height)
}

func (t _Takeoff_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__Takeoff_Feedback())
}

type CTakeoff_Feedback = C.as2_msgs__action__Takeoff_Feedback
type CTakeoff_FeedbackSequence = C.as2_msgs__action__Takeoff_Feedback__Sequence

func Takeoff_FeedbackSequenceToGo(goSlice *[]Takeoff_Feedback, cSlice CTakeoff_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Takeoff_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Takeoff_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Takeoff_FeedbackSequenceToC(cSlice *CTakeoff_FeedbackSequence, goSlice []Takeoff_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__Takeoff_Feedback)(C.malloc(C.sizeof_struct_as2_msgs__action__Takeoff_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Takeoff_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Takeoff_FeedbackArrayToGo(goSlice []Takeoff_Feedback, cSlice []CTakeoff_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		Takeoff_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Takeoff_FeedbackArrayToC(cSlice []CTakeoff_Feedback, goSlice []Takeoff_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		Takeoff_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

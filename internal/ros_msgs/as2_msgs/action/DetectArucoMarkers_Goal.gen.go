// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/detect_aruco_markers.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/DetectArucoMarkers_Goal", DetectArucoMarkers_GoalTypeSupport)
	humble.RegisterMessage("as2_msgs/action/DetectArucoMarkers_Goal", DetectArucoMarkers_GoalTypeSupport)
}

type DetectArucoMarkers_Goal struct {
	TargetIds []uint16 `yaml:"target_ids"` // Request
}

// NewDetectArucoMarkers_Goal creates a new DetectArucoMarkers_Goal with default values.
func NewDetectArucoMarkers_Goal() *DetectArucoMarkers_Goal {
	self := DetectArucoMarkers_Goal{}
	self.SetDefaults()
	return &self
}

func (t *DetectArucoMarkers_Goal) Clone() *DetectArucoMarkers_Goal {
	c := &DetectArucoMarkers_Goal{}
	if t.TargetIds != nil {
		c.TargetIds = make([]uint16, len(t.TargetIds))
		copy(c.TargetIds, t.TargetIds)
	}
	return c
}

func (t *DetectArucoMarkers_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *DetectArucoMarkers_Goal) SetDefaults() {
	t.TargetIds = nil
}

func (t *DetectArucoMarkers_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return DetectArucoMarkers_GoalTypeSupport
}

// DetectArucoMarkers_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type DetectArucoMarkers_GoalPublisher struct {
	*humble.Publisher
}

// NewDetectArucoMarkers_GoalPublisher creates and returns a new publisher for the
// DetectArucoMarkers_Goal
func NewDetectArucoMarkers_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*DetectArucoMarkers_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, DetectArucoMarkers_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkers_GoalPublisher{pub}, nil
}

func (p *DetectArucoMarkers_GoalPublisher) Publish(msg *DetectArucoMarkers_Goal) error {
	return p.Publisher.Publish(msg)
}

// DetectArucoMarkers_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type DetectArucoMarkers_GoalSubscription struct {
	*humble.Subscription
}

// DetectArucoMarkers_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a DetectArucoMarkers_GoalSubscription.
type DetectArucoMarkers_GoalSubscriptionCallback func(msg *DetectArucoMarkers_Goal, info *humble.MessageInfo, err error)

// NewDetectArucoMarkers_GoalSubscription creates and returns a new subscription for the
// DetectArucoMarkers_Goal
func NewDetectArucoMarkers_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback DetectArucoMarkers_GoalSubscriptionCallback) (*DetectArucoMarkers_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg DetectArucoMarkers_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, DetectArucoMarkers_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkers_GoalSubscription{sub}, nil
}

func (s *DetectArucoMarkers_GoalSubscription) TakeMessage(out *DetectArucoMarkers_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDetectArucoMarkers_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDetectArucoMarkers_GoalSlice(dst, src []DetectArucoMarkers_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DetectArucoMarkers_GoalTypeSupport humble.MessageTypeSupport = _DetectArucoMarkers_GoalTypeSupport{}

type _DetectArucoMarkers_GoalTypeSupport struct{}

func (t _DetectArucoMarkers_GoalTypeSupport) New() humble.Message {
	return NewDetectArucoMarkers_Goal()
}

func (t _DetectArucoMarkers_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__DetectArucoMarkers_Goal
	return (unsafe.Pointer)(C.as2_msgs__action__DetectArucoMarkers_Goal__create())
}

func (t _DetectArucoMarkers_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__DetectArucoMarkers_Goal__destroy((*C.as2_msgs__action__DetectArucoMarkers_Goal)(pointer_to_free))
}

func (t _DetectArucoMarkers_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*DetectArucoMarkers_Goal)
	mem := (*C.as2_msgs__action__DetectArucoMarkers_Goal)(dst)
	humble.Uint16SequenceToC((*humble.CUint16Sequence)(unsafe.Pointer(&mem.target_ids)), m.TargetIds)
}

func (t _DetectArucoMarkers_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DetectArucoMarkers_Goal)
	mem := (*C.as2_msgs__action__DetectArucoMarkers_Goal)(ros2_message_buffer)
	humble.Uint16SequenceToGo(&m.TargetIds, *(*humble.CUint16Sequence)(unsafe.Pointer(&mem.target_ids)))
}

func (t _DetectArucoMarkers_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__DetectArucoMarkers_Goal())
}

type CDetectArucoMarkers_Goal = C.as2_msgs__action__DetectArucoMarkers_Goal
type CDetectArucoMarkers_GoalSequence = C.as2_msgs__action__DetectArucoMarkers_Goal__Sequence

func DetectArucoMarkers_GoalSequenceToGo(goSlice *[]DetectArucoMarkers_Goal, cSlice CDetectArucoMarkers_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DetectArucoMarkers_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DetectArucoMarkers_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func DetectArucoMarkers_GoalSequenceToC(cSlice *CDetectArucoMarkers_GoalSequence, goSlice []DetectArucoMarkers_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__DetectArucoMarkers_Goal)(C.malloc(C.sizeof_struct_as2_msgs__action__DetectArucoMarkers_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DetectArucoMarkers_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func DetectArucoMarkers_GoalArrayToGo(goSlice []DetectArucoMarkers_Goal, cSlice []CDetectArucoMarkers_Goal) {
	for i := 0; i < len(cSlice); i++ {
		DetectArucoMarkers_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func DetectArucoMarkers_GoalArrayToC(cSlice []CDetectArucoMarkers_Goal, goSlice []DetectArucoMarkers_Goal) {
	for i := 0; i < len(goSlice); i++ {
		DetectArucoMarkers_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

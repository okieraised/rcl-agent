// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/set_offboard_mode.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SetOffboardMode_Result", SetOffboardMode_ResultTypeSupport)
	humble.RegisterMessage("as2_msgs/action/SetOffboardMode_Result", SetOffboardMode_ResultTypeSupport)
}

type SetOffboardMode_Result struct {
	Success bool `yaml:"success"` // Response
}

// NewSetOffboardMode_Result creates a new SetOffboardMode_Result with default values.
func NewSetOffboardMode_Result() *SetOffboardMode_Result {
	self := SetOffboardMode_Result{}
	self.SetDefaults()
	return &self
}

func (t *SetOffboardMode_Result) Clone() *SetOffboardMode_Result {
	c := &SetOffboardMode_Result{}
	c.Success = t.Success
	return c
}

func (t *SetOffboardMode_Result) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetOffboardMode_Result) SetDefaults() {
	t.Success = false
}

func (t *SetOffboardMode_Result) GetTypeSupport() humble.MessageTypeSupport {
	return SetOffboardMode_ResultTypeSupport
}

// SetOffboardMode_ResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type SetOffboardMode_ResultPublisher struct {
	*humble.Publisher
}

// NewSetOffboardMode_ResultPublisher creates and returns a new publisher for the
// SetOffboardMode_Result
func NewSetOffboardMode_ResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetOffboardMode_ResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, SetOffboardMode_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetOffboardMode_ResultPublisher{pub}, nil
}

func (p *SetOffboardMode_ResultPublisher) Publish(msg *SetOffboardMode_Result) error {
	return p.Publisher.Publish(msg)
}

// SetOffboardMode_ResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetOffboardMode_ResultSubscription struct {
	*humble.Subscription
}

// SetOffboardMode_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a SetOffboardMode_ResultSubscription.
type SetOffboardMode_ResultSubscriptionCallback func(msg *SetOffboardMode_Result, info *humble.MessageInfo, err error)

// NewSetOffboardMode_ResultSubscription creates and returns a new subscription for the
// SetOffboardMode_Result
func NewSetOffboardMode_ResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetOffboardMode_ResultSubscriptionCallback) (*SetOffboardMode_ResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetOffboardMode_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetOffboardMode_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetOffboardMode_ResultSubscription{sub}, nil
}

func (s *SetOffboardMode_ResultSubscription) TakeMessage(out *SetOffboardMode_Result) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetOffboardMode_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetOffboardMode_ResultSlice(dst, src []SetOffboardMode_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetOffboardMode_ResultTypeSupport humble.MessageTypeSupport = _SetOffboardMode_ResultTypeSupport{}

type _SetOffboardMode_ResultTypeSupport struct{}

func (t _SetOffboardMode_ResultTypeSupport) New() humble.Message {
	return NewSetOffboardMode_Result()
}

func (t _SetOffboardMode_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__SetOffboardMode_Result
	return (unsafe.Pointer)(C.as2_msgs__action__SetOffboardMode_Result__create())
}

func (t _SetOffboardMode_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__SetOffboardMode_Result__destroy((*C.as2_msgs__action__SetOffboardMode_Result)(pointer_to_free))
}

func (t _SetOffboardMode_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SetOffboardMode_Result)
	mem := (*C.as2_msgs__action__SetOffboardMode_Result)(dst)
	mem.success = C.bool(m.Success)
}

func (t _SetOffboardMode_ResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetOffboardMode_Result)
	mem := (*C.as2_msgs__action__SetOffboardMode_Result)(ros2_message_buffer)
	m.Success = bool(mem.success)
}

func (t _SetOffboardMode_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__SetOffboardMode_Result())
}

type CSetOffboardMode_Result = C.as2_msgs__action__SetOffboardMode_Result
type CSetOffboardMode_ResultSequence = C.as2_msgs__action__SetOffboardMode_Result__Sequence

func SetOffboardMode_ResultSequenceToGo(goSlice *[]SetOffboardMode_Result, cSlice CSetOffboardMode_ResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetOffboardMode_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetOffboardMode_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetOffboardMode_ResultSequenceToC(cSlice *CSetOffboardMode_ResultSequence, goSlice []SetOffboardMode_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__SetOffboardMode_Result)(C.malloc(C.sizeof_struct_as2_msgs__action__SetOffboardMode_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetOffboardMode_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetOffboardMode_ResultArrayToGo(goSlice []SetOffboardMode_Result, cSlice []CSetOffboardMode_Result) {
	for i := 0; i < len(cSlice); i++ {
		SetOffboardMode_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetOffboardMode_ResultArrayToC(cSlice []CSetOffboardMode_Result, goSlice []SetOffboardMode_Result) {
	for i := 0; i < len(goSlice); i++ {
		SetOffboardMode_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

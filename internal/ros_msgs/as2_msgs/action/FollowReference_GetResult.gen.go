// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/follow_reference.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("as2_msgs/FollowReference_GetResult", FollowReference_GetResultTypeSupport)
	humble.RegisterService("as2_msgs/action/FollowReference_GetResult", FollowReference_GetResultTypeSupport)
}

type _FollowReference_GetResultTypeSupport struct{}

func (s _FollowReference_GetResultTypeSupport) Request() humble.MessageTypeSupport {
	return FollowReference_GetResult_RequestTypeSupport
}

func (s _FollowReference_GetResultTypeSupport) Response() humble.MessageTypeSupport {
	return FollowReference_GetResult_ResponseTypeSupport
}

func (s _FollowReference_GetResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__action__FollowReference_GetResult())
}

// Modifying this variable is undefined behavior.
var FollowReference_GetResultTypeSupport humble.ServiceTypeSupport = _FollowReference_GetResultTypeSupport{}

// FollowReference_GetResultClient wraps humble.Client to provide type safe helper
// functions
type FollowReference_GetResultClient struct {
	*humble.Client
}

// NewFollowReference_GetResultClient creates and returns a new client for the
// FollowReference_GetResult
func NewFollowReference_GetResultClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*FollowReference_GetResultClient, error) {
	client, err := node.NewClient(serviceName, FollowReference_GetResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowReference_GetResultClient{client}, nil
}

func (s *FollowReference_GetResultClient) Send(ctx context.Context, req *FollowReference_GetResult_Request) (*FollowReference_GetResult_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*FollowReference_GetResult_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type FollowReference_GetResultServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s FollowReference_GetResultServiceResponseSender) SendResponse(resp *FollowReference_GetResult_Response) error {
	return s.sender.SendResponse(resp)
}

type FollowReference_GetResultServiceRequestHandler func(*humble.ServiceInfo, *FollowReference_GetResult_Request, FollowReference_GetResultServiceResponseSender)

// FollowReference_GetResultService wraps humble.Service to provide type safe helper
// functions
type FollowReference_GetResultService struct {
	*humble.Service
}

// NewFollowReference_GetResultService creates and returns a new service for the
// FollowReference_GetResult
func NewFollowReference_GetResultService(node *humble.Node, name string, options *humble.ServiceOptions, handler FollowReference_GetResultServiceRequestHandler) (*FollowReference_GetResultService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*FollowReference_GetResult_Request)
		responseSender := FollowReference_GetResultServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, FollowReference_GetResultTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &FollowReference_GetResultService{service}, nil
}

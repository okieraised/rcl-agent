// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/set_arming_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SetArmingState_Result", SetArmingState_ResultTypeSupport)
	humble.RegisterMessage("as2_msgs/action/SetArmingState_Result", SetArmingState_ResultTypeSupport)
}

type SetArmingState_Result struct {
	Success bool `yaml:"success"` // Response
}

// NewSetArmingState_Result creates a new SetArmingState_Result with default values.
func NewSetArmingState_Result() *SetArmingState_Result {
	self := SetArmingState_Result{}
	self.SetDefaults()
	return &self
}

func (t *SetArmingState_Result) Clone() *SetArmingState_Result {
	c := &SetArmingState_Result{}
	c.Success = t.Success
	return c
}

func (t *SetArmingState_Result) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetArmingState_Result) SetDefaults() {
	t.Success = false
}

func (t *SetArmingState_Result) GetTypeSupport() humble.MessageTypeSupport {
	return SetArmingState_ResultTypeSupport
}

// SetArmingState_ResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type SetArmingState_ResultPublisher struct {
	*humble.Publisher
}

// NewSetArmingState_ResultPublisher creates and returns a new publisher for the
// SetArmingState_Result
func NewSetArmingState_ResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetArmingState_ResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, SetArmingState_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetArmingState_ResultPublisher{pub}, nil
}

func (p *SetArmingState_ResultPublisher) Publish(msg *SetArmingState_Result) error {
	return p.Publisher.Publish(msg)
}

// SetArmingState_ResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetArmingState_ResultSubscription struct {
	*humble.Subscription
}

// SetArmingState_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a SetArmingState_ResultSubscription.
type SetArmingState_ResultSubscriptionCallback func(msg *SetArmingState_Result, info *humble.MessageInfo, err error)

// NewSetArmingState_ResultSubscription creates and returns a new subscription for the
// SetArmingState_Result
func NewSetArmingState_ResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetArmingState_ResultSubscriptionCallback) (*SetArmingState_ResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetArmingState_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetArmingState_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetArmingState_ResultSubscription{sub}, nil
}

func (s *SetArmingState_ResultSubscription) TakeMessage(out *SetArmingState_Result) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetArmingState_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetArmingState_ResultSlice(dst, src []SetArmingState_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetArmingState_ResultTypeSupport humble.MessageTypeSupport = _SetArmingState_ResultTypeSupport{}

type _SetArmingState_ResultTypeSupport struct{}

func (t _SetArmingState_ResultTypeSupport) New() humble.Message {
	return NewSetArmingState_Result()
}

func (t _SetArmingState_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__SetArmingState_Result
	return (unsafe.Pointer)(C.as2_msgs__action__SetArmingState_Result__create())
}

func (t _SetArmingState_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__SetArmingState_Result__destroy((*C.as2_msgs__action__SetArmingState_Result)(pointer_to_free))
}

func (t _SetArmingState_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SetArmingState_Result)
	mem := (*C.as2_msgs__action__SetArmingState_Result)(dst)
	mem.success = C.bool(m.Success)
}

func (t _SetArmingState_ResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetArmingState_Result)
	mem := (*C.as2_msgs__action__SetArmingState_Result)(ros2_message_buffer)
	m.Success = bool(mem.success)
}

func (t _SetArmingState_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__SetArmingState_Result())
}

type CSetArmingState_Result = C.as2_msgs__action__SetArmingState_Result
type CSetArmingState_ResultSequence = C.as2_msgs__action__SetArmingState_Result__Sequence

func SetArmingState_ResultSequenceToGo(goSlice *[]SetArmingState_Result, cSlice CSetArmingState_ResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetArmingState_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetArmingState_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetArmingState_ResultSequenceToC(cSlice *CSetArmingState_ResultSequence, goSlice []SetArmingState_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__SetArmingState_Result)(C.malloc(C.sizeof_struct_as2_msgs__action__SetArmingState_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetArmingState_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetArmingState_ResultArrayToGo(goSlice []SetArmingState_Result, cSlice []CSetArmingState_Result) {
	for i := 0; i < len(cSlice); i++ {
		SetArmingState_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetArmingState_ResultArrayToC(cSlice []CSetArmingState_Result, goSlice []SetArmingState_Result) {
	for i := 0; i < len(goSlice); i++ {
		SetArmingState_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

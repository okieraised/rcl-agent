// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/point_gimbal.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PointGimbal_Goal", PointGimbal_GoalTypeSupport)
	humble.RegisterMessage("as2_msgs/action/PointGimbal_Goal", PointGimbal_GoalTypeSupport)
}

type PointGimbal_Goal struct {
	Control    as2_msgs_msg.GimbalControl `yaml:"control"`     // Goal target. Request
	FollowMode bool                       `yaml:"follow_mode"` // Keep following after reach target
}

// NewPointGimbal_Goal creates a new PointGimbal_Goal with default values.
func NewPointGimbal_Goal() *PointGimbal_Goal {
	self := PointGimbal_Goal{}
	self.SetDefaults()
	return &self
}

func (t *PointGimbal_Goal) Clone() *PointGimbal_Goal {
	c := &PointGimbal_Goal{}
	c.Control = *t.Control.Clone()
	c.FollowMode = t.FollowMode
	return c
}

func (t *PointGimbal_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PointGimbal_Goal) SetDefaults() {
	t.Control.SetDefaults()
	t.FollowMode = false
}

func (t *PointGimbal_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return PointGimbal_GoalTypeSupport
}

// PointGimbal_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type PointGimbal_GoalPublisher struct {
	*humble.Publisher
}

// NewPointGimbal_GoalPublisher creates and returns a new publisher for the
// PointGimbal_Goal
func NewPointGimbal_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PointGimbal_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, PointGimbal_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_GoalPublisher{pub}, nil
}

func (p *PointGimbal_GoalPublisher) Publish(msg *PointGimbal_Goal) error {
	return p.Publisher.Publish(msg)
}

// PointGimbal_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type PointGimbal_GoalSubscription struct {
	*humble.Subscription
}

// PointGimbal_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a PointGimbal_GoalSubscription.
type PointGimbal_GoalSubscriptionCallback func(msg *PointGimbal_Goal, info *humble.MessageInfo, err error)

// NewPointGimbal_GoalSubscription creates and returns a new subscription for the
// PointGimbal_Goal
func NewPointGimbal_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PointGimbal_GoalSubscriptionCallback) (*PointGimbal_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PointGimbal_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PointGimbal_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PointGimbal_GoalSubscription{sub}, nil
}

func (s *PointGimbal_GoalSubscription) TakeMessage(out *PointGimbal_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePointGimbal_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePointGimbal_GoalSlice(dst, src []PointGimbal_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PointGimbal_GoalTypeSupport humble.MessageTypeSupport = _PointGimbal_GoalTypeSupport{}

type _PointGimbal_GoalTypeSupport struct{}

func (t _PointGimbal_GoalTypeSupport) New() humble.Message {
	return NewPointGimbal_Goal()
}

func (t _PointGimbal_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__PointGimbal_Goal
	return (unsafe.Pointer)(C.as2_msgs__action__PointGimbal_Goal__create())
}

func (t _PointGimbal_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__PointGimbal_Goal__destroy((*C.as2_msgs__action__PointGimbal_Goal)(pointer_to_free))
}

func (t _PointGimbal_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PointGimbal_Goal)
	mem := (*C.as2_msgs__action__PointGimbal_Goal)(dst)
	as2_msgs_msg.GimbalControlTypeSupport.AsCStruct(unsafe.Pointer(&mem.control), &m.Control)
	mem.follow_mode = C.bool(m.FollowMode)
}

func (t _PointGimbal_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PointGimbal_Goal)
	mem := (*C.as2_msgs__action__PointGimbal_Goal)(ros2_message_buffer)
	as2_msgs_msg.GimbalControlTypeSupport.AsGoStruct(&m.Control, unsafe.Pointer(&mem.control))
	m.FollowMode = bool(mem.follow_mode)
}

func (t _PointGimbal_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__PointGimbal_Goal())
}

type CPointGimbal_Goal = C.as2_msgs__action__PointGimbal_Goal
type CPointGimbal_GoalSequence = C.as2_msgs__action__PointGimbal_Goal__Sequence

func PointGimbal_GoalSequenceToGo(goSlice *[]PointGimbal_Goal, cSlice CPointGimbal_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PointGimbal_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PointGimbal_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PointGimbal_GoalSequenceToC(cSlice *CPointGimbal_GoalSequence, goSlice []PointGimbal_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__PointGimbal_Goal)(C.malloc(C.sizeof_struct_as2_msgs__action__PointGimbal_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PointGimbal_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PointGimbal_GoalArrayToGo(goSlice []PointGimbal_Goal, cSlice []CPointGimbal_Goal) {
	for i := 0; i < len(cSlice); i++ {
		PointGimbal_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PointGimbal_GoalArrayToC(cSlice []CPointGimbal_Goal, goSlice []PointGimbal_Goal) {
	for i := 0; i < len(goSlice); i++ {
		PointGimbal_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

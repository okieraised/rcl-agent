// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	unique_identifier_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/unique_identifier_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/detect_aruco_markers.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/DetectArucoMarkers_FeedbackMessage", DetectArucoMarkers_FeedbackMessageTypeSupport)
	humble.RegisterMessage("as2_msgs/action/DetectArucoMarkers_FeedbackMessage", DetectArucoMarkers_FeedbackMessageTypeSupport)
}

type DetectArucoMarkers_FeedbackMessage struct {
	GoalID   unique_identifier_msgs_msg.UUID `yaml:"goal_id"`
	Feedback DetectArucoMarkers_Feedback     `yaml:"feedback"`
}

// NewDetectArucoMarkers_FeedbackMessage creates a new DetectArucoMarkers_FeedbackMessage with default values.
func NewDetectArucoMarkers_FeedbackMessage() *DetectArucoMarkers_FeedbackMessage {
	self := DetectArucoMarkers_FeedbackMessage{}
	self.SetDefaults()
	return &self
}

func (t *DetectArucoMarkers_FeedbackMessage) Clone() *DetectArucoMarkers_FeedbackMessage {
	c := &DetectArucoMarkers_FeedbackMessage{}
	c.GoalID = *t.GoalID.Clone()
	c.Feedback = *t.Feedback.Clone()
	return c
}

func (t *DetectArucoMarkers_FeedbackMessage) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *DetectArucoMarkers_FeedbackMessage) SetDefaults() {
	t.GoalID.SetDefaults()
	t.Feedback.SetDefaults()
}

func (t *DetectArucoMarkers_FeedbackMessage) GetTypeSupport() humble.MessageTypeSupport {
	return DetectArucoMarkers_FeedbackMessageTypeSupport
}
func (t *DetectArucoMarkers_FeedbackMessage) GetGoalID() *humble.GoalID {
	return (*humble.GoalID)(&t.GoalID.Uuid)
}

func (t *DetectArucoMarkers_FeedbackMessage) SetGoalID(id *humble.GoalID) {
	t.GoalID.Uuid = *id
}

// DetectArucoMarkers_FeedbackMessagePublisher wraps humble.Publisher to provide type safe helper
// functions
type DetectArucoMarkers_FeedbackMessagePublisher struct {
	*humble.Publisher
}

// NewDetectArucoMarkers_FeedbackMessagePublisher creates and returns a new publisher for the
// DetectArucoMarkers_FeedbackMessage
func NewDetectArucoMarkers_FeedbackMessagePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*DetectArucoMarkers_FeedbackMessagePublisher, error) {
	pub, err := node.NewPublisher(topicName, DetectArucoMarkers_FeedbackMessageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkers_FeedbackMessagePublisher{pub}, nil
}

func (p *DetectArucoMarkers_FeedbackMessagePublisher) Publish(msg *DetectArucoMarkers_FeedbackMessage) error {
	return p.Publisher.Publish(msg)
}

// DetectArucoMarkers_FeedbackMessageSubscription wraps humble.Subscription to provide type safe helper
// functions
type DetectArucoMarkers_FeedbackMessageSubscription struct {
	*humble.Subscription
}

// DetectArucoMarkers_FeedbackMessageSubscriptionCallback type is used to provide a subscription
// handler function for a DetectArucoMarkers_FeedbackMessageSubscription.
type DetectArucoMarkers_FeedbackMessageSubscriptionCallback func(msg *DetectArucoMarkers_FeedbackMessage, info *humble.MessageInfo, err error)

// NewDetectArucoMarkers_FeedbackMessageSubscription creates and returns a new subscription for the
// DetectArucoMarkers_FeedbackMessage
func NewDetectArucoMarkers_FeedbackMessageSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback DetectArucoMarkers_FeedbackMessageSubscriptionCallback) (*DetectArucoMarkers_FeedbackMessageSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg DetectArucoMarkers_FeedbackMessage
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, DetectArucoMarkers_FeedbackMessageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkers_FeedbackMessageSubscription{sub}, nil
}

func (s *DetectArucoMarkers_FeedbackMessageSubscription) TakeMessage(out *DetectArucoMarkers_FeedbackMessage) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDetectArucoMarkers_FeedbackMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDetectArucoMarkers_FeedbackMessageSlice(dst, src []DetectArucoMarkers_FeedbackMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DetectArucoMarkers_FeedbackMessageTypeSupport humble.MessageTypeSupport = _DetectArucoMarkers_FeedbackMessageTypeSupport{}

type _DetectArucoMarkers_FeedbackMessageTypeSupport struct{}

func (t _DetectArucoMarkers_FeedbackMessageTypeSupport) New() humble.Message {
	return NewDetectArucoMarkers_FeedbackMessage()
}

func (t _DetectArucoMarkers_FeedbackMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage
	return (unsafe.Pointer)(C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage__create())
}

func (t _DetectArucoMarkers_FeedbackMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage__destroy((*C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage)(pointer_to_free))
}

func (t _DetectArucoMarkers_FeedbackMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*DetectArucoMarkers_FeedbackMessage)
	mem := (*C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_id), &m.GoalID)
	DetectArucoMarkers_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&mem.feedback), &m.Feedback)
}

func (t _DetectArucoMarkers_FeedbackMessageTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DetectArucoMarkers_FeedbackMessage)
	mem := (*C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.GoalID, unsafe.Pointer(&mem.goal_id))
	DetectArucoMarkers_FeedbackTypeSupport.AsGoStruct(&m.Feedback, unsafe.Pointer(&mem.feedback))
}

func (t _DetectArucoMarkers_FeedbackMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__DetectArucoMarkers_FeedbackMessage())
}

type CDetectArucoMarkers_FeedbackMessage = C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage
type CDetectArucoMarkers_FeedbackMessageSequence = C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage__Sequence

func DetectArucoMarkers_FeedbackMessageSequenceToGo(goSlice *[]DetectArucoMarkers_FeedbackMessage, cSlice CDetectArucoMarkers_FeedbackMessageSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DetectArucoMarkers_FeedbackMessage, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DetectArucoMarkers_FeedbackMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func DetectArucoMarkers_FeedbackMessageSequenceToC(cSlice *CDetectArucoMarkers_FeedbackMessageSequence, goSlice []DetectArucoMarkers_FeedbackMessage) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__DetectArucoMarkers_FeedbackMessage)(C.malloc(C.sizeof_struct_as2_msgs__action__DetectArucoMarkers_FeedbackMessage * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DetectArucoMarkers_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func DetectArucoMarkers_FeedbackMessageArrayToGo(goSlice []DetectArucoMarkers_FeedbackMessage, cSlice []CDetectArucoMarkers_FeedbackMessage) {
	for i := 0; i < len(cSlice); i++ {
		DetectArucoMarkers_FeedbackMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func DetectArucoMarkers_FeedbackMessageArrayToC(cSlice []CDetectArucoMarkers_FeedbackMessage, goSlice []DetectArucoMarkers_FeedbackMessage) {
	for i := 0; i < len(goSlice); i++ {
		DetectArucoMarkers_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

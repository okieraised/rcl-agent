// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/detect_aruco_markers.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/DetectArucoMarkers_Feedback", DetectArucoMarkers_FeedbackTypeSupport)
	humble.RegisterMessage("as2_msgs/action/DetectArucoMarkers_Feedback", DetectArucoMarkers_FeedbackTypeSupport)
}

type DetectArucoMarkers_Feedback struct {
	Sucess bool `yaml:"sucess"` // Feedback
}

// NewDetectArucoMarkers_Feedback creates a new DetectArucoMarkers_Feedback with default values.
func NewDetectArucoMarkers_Feedback() *DetectArucoMarkers_Feedback {
	self := DetectArucoMarkers_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *DetectArucoMarkers_Feedback) Clone() *DetectArucoMarkers_Feedback {
	c := &DetectArucoMarkers_Feedback{}
	c.Sucess = t.Sucess
	return c
}

func (t *DetectArucoMarkers_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *DetectArucoMarkers_Feedback) SetDefaults() {
	t.Sucess = false
}

func (t *DetectArucoMarkers_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return DetectArucoMarkers_FeedbackTypeSupport
}

// DetectArucoMarkers_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type DetectArucoMarkers_FeedbackPublisher struct {
	*humble.Publisher
}

// NewDetectArucoMarkers_FeedbackPublisher creates and returns a new publisher for the
// DetectArucoMarkers_Feedback
func NewDetectArucoMarkers_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*DetectArucoMarkers_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, DetectArucoMarkers_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkers_FeedbackPublisher{pub}, nil
}

func (p *DetectArucoMarkers_FeedbackPublisher) Publish(msg *DetectArucoMarkers_Feedback) error {
	return p.Publisher.Publish(msg)
}

// DetectArucoMarkers_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type DetectArucoMarkers_FeedbackSubscription struct {
	*humble.Subscription
}

// DetectArucoMarkers_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a DetectArucoMarkers_FeedbackSubscription.
type DetectArucoMarkers_FeedbackSubscriptionCallback func(msg *DetectArucoMarkers_Feedback, info *humble.MessageInfo, err error)

// NewDetectArucoMarkers_FeedbackSubscription creates and returns a new subscription for the
// DetectArucoMarkers_Feedback
func NewDetectArucoMarkers_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback DetectArucoMarkers_FeedbackSubscriptionCallback) (*DetectArucoMarkers_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg DetectArucoMarkers_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, DetectArucoMarkers_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkers_FeedbackSubscription{sub}, nil
}

func (s *DetectArucoMarkers_FeedbackSubscription) TakeMessage(out *DetectArucoMarkers_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDetectArucoMarkers_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDetectArucoMarkers_FeedbackSlice(dst, src []DetectArucoMarkers_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DetectArucoMarkers_FeedbackTypeSupport humble.MessageTypeSupport = _DetectArucoMarkers_FeedbackTypeSupport{}

type _DetectArucoMarkers_FeedbackTypeSupport struct{}

func (t _DetectArucoMarkers_FeedbackTypeSupport) New() humble.Message {
	return NewDetectArucoMarkers_Feedback()
}

func (t _DetectArucoMarkers_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__DetectArucoMarkers_Feedback
	return (unsafe.Pointer)(C.as2_msgs__action__DetectArucoMarkers_Feedback__create())
}

func (t _DetectArucoMarkers_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__DetectArucoMarkers_Feedback__destroy((*C.as2_msgs__action__DetectArucoMarkers_Feedback)(pointer_to_free))
}

func (t _DetectArucoMarkers_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*DetectArucoMarkers_Feedback)
	mem := (*C.as2_msgs__action__DetectArucoMarkers_Feedback)(dst)
	mem.sucess = C.bool(m.Sucess)
}

func (t _DetectArucoMarkers_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DetectArucoMarkers_Feedback)
	mem := (*C.as2_msgs__action__DetectArucoMarkers_Feedback)(ros2_message_buffer)
	m.Sucess = bool(mem.sucess)
}

func (t _DetectArucoMarkers_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__DetectArucoMarkers_Feedback())
}

type CDetectArucoMarkers_Feedback = C.as2_msgs__action__DetectArucoMarkers_Feedback
type CDetectArucoMarkers_FeedbackSequence = C.as2_msgs__action__DetectArucoMarkers_Feedback__Sequence

func DetectArucoMarkers_FeedbackSequenceToGo(goSlice *[]DetectArucoMarkers_Feedback, cSlice CDetectArucoMarkers_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DetectArucoMarkers_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DetectArucoMarkers_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func DetectArucoMarkers_FeedbackSequenceToC(cSlice *CDetectArucoMarkers_FeedbackSequence, goSlice []DetectArucoMarkers_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__DetectArucoMarkers_Feedback)(C.malloc(C.sizeof_struct_as2_msgs__action__DetectArucoMarkers_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DetectArucoMarkers_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func DetectArucoMarkers_FeedbackArrayToGo(goSlice []DetectArucoMarkers_Feedback, cSlice []CDetectArucoMarkers_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		DetectArucoMarkers_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func DetectArucoMarkers_FeedbackArrayToC(cSlice []CDetectArucoMarkers_Feedback, goSlice []DetectArucoMarkers_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		DetectArucoMarkers_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

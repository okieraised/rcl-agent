// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/swarm_flocking.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SwarmFlocking_GetResult_Response", SwarmFlocking_GetResult_ResponseTypeSupport)
	humble.RegisterMessage("as2_msgs/action/SwarmFlocking_GetResult_Response", SwarmFlocking_GetResult_ResponseTypeSupport)
}

type SwarmFlocking_GetResult_Response struct {
	Status int8                 `yaml:"status"`
	Result SwarmFlocking_Result `yaml:"result"`
}

// NewSwarmFlocking_GetResult_Response creates a new SwarmFlocking_GetResult_Response with default values.
func NewSwarmFlocking_GetResult_Response() *SwarmFlocking_GetResult_Response {
	self := SwarmFlocking_GetResult_Response{}
	self.SetDefaults()
	return &self
}

func (t *SwarmFlocking_GetResult_Response) Clone() *SwarmFlocking_GetResult_Response {
	c := &SwarmFlocking_GetResult_Response{}
	c.Status = t.Status
	c.Result = *t.Result.Clone()
	return c
}

func (t *SwarmFlocking_GetResult_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SwarmFlocking_GetResult_Response) SetDefaults() {
	t.Status = 0
	t.Result.SetDefaults()
}

func (t *SwarmFlocking_GetResult_Response) GetTypeSupport() humble.MessageTypeSupport {
	return SwarmFlocking_GetResult_ResponseTypeSupport
}

// SwarmFlocking_GetResult_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type SwarmFlocking_GetResult_ResponsePublisher struct {
	*humble.Publisher
}

// NewSwarmFlocking_GetResult_ResponsePublisher creates and returns a new publisher for the
// SwarmFlocking_GetResult_Response
func NewSwarmFlocking_GetResult_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SwarmFlocking_GetResult_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, SwarmFlocking_GetResult_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SwarmFlocking_GetResult_ResponsePublisher{pub}, nil
}

func (p *SwarmFlocking_GetResult_ResponsePublisher) Publish(msg *SwarmFlocking_GetResult_Response) error {
	return p.Publisher.Publish(msg)
}

// SwarmFlocking_GetResult_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type SwarmFlocking_GetResult_ResponseSubscription struct {
	*humble.Subscription
}

// SwarmFlocking_GetResult_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a SwarmFlocking_GetResult_ResponseSubscription.
type SwarmFlocking_GetResult_ResponseSubscriptionCallback func(msg *SwarmFlocking_GetResult_Response, info *humble.MessageInfo, err error)

// NewSwarmFlocking_GetResult_ResponseSubscription creates and returns a new subscription for the
// SwarmFlocking_GetResult_Response
func NewSwarmFlocking_GetResult_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SwarmFlocking_GetResult_ResponseSubscriptionCallback) (*SwarmFlocking_GetResult_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SwarmFlocking_GetResult_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SwarmFlocking_GetResult_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SwarmFlocking_GetResult_ResponseSubscription{sub}, nil
}

func (s *SwarmFlocking_GetResult_ResponseSubscription) TakeMessage(out *SwarmFlocking_GetResult_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSwarmFlocking_GetResult_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSwarmFlocking_GetResult_ResponseSlice(dst, src []SwarmFlocking_GetResult_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SwarmFlocking_GetResult_ResponseTypeSupport humble.MessageTypeSupport = _SwarmFlocking_GetResult_ResponseTypeSupport{}

type _SwarmFlocking_GetResult_ResponseTypeSupport struct{}

func (t _SwarmFlocking_GetResult_ResponseTypeSupport) New() humble.Message {
	return NewSwarmFlocking_GetResult_Response()
}

func (t _SwarmFlocking_GetResult_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__SwarmFlocking_GetResult_Response
	return (unsafe.Pointer)(C.as2_msgs__action__SwarmFlocking_GetResult_Response__create())
}

func (t _SwarmFlocking_GetResult_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__SwarmFlocking_GetResult_Response__destroy((*C.as2_msgs__action__SwarmFlocking_GetResult_Response)(pointer_to_free))
}

func (t _SwarmFlocking_GetResult_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SwarmFlocking_GetResult_Response)
	mem := (*C.as2_msgs__action__SwarmFlocking_GetResult_Response)(dst)
	mem.status = C.int8_t(m.Status)
	SwarmFlocking_ResultTypeSupport.AsCStruct(unsafe.Pointer(&mem.result), &m.Result)
}

func (t _SwarmFlocking_GetResult_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SwarmFlocking_GetResult_Response)
	mem := (*C.as2_msgs__action__SwarmFlocking_GetResult_Response)(ros2_message_buffer)
	m.Status = int8(mem.status)
	SwarmFlocking_ResultTypeSupport.AsGoStruct(&m.Result, unsafe.Pointer(&mem.result))
}

func (t _SwarmFlocking_GetResult_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__SwarmFlocking_GetResult_Response())
}

type CSwarmFlocking_GetResult_Response = C.as2_msgs__action__SwarmFlocking_GetResult_Response
type CSwarmFlocking_GetResult_ResponseSequence = C.as2_msgs__action__SwarmFlocking_GetResult_Response__Sequence

func SwarmFlocking_GetResult_ResponseSequenceToGo(goSlice *[]SwarmFlocking_GetResult_Response, cSlice CSwarmFlocking_GetResult_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SwarmFlocking_GetResult_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SwarmFlocking_GetResult_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SwarmFlocking_GetResult_ResponseSequenceToC(cSlice *CSwarmFlocking_GetResult_ResponseSequence, goSlice []SwarmFlocking_GetResult_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__SwarmFlocking_GetResult_Response)(C.malloc(C.sizeof_struct_as2_msgs__action__SwarmFlocking_GetResult_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SwarmFlocking_GetResult_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SwarmFlocking_GetResult_ResponseArrayToGo(goSlice []SwarmFlocking_GetResult_Response, cSlice []CSwarmFlocking_GetResult_Response) {
	for i := 0; i < len(cSlice); i++ {
		SwarmFlocking_GetResult_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SwarmFlocking_GetResult_ResponseArrayToC(cSlice []CSwarmFlocking_GetResult_Response, goSlice []SwarmFlocking_GetResult_Response) {
	for i := 0; i < len(goSlice); i++ {
		SwarmFlocking_GetResult_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

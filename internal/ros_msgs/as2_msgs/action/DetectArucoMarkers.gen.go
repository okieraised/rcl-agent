// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/action/detect_aruco_markers.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/okieraised/rclgo/humble"

	action_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/action_msgs/msg"
	action_msgs_srv "github.com/okieraised/monitoring-agent/internal/ros_msgs/action_msgs/srv"
)

func init() {
	humble.RegisterAction("as2_msgs/DetectArucoMarkers", DetectArucoMarkersTypeSupport)
	humble.RegisterAction("as2_msgs/action/DetectArucoMarkers", DetectArucoMarkersTypeSupport)
}

type _DetectArucoMarkersTypeSupport struct {}

func (s _DetectArucoMarkersTypeSupport) Goal() humble.MessageTypeSupport {
	return DetectArucoMarkers_GoalTypeSupport
}

func (s _DetectArucoMarkersTypeSupport) SendGoal() humble.ServiceTypeSupport {
	return DetectArucoMarkers_SendGoalTypeSupport
}

func (s _DetectArucoMarkersTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) humble.Message {
	msg := NewDetectArucoMarkers_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _DetectArucoMarkersTypeSupport) Result() humble.MessageTypeSupport {
	return DetectArucoMarkers_ResultTypeSupport
}

func (s _DetectArucoMarkersTypeSupport) GetResult() humble.ServiceTypeSupport {
	return DetectArucoMarkers_GetResultTypeSupport
}

func (s _DetectArucoMarkersTypeSupport) NewGetResultResponse(status int8, result humble.Message) humble.Message {
	msg := NewDetectArucoMarkers_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewDetectArucoMarkers_Result()
	} else {
		msg.Result = *result.(*DetectArucoMarkers_Result)
	}
	return msg
}

func (s _DetectArucoMarkersTypeSupport) CancelGoal() humble.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _DetectArucoMarkersTypeSupport) Feedback() humble.MessageTypeSupport {
	return DetectArucoMarkers_FeedbackTypeSupport
}

func (s _DetectArucoMarkersTypeSupport) FeedbackMessage() humble.MessageTypeSupport {
	return DetectArucoMarkers_FeedbackMessageTypeSupport
}

func (s _DetectArucoMarkersTypeSupport) NewFeedbackMessage(goalID *humble.GoalID, feedback humble.Message) humble.Message {
	msg := NewDetectArucoMarkers_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*DetectArucoMarkers_Feedback)
	return msg
}

func (s _DetectArucoMarkersTypeSupport) GoalStatusArray() humble.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _DetectArucoMarkersTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__as2_msgs__action__DetectArucoMarkers())
}

// Modifying this variable is undefined behavior.
var DetectArucoMarkersTypeSupport humble.ActionTypeSupport = _DetectArucoMarkersTypeSupport{}

type DetectArucoMarkersFeedbackSender struct {
	sender humble.FeedbackSender
}

func (s *DetectArucoMarkersFeedbackSender) Send(msg *DetectArucoMarkers_Feedback) error {
	return s.sender.Send(msg)
}

type DetectArucoMarkersGoalHandle struct{
	*humble.GoalHandle

	Description *DetectArucoMarkers_Goal
}

func (g *DetectArucoMarkersGoalHandle) Accept() (*DetectArucoMarkersFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkersFeedbackSender{*s}, nil
}

type DetectArucoMarkersAction interface {
	ExecuteGoal(context.Context, *DetectArucoMarkersGoalHandle) (*DetectArucoMarkers_Result, error)
}

func NewDetectArucoMarkersAction(
	executeGoal func(context.Context, *DetectArucoMarkersGoalHandle) (*DetectArucoMarkers_Result, error),
) DetectArucoMarkersAction {
	return _DetectArucoMarkersFuncAction(executeGoal)
}

type _DetectArucoMarkersFuncAction func(context.Context, *DetectArucoMarkersGoalHandle) (*DetectArucoMarkers_Result, error)

func (a _DetectArucoMarkersFuncAction) ExecuteGoal(
	ctx context.Context, goal *DetectArucoMarkersGoalHandle,
) (*DetectArucoMarkers_Result, error) {
	return a(ctx, goal)
}

type _DetectArucoMarkersAction struct {
	action DetectArucoMarkersAction
}

func (a _DetectArucoMarkersAction) ExecuteGoal(ctx context.Context, handle *humble.GoalHandle) (humble.Message, error) {
	return a.action.ExecuteGoal(ctx, &DetectArucoMarkersGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*DetectArucoMarkers_Goal),
	})
}

func (a _DetectArucoMarkersAction) TypeSupport() humble.ActionTypeSupport {
	return DetectArucoMarkersTypeSupport
}

type DetectArucoMarkersServer struct{
	*humble.ActionServer
}

func NewDetectArucoMarkersServer(node *humble.Node, name string, action DetectArucoMarkersAction, opts *humble.ActionServerOptions) (*DetectArucoMarkersServer, error) {
	server, err := node.NewActionServer(name, _DetectArucoMarkersAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkersServer{server}, nil
}

type DetectArucoMarkersFeedbackHandler func(context.Context, *DetectArucoMarkers_FeedbackMessage)

type DetectArucoMarkersStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type DetectArucoMarkersClient struct{
	*humble.ActionClient
}

func NewDetectArucoMarkersClient(node *humble.Node, name string, opts *humble.ActionClientOptions) (*DetectArucoMarkersClient, error) {
	client, err := node.NewActionClient(name, DetectArucoMarkersTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &DetectArucoMarkersClient{client}, nil
}

func (c *DetectArucoMarkersClient) WatchGoal(ctx context.Context, goal *DetectArucoMarkers_Goal, onFeedback DetectArucoMarkersFeedbackHandler) (*DetectArucoMarkers_GetResult_Response, *humble.GoalID, error) {
	var resp humble.Message
	var goalID *humble.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg humble.Message) {
			onFeedback(ctx, msg.(*DetectArucoMarkers_FeedbackMessage))
		})
	}
	if r, ok := resp.(*DetectArucoMarkers_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *DetectArucoMarkersClient) SendGoal(ctx context.Context, goal *DetectArucoMarkers_Goal) (*DetectArucoMarkers_SendGoal_Response, *humble.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*DetectArucoMarkers_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *DetectArucoMarkersClient) SendGoalRequest(ctx context.Context, request *DetectArucoMarkers_SendGoal_Request) (*DetectArucoMarkers_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*DetectArucoMarkers_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *DetectArucoMarkersClient) GetResult(ctx context.Context, goalID *humble.GoalID) (*DetectArucoMarkers_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*DetectArucoMarkers_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *DetectArucoMarkersClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *DetectArucoMarkersClient) WatchFeedback(ctx context.Context, goalID *humble.GoalID, handler DetectArucoMarkersFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg humble.Message) {
		handler(ctx, msg.(*DetectArucoMarkers_FeedbackMessage))
	})
}

func (c *DetectArucoMarkersClient) WatchStatus(ctx context.Context, goalID *humble.GoalID, handler DetectArucoMarkersStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg humble.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}

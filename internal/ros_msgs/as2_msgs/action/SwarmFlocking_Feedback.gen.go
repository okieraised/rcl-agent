// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_action

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/action/swarm_flocking.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SwarmFlocking_Feedback", SwarmFlocking_FeedbackTypeSupport)
	humble.RegisterMessage("as2_msgs/action/SwarmFlocking_Feedback", SwarmFlocking_FeedbackTypeSupport)
}

type SwarmFlocking_Feedback struct {
	SwarmPose geometry_msgs_msg.Pose `yaml:"swarm_pose"` // Current swarm pose. Feedback
}

// NewSwarmFlocking_Feedback creates a new SwarmFlocking_Feedback with default values.
func NewSwarmFlocking_Feedback() *SwarmFlocking_Feedback {
	self := SwarmFlocking_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *SwarmFlocking_Feedback) Clone() *SwarmFlocking_Feedback {
	c := &SwarmFlocking_Feedback{}
	c.SwarmPose = *t.SwarmPose.Clone()
	return c
}

func (t *SwarmFlocking_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SwarmFlocking_Feedback) SetDefaults() {
	t.SwarmPose.SetDefaults()
}

func (t *SwarmFlocking_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return SwarmFlocking_FeedbackTypeSupport
}

// SwarmFlocking_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type SwarmFlocking_FeedbackPublisher struct {
	*humble.Publisher
}

// NewSwarmFlocking_FeedbackPublisher creates and returns a new publisher for the
// SwarmFlocking_Feedback
func NewSwarmFlocking_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SwarmFlocking_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, SwarmFlocking_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SwarmFlocking_FeedbackPublisher{pub}, nil
}

func (p *SwarmFlocking_FeedbackPublisher) Publish(msg *SwarmFlocking_Feedback) error {
	return p.Publisher.Publish(msg)
}

// SwarmFlocking_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type SwarmFlocking_FeedbackSubscription struct {
	*humble.Subscription
}

// SwarmFlocking_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a SwarmFlocking_FeedbackSubscription.
type SwarmFlocking_FeedbackSubscriptionCallback func(msg *SwarmFlocking_Feedback, info *humble.MessageInfo, err error)

// NewSwarmFlocking_FeedbackSubscription creates and returns a new subscription for the
// SwarmFlocking_Feedback
func NewSwarmFlocking_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SwarmFlocking_FeedbackSubscriptionCallback) (*SwarmFlocking_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SwarmFlocking_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SwarmFlocking_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SwarmFlocking_FeedbackSubscription{sub}, nil
}

func (s *SwarmFlocking_FeedbackSubscription) TakeMessage(out *SwarmFlocking_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSwarmFlocking_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSwarmFlocking_FeedbackSlice(dst, src []SwarmFlocking_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SwarmFlocking_FeedbackTypeSupport humble.MessageTypeSupport = _SwarmFlocking_FeedbackTypeSupport{}

type _SwarmFlocking_FeedbackTypeSupport struct{}

func (t _SwarmFlocking_FeedbackTypeSupport) New() humble.Message {
	return NewSwarmFlocking_Feedback()
}

func (t _SwarmFlocking_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__action__SwarmFlocking_Feedback
	return (unsafe.Pointer)(C.as2_msgs__action__SwarmFlocking_Feedback__create())
}

func (t _SwarmFlocking_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__action__SwarmFlocking_Feedback__destroy((*C.as2_msgs__action__SwarmFlocking_Feedback)(pointer_to_free))
}

func (t _SwarmFlocking_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SwarmFlocking_Feedback)
	mem := (*C.as2_msgs__action__SwarmFlocking_Feedback)(dst)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.swarm_pose), &m.SwarmPose)
}

func (t _SwarmFlocking_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SwarmFlocking_Feedback)
	mem := (*C.as2_msgs__action__SwarmFlocking_Feedback)(ros2_message_buffer)
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.SwarmPose, unsafe.Pointer(&mem.swarm_pose))
}

func (t _SwarmFlocking_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__action__SwarmFlocking_Feedback())
}

type CSwarmFlocking_Feedback = C.as2_msgs__action__SwarmFlocking_Feedback
type CSwarmFlocking_FeedbackSequence = C.as2_msgs__action__SwarmFlocking_Feedback__Sequence

func SwarmFlocking_FeedbackSequenceToGo(goSlice *[]SwarmFlocking_Feedback, cSlice CSwarmFlocking_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SwarmFlocking_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SwarmFlocking_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SwarmFlocking_FeedbackSequenceToC(cSlice *CSwarmFlocking_FeedbackSequence, goSlice []SwarmFlocking_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__action__SwarmFlocking_Feedback)(C.malloc(C.sizeof_struct_as2_msgs__action__SwarmFlocking_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SwarmFlocking_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SwarmFlocking_FeedbackArrayToGo(goSlice []SwarmFlocking_Feedback, cSlice []CSwarmFlocking_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		SwarmFlocking_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SwarmFlocking_FeedbackArrayToC(cSlice []CSwarmFlocking_Feedback, goSlice []SwarmFlocking_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		SwarmFlocking_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/get_geozone.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GetGeozone_Request", GetGeozone_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/GetGeozone_Request", GetGeozone_RequestTypeSupport)
}

type GetGeozone_Request struct {
}

// NewGetGeozone_Request creates a new GetGeozone_Request with default values.
func NewGetGeozone_Request() *GetGeozone_Request {
	self := GetGeozone_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetGeozone_Request) Clone() *GetGeozone_Request {
	c := &GetGeozone_Request{}
	return c
}

func (t *GetGeozone_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GetGeozone_Request) SetDefaults() {
}

func (t *GetGeozone_Request) GetTypeSupport() humble.MessageTypeSupport {
	return GetGeozone_RequestTypeSupport
}

// GetGeozone_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type GetGeozone_RequestPublisher struct {
	*humble.Publisher
}

// NewGetGeozone_RequestPublisher creates and returns a new publisher for the
// GetGeozone_Request
func NewGetGeozone_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GetGeozone_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, GetGeozone_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetGeozone_RequestPublisher{pub}, nil
}

func (p *GetGeozone_RequestPublisher) Publish(msg *GetGeozone_Request) error {
	return p.Publisher.Publish(msg)
}

// GetGeozone_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type GetGeozone_RequestSubscription struct {
	*humble.Subscription
}

// GetGeozone_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetGeozone_RequestSubscription.
type GetGeozone_RequestSubscriptionCallback func(msg *GetGeozone_Request, info *humble.MessageInfo, err error)

// NewGetGeozone_RequestSubscription creates and returns a new subscription for the
// GetGeozone_Request
func NewGetGeozone_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GetGeozone_RequestSubscriptionCallback) (*GetGeozone_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GetGeozone_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetGeozone_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetGeozone_RequestSubscription{sub}, nil
}

func (s *GetGeozone_RequestSubscription) TakeMessage(out *GetGeozone_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetGeozone_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetGeozone_RequestSlice(dst, src []GetGeozone_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetGeozone_RequestTypeSupport humble.MessageTypeSupport = _GetGeozone_RequestTypeSupport{}

type _GetGeozone_RequestTypeSupport struct{}

func (t _GetGeozone_RequestTypeSupport) New() humble.Message {
	return NewGetGeozone_Request()
}

func (t _GetGeozone_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__GetGeozone_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__GetGeozone_Request__create())
}

func (t _GetGeozone_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__GetGeozone_Request__destroy((*C.as2_msgs__srv__GetGeozone_Request)(pointer_to_free))
}

func (t _GetGeozone_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {

}

func (t _GetGeozone_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _GetGeozone_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__GetGeozone_Request())
}

type CGetGeozone_Request = C.as2_msgs__srv__GetGeozone_Request
type CGetGeozone_RequestSequence = C.as2_msgs__srv__GetGeozone_Request__Sequence

func GetGeozone_RequestSequenceToGo(goSlice *[]GetGeozone_Request, cSlice CGetGeozone_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetGeozone_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetGeozone_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetGeozone_RequestSequenceToC(cSlice *CGetGeozone_RequestSequence, goSlice []GetGeozone_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__GetGeozone_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__GetGeozone_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetGeozone_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetGeozone_RequestArrayToGo(goSlice []GetGeozone_Request, cSlice []CGetGeozone_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetGeozone_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetGeozone_RequestArrayToC(cSlice []CGetGeozone_Request, goSlice []GetGeozone_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetGeozone_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

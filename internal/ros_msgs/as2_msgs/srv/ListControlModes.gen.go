// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/list_control_modes.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("as2_msgs/ListControlModes", ListControlModesTypeSupport)
	humble.RegisterService("as2_msgs/srv/ListControlModes", ListControlModesTypeSupport)
}

type _ListControlModesTypeSupport struct {}

func (s _ListControlModesTypeSupport) Request() humble.MessageTypeSupport {
	return ListControlModes_RequestTypeSupport
}

func (s _ListControlModesTypeSupport) Response() humble.MessageTypeSupport {
	return ListControlModes_ResponseTypeSupport
}

func (s _ListControlModesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__ListControlModes())
}

// Modifying this variable is undefined behavior.
var ListControlModesTypeSupport humble.ServiceTypeSupport = _ListControlModesTypeSupport{}

// ListControlModesClient wraps humble.Client to provide type safe helper
// functions
type ListControlModesClient struct {
	*humble.Client
}

// NewListControlModesClient creates and returns a new client for the
// ListControlModes
func NewListControlModesClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*ListControlModesClient, error) {
	client, err := node.NewClient(serviceName, ListControlModesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListControlModesClient{client}, nil
}

func (s *ListControlModesClient) Send(ctx context.Context, req *ListControlModes_Request) (*ListControlModes_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ListControlModes_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ListControlModesServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s ListControlModesServiceResponseSender) SendResponse(resp *ListControlModes_Response) error {
	return s.sender.SendResponse(resp)
}

type ListControlModesServiceRequestHandler func(*humble.ServiceInfo, *ListControlModes_Request, ListControlModesServiceResponseSender)

// ListControlModesService wraps humble.Service to provide type safe helper
// functions
type ListControlModesService struct {
	*humble.Service
}

// NewListControlModesService creates and returns a new service for the
// ListControlModes
func NewListControlModesService(node *humble.Node, name string, options *humble.ServiceOptions, handler ListControlModesServiceRequestHandler) (*ListControlModesService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*ListControlModes_Request)
		responseSender := ListControlModesServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ListControlModesTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ListControlModesService{service}, nil
}
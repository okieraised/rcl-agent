// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/set_speed.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SetSpeed_Request", SetSpeed_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/SetSpeed_Request", SetSpeed_RequestTypeSupport)
}

type SetSpeed_Request struct {
	Speed as2_msgs_msg.Speed `yaml:"speed"` // speed to send
}

// NewSetSpeed_Request creates a new SetSpeed_Request with default values.
func NewSetSpeed_Request() *SetSpeed_Request {
	self := SetSpeed_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetSpeed_Request) Clone() *SetSpeed_Request {
	c := &SetSpeed_Request{}
	c.Speed = *t.Speed.Clone()
	return c
}

func (t *SetSpeed_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetSpeed_Request) SetDefaults() {
	t.Speed.SetDefaults()
}

func (t *SetSpeed_Request) GetTypeSupport() humble.MessageTypeSupport {
	return SetSpeed_RequestTypeSupport
}

// SetSpeed_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type SetSpeed_RequestPublisher struct {
	*humble.Publisher
}

// NewSetSpeed_RequestPublisher creates and returns a new publisher for the
// SetSpeed_Request
func NewSetSpeed_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetSpeed_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, SetSpeed_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetSpeed_RequestPublisher{pub}, nil
}

func (p *SetSpeed_RequestPublisher) Publish(msg *SetSpeed_Request) error {
	return p.Publisher.Publish(msg)
}

// SetSpeed_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetSpeed_RequestSubscription struct {
	*humble.Subscription
}

// SetSpeed_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SetSpeed_RequestSubscription.
type SetSpeed_RequestSubscriptionCallback func(msg *SetSpeed_Request, info *humble.MessageInfo, err error)

// NewSetSpeed_RequestSubscription creates and returns a new subscription for the
// SetSpeed_Request
func NewSetSpeed_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetSpeed_RequestSubscriptionCallback) (*SetSpeed_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetSpeed_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetSpeed_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetSpeed_RequestSubscription{sub}, nil
}

func (s *SetSpeed_RequestSubscription) TakeMessage(out *SetSpeed_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetSpeed_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetSpeed_RequestSlice(dst, src []SetSpeed_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetSpeed_RequestTypeSupport humble.MessageTypeSupport = _SetSpeed_RequestTypeSupport{}

type _SetSpeed_RequestTypeSupport struct{}

func (t _SetSpeed_RequestTypeSupport) New() humble.Message {
	return NewSetSpeed_Request()
}

func (t _SetSpeed_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__SetSpeed_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__SetSpeed_Request__create())
}

func (t _SetSpeed_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__SetSpeed_Request__destroy((*C.as2_msgs__srv__SetSpeed_Request)(pointer_to_free))
}

func (t _SetSpeed_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SetSpeed_Request)
	mem := (*C.as2_msgs__srv__SetSpeed_Request)(dst)
	as2_msgs_msg.SpeedTypeSupport.AsCStruct(unsafe.Pointer(&mem.speed), &m.Speed)
}

func (t _SetSpeed_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetSpeed_Request)
	mem := (*C.as2_msgs__srv__SetSpeed_Request)(ros2_message_buffer)
	as2_msgs_msg.SpeedTypeSupport.AsGoStruct(&m.Speed, unsafe.Pointer(&mem.speed))
}

func (t _SetSpeed_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__SetSpeed_Request())
}

type CSetSpeed_Request = C.as2_msgs__srv__SetSpeed_Request
type CSetSpeed_RequestSequence = C.as2_msgs__srv__SetSpeed_Request__Sequence

func SetSpeed_RequestSequenceToGo(goSlice *[]SetSpeed_Request, cSlice CSetSpeed_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetSpeed_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetSpeed_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetSpeed_RequestSequenceToC(cSlice *CSetSpeed_RequestSequence, goSlice []SetSpeed_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__SetSpeed_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__SetSpeed_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetSpeed_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetSpeed_RequestArrayToGo(goSlice []SetSpeed_Request, cSlice []CSetSpeed_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetSpeed_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetSpeed_RequestArrayToC(cSlice []CSetSpeed_Request, goSlice []SetSpeed_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetSpeed_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

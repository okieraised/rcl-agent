// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/list_control_modes.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/ListControlModes_Response", ListControlModes_ResponseTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/ListControlModes_Response", ListControlModes_ResponseTypeSupport)
}

type ListControlModes_Response struct {
	Source       string  `yaml:"source"`        // Control modes source
	ControlModes []uint8 `yaml:"control_modes"` // Control modes list
}

// NewListControlModes_Response creates a new ListControlModes_Response with default values.
func NewListControlModes_Response() *ListControlModes_Response {
	self := ListControlModes_Response{}
	self.SetDefaults()
	return &self
}

func (t *ListControlModes_Response) Clone() *ListControlModes_Response {
	c := &ListControlModes_Response{}
	c.Source = t.Source
	if t.ControlModes != nil {
		c.ControlModes = make([]uint8, len(t.ControlModes))
		copy(c.ControlModes, t.ControlModes)
	}
	return c
}

func (t *ListControlModes_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ListControlModes_Response) SetDefaults() {
	t.Source = ""
	t.ControlModes = nil
}

func (t *ListControlModes_Response) GetTypeSupport() humble.MessageTypeSupport {
	return ListControlModes_ResponseTypeSupport
}

// ListControlModes_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type ListControlModes_ResponsePublisher struct {
	*humble.Publisher
}

// NewListControlModes_ResponsePublisher creates and returns a new publisher for the
// ListControlModes_Response
func NewListControlModes_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ListControlModes_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, ListControlModes_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListControlModes_ResponsePublisher{pub}, nil
}

func (p *ListControlModes_ResponsePublisher) Publish(msg *ListControlModes_Response) error {
	return p.Publisher.Publish(msg)
}

// ListControlModes_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type ListControlModes_ResponseSubscription struct {
	*humble.Subscription
}

// ListControlModes_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a ListControlModes_ResponseSubscription.
type ListControlModes_ResponseSubscriptionCallback func(msg *ListControlModes_Response, info *humble.MessageInfo, err error)

// NewListControlModes_ResponseSubscription creates and returns a new subscription for the
// ListControlModes_Response
func NewListControlModes_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ListControlModes_ResponseSubscriptionCallback) (*ListControlModes_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ListControlModes_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ListControlModes_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ListControlModes_ResponseSubscription{sub}, nil
}

func (s *ListControlModes_ResponseSubscription) TakeMessage(out *ListControlModes_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneListControlModes_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneListControlModes_ResponseSlice(dst, src []ListControlModes_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ListControlModes_ResponseTypeSupport humble.MessageTypeSupport = _ListControlModes_ResponseTypeSupport{}

type _ListControlModes_ResponseTypeSupport struct{}

func (t _ListControlModes_ResponseTypeSupport) New() humble.Message {
	return NewListControlModes_Response()
}

func (t _ListControlModes_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__ListControlModes_Response
	return (unsafe.Pointer)(C.as2_msgs__srv__ListControlModes_Response__create())
}

func (t _ListControlModes_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__ListControlModes_Response__destroy((*C.as2_msgs__srv__ListControlModes_Response)(pointer_to_free))
}

func (t _ListControlModes_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ListControlModes_Response)
	mem := (*C.as2_msgs__srv__ListControlModes_Response)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.source), m.Source)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.control_modes)), m.ControlModes)
}

func (t _ListControlModes_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ListControlModes_Response)
	mem := (*C.as2_msgs__srv__ListControlModes_Response)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Source, unsafe.Pointer(&mem.source))
	humble.Uint8SequenceToGo(&m.ControlModes, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.control_modes)))
}

func (t _ListControlModes_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__ListControlModes_Response())
}

type CListControlModes_Response = C.as2_msgs__srv__ListControlModes_Response
type CListControlModes_ResponseSequence = C.as2_msgs__srv__ListControlModes_Response__Sequence

func ListControlModes_ResponseSequenceToGo(goSlice *[]ListControlModes_Response, cSlice CListControlModes_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ListControlModes_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ListControlModes_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ListControlModes_ResponseSequenceToC(cSlice *CListControlModes_ResponseSequence, goSlice []ListControlModes_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__ListControlModes_Response)(C.malloc(C.sizeof_struct_as2_msgs__srv__ListControlModes_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ListControlModes_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ListControlModes_ResponseArrayToGo(goSlice []ListControlModes_Response, cSlice []CListControlModes_Response) {
	for i := 0; i < len(cSlice); i++ {
		ListControlModes_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ListControlModes_ResponseArrayToC(cSlice []CListControlModes_Response, goSlice []ListControlModes_Response) {
	for i := 0; i < len(goSlice); i++ {
		ListControlModes_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	sensor_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/sensor_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/add_static_transform_gps.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/AddStaticTransformGps_Request", AddStaticTransformGps_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/AddStaticTransformGps_Request", AddStaticTransformGps_RequestTypeSupport)
}

type AddStaticTransformGps_Request struct {
	FrameId      string                    `yaml:"frame_id"`       // Parent frame frame id
	ChildFrameId string                    `yaml:"child_frame_id"` // Child frame id
	GpsPosition  sensor_msgs_msg.NavSatFix `yaml:"gps_position"`   // Transform
	Azimuth      float32                   `yaml:"azimuth"`        // yaw
	Elevation    float32                   `yaml:"elevation"`      // pitch
	Bank         float32                   `yaml:"bank"`           // roll
}

// NewAddStaticTransformGps_Request creates a new AddStaticTransformGps_Request with default values.
func NewAddStaticTransformGps_Request() *AddStaticTransformGps_Request {
	self := AddStaticTransformGps_Request{}
	self.SetDefaults()
	return &self
}

func (t *AddStaticTransformGps_Request) Clone() *AddStaticTransformGps_Request {
	c := &AddStaticTransformGps_Request{}
	c.FrameId = t.FrameId
	c.ChildFrameId = t.ChildFrameId
	c.GpsPosition = *t.GpsPosition.Clone()
	c.Azimuth = t.Azimuth
	c.Elevation = t.Elevation
	c.Bank = t.Bank
	return c
}

func (t *AddStaticTransformGps_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *AddStaticTransformGps_Request) SetDefaults() {
	t.FrameId = ""
	t.ChildFrameId = ""
	t.GpsPosition.SetDefaults()
	t.Azimuth = 0
	t.Elevation = 0
	t.Bank = 0
}

func (t *AddStaticTransformGps_Request) GetTypeSupport() humble.MessageTypeSupport {
	return AddStaticTransformGps_RequestTypeSupport
}

// AddStaticTransformGps_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type AddStaticTransformGps_RequestPublisher struct {
	*humble.Publisher
}

// NewAddStaticTransformGps_RequestPublisher creates and returns a new publisher for the
// AddStaticTransformGps_Request
func NewAddStaticTransformGps_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*AddStaticTransformGps_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, AddStaticTransformGps_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AddStaticTransformGps_RequestPublisher{pub}, nil
}

func (p *AddStaticTransformGps_RequestPublisher) Publish(msg *AddStaticTransformGps_Request) error {
	return p.Publisher.Publish(msg)
}

// AddStaticTransformGps_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type AddStaticTransformGps_RequestSubscription struct {
	*humble.Subscription
}

// AddStaticTransformGps_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a AddStaticTransformGps_RequestSubscription.
type AddStaticTransformGps_RequestSubscriptionCallback func(msg *AddStaticTransformGps_Request, info *humble.MessageInfo, err error)

// NewAddStaticTransformGps_RequestSubscription creates and returns a new subscription for the
// AddStaticTransformGps_Request
func NewAddStaticTransformGps_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback AddStaticTransformGps_RequestSubscriptionCallback) (*AddStaticTransformGps_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg AddStaticTransformGps_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, AddStaticTransformGps_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AddStaticTransformGps_RequestSubscription{sub}, nil
}

func (s *AddStaticTransformGps_RequestSubscription) TakeMessage(out *AddStaticTransformGps_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAddStaticTransformGps_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAddStaticTransformGps_RequestSlice(dst, src []AddStaticTransformGps_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AddStaticTransformGps_RequestTypeSupport humble.MessageTypeSupport = _AddStaticTransformGps_RequestTypeSupport{}

type _AddStaticTransformGps_RequestTypeSupport struct{}

func (t _AddStaticTransformGps_RequestTypeSupport) New() humble.Message {
	return NewAddStaticTransformGps_Request()
}

func (t _AddStaticTransformGps_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__AddStaticTransformGps_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__AddStaticTransformGps_Request__create())
}

func (t _AddStaticTransformGps_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__AddStaticTransformGps_Request__destroy((*C.as2_msgs__srv__AddStaticTransformGps_Request)(pointer_to_free))
}

func (t _AddStaticTransformGps_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*AddStaticTransformGps_Request)
	mem := (*C.as2_msgs__srv__AddStaticTransformGps_Request)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.frame_id), m.FrameId)
	humble.StringAsCStruct(unsafe.Pointer(&mem.child_frame_id), m.ChildFrameId)
	sensor_msgs_msg.NavSatFixTypeSupport.AsCStruct(unsafe.Pointer(&mem.gps_position), &m.GpsPosition)
	mem.azimuth = C.float(m.Azimuth)
	mem.elevation = C.float(m.Elevation)
	mem.bank = C.float(m.Bank)
}

func (t _AddStaticTransformGps_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AddStaticTransformGps_Request)
	mem := (*C.as2_msgs__srv__AddStaticTransformGps_Request)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.FrameId, unsafe.Pointer(&mem.frame_id))
	humble.StringAsGoStruct(&m.ChildFrameId, unsafe.Pointer(&mem.child_frame_id))
	sensor_msgs_msg.NavSatFixTypeSupport.AsGoStruct(&m.GpsPosition, unsafe.Pointer(&mem.gps_position))
	m.Azimuth = float32(mem.azimuth)
	m.Elevation = float32(mem.elevation)
	m.Bank = float32(mem.bank)
}

func (t _AddStaticTransformGps_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__AddStaticTransformGps_Request())
}

type CAddStaticTransformGps_Request = C.as2_msgs__srv__AddStaticTransformGps_Request
type CAddStaticTransformGps_RequestSequence = C.as2_msgs__srv__AddStaticTransformGps_Request__Sequence

func AddStaticTransformGps_RequestSequenceToGo(goSlice *[]AddStaticTransformGps_Request, cSlice CAddStaticTransformGps_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AddStaticTransformGps_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AddStaticTransformGps_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func AddStaticTransformGps_RequestSequenceToC(cSlice *CAddStaticTransformGps_RequestSequence, goSlice []AddStaticTransformGps_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__AddStaticTransformGps_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__AddStaticTransformGps_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AddStaticTransformGps_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func AddStaticTransformGps_RequestArrayToGo(goSlice []AddStaticTransformGps_Request, cSlice []CAddStaticTransformGps_Request) {
	for i := 0; i < len(cSlice); i++ {
		AddStaticTransformGps_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func AddStaticTransformGps_RequestArrayToC(cSlice []CAddStaticTransformGps_Request, goSlice []AddStaticTransformGps_Request) {
	for i := 0; i < len(goSlice); i++ {
		AddStaticTransformGps_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

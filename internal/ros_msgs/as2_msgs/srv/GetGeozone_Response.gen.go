// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/get_geozone.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GetGeozone_Response", GetGeozone_ResponseTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/GetGeozone_Response", GetGeozone_ResponseTypeSupport)
}

type GetGeozone_Response struct {
	Success     bool                   `yaml:"success"`      // whether the geofence has been set or not
	GeozoneList []as2_msgs_msg.Geozone `yaml:"geozone_list"` // geofences stored in memory
}

// NewGetGeozone_Response creates a new GetGeozone_Response with default values.
func NewGetGeozone_Response() *GetGeozone_Response {
	self := GetGeozone_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetGeozone_Response) Clone() *GetGeozone_Response {
	c := &GetGeozone_Response{}
	c.Success = t.Success
	if t.GeozoneList != nil {
		c.GeozoneList = make([]as2_msgs_msg.Geozone, len(t.GeozoneList))
		as2_msgs_msg.CloneGeozoneSlice(c.GeozoneList, t.GeozoneList)
	}
	return c
}

func (t *GetGeozone_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GetGeozone_Response) SetDefaults() {
	t.Success = false
	t.GeozoneList = nil
}

func (t *GetGeozone_Response) GetTypeSupport() humble.MessageTypeSupport {
	return GetGeozone_ResponseTypeSupport
}

// GetGeozone_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type GetGeozone_ResponsePublisher struct {
	*humble.Publisher
}

// NewGetGeozone_ResponsePublisher creates and returns a new publisher for the
// GetGeozone_Response
func NewGetGeozone_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GetGeozone_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, GetGeozone_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetGeozone_ResponsePublisher{pub}, nil
}

func (p *GetGeozone_ResponsePublisher) Publish(msg *GetGeozone_Response) error {
	return p.Publisher.Publish(msg)
}

// GetGeozone_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type GetGeozone_ResponseSubscription struct {
	*humble.Subscription
}

// GetGeozone_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetGeozone_ResponseSubscription.
type GetGeozone_ResponseSubscriptionCallback func(msg *GetGeozone_Response, info *humble.MessageInfo, err error)

// NewGetGeozone_ResponseSubscription creates and returns a new subscription for the
// GetGeozone_Response
func NewGetGeozone_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GetGeozone_ResponseSubscriptionCallback) (*GetGeozone_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GetGeozone_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetGeozone_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetGeozone_ResponseSubscription{sub}, nil
}

func (s *GetGeozone_ResponseSubscription) TakeMessage(out *GetGeozone_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetGeozone_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetGeozone_ResponseSlice(dst, src []GetGeozone_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetGeozone_ResponseTypeSupport humble.MessageTypeSupport = _GetGeozone_ResponseTypeSupport{}

type _GetGeozone_ResponseTypeSupport struct{}

func (t _GetGeozone_ResponseTypeSupport) New() humble.Message {
	return NewGetGeozone_Response()
}

func (t _GetGeozone_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__GetGeozone_Response
	return (unsafe.Pointer)(C.as2_msgs__srv__GetGeozone_Response__create())
}

func (t _GetGeozone_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__GetGeozone_Response__destroy((*C.as2_msgs__srv__GetGeozone_Response)(pointer_to_free))
}

func (t _GetGeozone_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GetGeozone_Response)
	mem := (*C.as2_msgs__srv__GetGeozone_Response)(dst)
	mem.success = C.bool(m.Success)
	as2_msgs_msg.GeozoneSequenceToC((*as2_msgs_msg.CGeozoneSequence)(unsafe.Pointer(&mem.geozone_list)), m.GeozoneList)
}

func (t _GetGeozone_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetGeozone_Response)
	mem := (*C.as2_msgs__srv__GetGeozone_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	as2_msgs_msg.GeozoneSequenceToGo(&m.GeozoneList, *(*as2_msgs_msg.CGeozoneSequence)(unsafe.Pointer(&mem.geozone_list)))
}

func (t _GetGeozone_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__GetGeozone_Response())
}

type CGetGeozone_Response = C.as2_msgs__srv__GetGeozone_Response
type CGetGeozone_ResponseSequence = C.as2_msgs__srv__GetGeozone_Response__Sequence

func GetGeozone_ResponseSequenceToGo(goSlice *[]GetGeozone_Response, cSlice CGetGeozone_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetGeozone_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetGeozone_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetGeozone_ResponseSequenceToC(cSlice *CGetGeozone_ResponseSequence, goSlice []GetGeozone_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__GetGeozone_Response)(C.malloc(C.sizeof_struct_as2_msgs__srv__GetGeozone_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetGeozone_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetGeozone_ResponseArrayToGo(goSlice []GetGeozone_Response, cSlice []CGetGeozone_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetGeozone_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetGeozone_ResponseArrayToC(cSlice []CGetGeozone_Response, goSlice []GetGeozone_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetGeozone_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

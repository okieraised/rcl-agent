// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/set_control_mode.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("as2_msgs/SetControlMode", SetControlModeTypeSupport)
	humble.RegisterService("as2_msgs/srv/SetControlMode", SetControlModeTypeSupport)
}

type _SetControlModeTypeSupport struct {}

func (s _SetControlModeTypeSupport) Request() humble.MessageTypeSupport {
	return SetControlMode_RequestTypeSupport
}

func (s _SetControlModeTypeSupport) Response() humble.MessageTypeSupport {
	return SetControlMode_ResponseTypeSupport
}

func (s _SetControlModeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__SetControlMode())
}

// Modifying this variable is undefined behavior.
var SetControlModeTypeSupport humble.ServiceTypeSupport = _SetControlModeTypeSupport{}

// SetControlModeClient wraps humble.Client to provide type safe helper
// functions
type SetControlModeClient struct {
	*humble.Client
}

// NewSetControlModeClient creates and returns a new client for the
// SetControlMode
func NewSetControlModeClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*SetControlModeClient, error) {
	client, err := node.NewClient(serviceName, SetControlModeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetControlModeClient{client}, nil
}

func (s *SetControlModeClient) Send(ctx context.Context, req *SetControlMode_Request) (*SetControlMode_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetControlMode_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetControlModeServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s SetControlModeServiceResponseSender) SendResponse(resp *SetControlMode_Response) error {
	return s.sender.SendResponse(resp)
}

type SetControlModeServiceRequestHandler func(*humble.ServiceInfo, *SetControlMode_Request, SetControlModeServiceResponseSender)

// SetControlModeService wraps humble.Service to provide type safe helper
// functions
type SetControlModeService struct {
	*humble.Service
}

// NewSetControlModeService creates and returns a new service for the
// SetControlMode
func NewSetControlModeService(node *humble.Node, name string, options *humble.ServiceOptions, handler SetControlModeServiceRequestHandler) (*SetControlModeService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*SetControlMode_Request)
		responseSender := SetControlModeServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetControlModeTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetControlModeService{service}, nil
}
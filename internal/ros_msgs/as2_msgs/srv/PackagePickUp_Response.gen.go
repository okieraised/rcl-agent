// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/package_pick_up.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PackagePickUp_Response", PackagePickUp_ResponseTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/PackagePickUp_Response", PackagePickUp_ResponseTypeSupport)
}

type PackagePickUp_Response struct {
	Success bool `yaml:"success"` // whether it could be started or not
}

// NewPackagePickUp_Response creates a new PackagePickUp_Response with default values.
func NewPackagePickUp_Response() *PackagePickUp_Response {
	self := PackagePickUp_Response{}
	self.SetDefaults()
	return &self
}

func (t *PackagePickUp_Response) Clone() *PackagePickUp_Response {
	c := &PackagePickUp_Response{}
	c.Success = t.Success
	return c
}

func (t *PackagePickUp_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PackagePickUp_Response) SetDefaults() {
	t.Success = false
}

func (t *PackagePickUp_Response) GetTypeSupport() humble.MessageTypeSupport {
	return PackagePickUp_ResponseTypeSupport
}

// PackagePickUp_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type PackagePickUp_ResponsePublisher struct {
	*humble.Publisher
}

// NewPackagePickUp_ResponsePublisher creates and returns a new publisher for the
// PackagePickUp_Response
func NewPackagePickUp_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PackagePickUp_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, PackagePickUp_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PackagePickUp_ResponsePublisher{pub}, nil
}

func (p *PackagePickUp_ResponsePublisher) Publish(msg *PackagePickUp_Response) error {
	return p.Publisher.Publish(msg)
}

// PackagePickUp_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type PackagePickUp_ResponseSubscription struct {
	*humble.Subscription
}

// PackagePickUp_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a PackagePickUp_ResponseSubscription.
type PackagePickUp_ResponseSubscriptionCallback func(msg *PackagePickUp_Response, info *humble.MessageInfo, err error)

// NewPackagePickUp_ResponseSubscription creates and returns a new subscription for the
// PackagePickUp_Response
func NewPackagePickUp_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PackagePickUp_ResponseSubscriptionCallback) (*PackagePickUp_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PackagePickUp_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PackagePickUp_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PackagePickUp_ResponseSubscription{sub}, nil
}

func (s *PackagePickUp_ResponseSubscription) TakeMessage(out *PackagePickUp_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePackagePickUp_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePackagePickUp_ResponseSlice(dst, src []PackagePickUp_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PackagePickUp_ResponseTypeSupport humble.MessageTypeSupport = _PackagePickUp_ResponseTypeSupport{}

type _PackagePickUp_ResponseTypeSupport struct{}

func (t _PackagePickUp_ResponseTypeSupport) New() humble.Message {
	return NewPackagePickUp_Response()
}

func (t _PackagePickUp_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__PackagePickUp_Response
	return (unsafe.Pointer)(C.as2_msgs__srv__PackagePickUp_Response__create())
}

func (t _PackagePickUp_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__PackagePickUp_Response__destroy((*C.as2_msgs__srv__PackagePickUp_Response)(pointer_to_free))
}

func (t _PackagePickUp_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PackagePickUp_Response)
	mem := (*C.as2_msgs__srv__PackagePickUp_Response)(dst)
	mem.success = C.bool(m.Success)
}

func (t _PackagePickUp_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PackagePickUp_Response)
	mem := (*C.as2_msgs__srv__PackagePickUp_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
}

func (t _PackagePickUp_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__PackagePickUp_Response())
}

type CPackagePickUp_Response = C.as2_msgs__srv__PackagePickUp_Response
type CPackagePickUp_ResponseSequence = C.as2_msgs__srv__PackagePickUp_Response__Sequence

func PackagePickUp_ResponseSequenceToGo(goSlice *[]PackagePickUp_Response, cSlice CPackagePickUp_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PackagePickUp_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PackagePickUp_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PackagePickUp_ResponseSequenceToC(cSlice *CPackagePickUp_ResponseSequence, goSlice []PackagePickUp_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__PackagePickUp_Response)(C.malloc(C.sizeof_struct_as2_msgs__srv__PackagePickUp_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PackagePickUp_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PackagePickUp_ResponseArrayToGo(goSlice []PackagePickUp_Response, cSlice []CPackagePickUp_Response) {
	for i := 0; i < len(cSlice); i++ {
		PackagePickUp_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PackagePickUp_ResponseArrayToC(cSlice []CPackagePickUp_Response, goSlice []PackagePickUp_Response) {
	for i := 0; i < len(goSlice); i++ {
		PackagePickUp_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

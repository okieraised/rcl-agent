// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/add_static_transform.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/AddStaticTransform_Request", AddStaticTransform_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/AddStaticTransform_Request", AddStaticTransform_RequestTypeSupport)
}

type AddStaticTransform_Request struct {
	FrameId      string                      `yaml:"frame_id"`       // Parent frame frame id
	ChildFrameId string                      `yaml:"child_frame_id"` // Child frame id
	Transform    geometry_msgs_msg.Transform `yaml:"transform"`      // Transform
}

// NewAddStaticTransform_Request creates a new AddStaticTransform_Request with default values.
func NewAddStaticTransform_Request() *AddStaticTransform_Request {
	self := AddStaticTransform_Request{}
	self.SetDefaults()
	return &self
}

func (t *AddStaticTransform_Request) Clone() *AddStaticTransform_Request {
	c := &AddStaticTransform_Request{}
	c.FrameId = t.FrameId
	c.ChildFrameId = t.ChildFrameId
	c.Transform = *t.Transform.Clone()
	return c
}

func (t *AddStaticTransform_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *AddStaticTransform_Request) SetDefaults() {
	t.FrameId = ""
	t.ChildFrameId = ""
	t.Transform.SetDefaults()
}

func (t *AddStaticTransform_Request) GetTypeSupport() humble.MessageTypeSupport {
	return AddStaticTransform_RequestTypeSupport
}

// AddStaticTransform_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type AddStaticTransform_RequestPublisher struct {
	*humble.Publisher
}

// NewAddStaticTransform_RequestPublisher creates and returns a new publisher for the
// AddStaticTransform_Request
func NewAddStaticTransform_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*AddStaticTransform_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, AddStaticTransform_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AddStaticTransform_RequestPublisher{pub}, nil
}

func (p *AddStaticTransform_RequestPublisher) Publish(msg *AddStaticTransform_Request) error {
	return p.Publisher.Publish(msg)
}

// AddStaticTransform_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type AddStaticTransform_RequestSubscription struct {
	*humble.Subscription
}

// AddStaticTransform_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a AddStaticTransform_RequestSubscription.
type AddStaticTransform_RequestSubscriptionCallback func(msg *AddStaticTransform_Request, info *humble.MessageInfo, err error)

// NewAddStaticTransform_RequestSubscription creates and returns a new subscription for the
// AddStaticTransform_Request
func NewAddStaticTransform_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback AddStaticTransform_RequestSubscriptionCallback) (*AddStaticTransform_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg AddStaticTransform_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, AddStaticTransform_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AddStaticTransform_RequestSubscription{sub}, nil
}

func (s *AddStaticTransform_RequestSubscription) TakeMessage(out *AddStaticTransform_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAddStaticTransform_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAddStaticTransform_RequestSlice(dst, src []AddStaticTransform_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AddStaticTransform_RequestTypeSupport humble.MessageTypeSupport = _AddStaticTransform_RequestTypeSupport{}

type _AddStaticTransform_RequestTypeSupport struct{}

func (t _AddStaticTransform_RequestTypeSupport) New() humble.Message {
	return NewAddStaticTransform_Request()
}

func (t _AddStaticTransform_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__AddStaticTransform_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__AddStaticTransform_Request__create())
}

func (t _AddStaticTransform_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__AddStaticTransform_Request__destroy((*C.as2_msgs__srv__AddStaticTransform_Request)(pointer_to_free))
}

func (t _AddStaticTransform_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*AddStaticTransform_Request)
	mem := (*C.as2_msgs__srv__AddStaticTransform_Request)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.frame_id), m.FrameId)
	humble.StringAsCStruct(unsafe.Pointer(&mem.child_frame_id), m.ChildFrameId)
	geometry_msgs_msg.TransformTypeSupport.AsCStruct(unsafe.Pointer(&mem.transform), &m.Transform)
}

func (t _AddStaticTransform_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AddStaticTransform_Request)
	mem := (*C.as2_msgs__srv__AddStaticTransform_Request)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.FrameId, unsafe.Pointer(&mem.frame_id))
	humble.StringAsGoStruct(&m.ChildFrameId, unsafe.Pointer(&mem.child_frame_id))
	geometry_msgs_msg.TransformTypeSupport.AsGoStruct(&m.Transform, unsafe.Pointer(&mem.transform))
}

func (t _AddStaticTransform_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__AddStaticTransform_Request())
}

type CAddStaticTransform_Request = C.as2_msgs__srv__AddStaticTransform_Request
type CAddStaticTransform_RequestSequence = C.as2_msgs__srv__AddStaticTransform_Request__Sequence

func AddStaticTransform_RequestSequenceToGo(goSlice *[]AddStaticTransform_Request, cSlice CAddStaticTransform_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AddStaticTransform_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AddStaticTransform_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func AddStaticTransform_RequestSequenceToC(cSlice *CAddStaticTransform_RequestSequence, goSlice []AddStaticTransform_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__AddStaticTransform_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__AddStaticTransform_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AddStaticTransform_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func AddStaticTransform_RequestArrayToGo(goSlice []AddStaticTransform_Request, cSlice []CAddStaticTransform_Request) {
	for i := 0; i < len(cSlice); i++ {
		AddStaticTransform_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func AddStaticTransform_RequestArrayToC(cSlice []CAddStaticTransform_Request, goSlice []AddStaticTransform_Request) {
	for i := 0; i < len(goSlice); i++ {
		AddStaticTransform_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

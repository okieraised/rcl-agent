// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/dynamic_follower.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/DynamicFollower_Request", DynamicFollower_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/DynamicFollower_Request", DynamicFollower_RequestTypeSupport)
}

type DynamicFollower_Request struct {
	Enable     bool                    `yaml:"enable"`      // Flag to enable follower
	SpeedLimit geometry_msgs_msg.Twist `yaml:"speed_limit"` // Speed limit (m/s)
}

// NewDynamicFollower_Request creates a new DynamicFollower_Request with default values.
func NewDynamicFollower_Request() *DynamicFollower_Request {
	self := DynamicFollower_Request{}
	self.SetDefaults()
	return &self
}

func (t *DynamicFollower_Request) Clone() *DynamicFollower_Request {
	c := &DynamicFollower_Request{}
	c.Enable = t.Enable
	c.SpeedLimit = *t.SpeedLimit.Clone()
	return c
}

func (t *DynamicFollower_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *DynamicFollower_Request) SetDefaults() {
	t.Enable = false
	t.SpeedLimit.SetDefaults()
}

func (t *DynamicFollower_Request) GetTypeSupport() humble.MessageTypeSupport {
	return DynamicFollower_RequestTypeSupport
}

// DynamicFollower_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type DynamicFollower_RequestPublisher struct {
	*humble.Publisher
}

// NewDynamicFollower_RequestPublisher creates and returns a new publisher for the
// DynamicFollower_Request
func NewDynamicFollower_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*DynamicFollower_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, DynamicFollower_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DynamicFollower_RequestPublisher{pub}, nil
}

func (p *DynamicFollower_RequestPublisher) Publish(msg *DynamicFollower_Request) error {
	return p.Publisher.Publish(msg)
}

// DynamicFollower_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type DynamicFollower_RequestSubscription struct {
	*humble.Subscription
}

// DynamicFollower_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a DynamicFollower_RequestSubscription.
type DynamicFollower_RequestSubscriptionCallback func(msg *DynamicFollower_Request, info *humble.MessageInfo, err error)

// NewDynamicFollower_RequestSubscription creates and returns a new subscription for the
// DynamicFollower_Request
func NewDynamicFollower_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback DynamicFollower_RequestSubscriptionCallback) (*DynamicFollower_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg DynamicFollower_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, DynamicFollower_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DynamicFollower_RequestSubscription{sub}, nil
}

func (s *DynamicFollower_RequestSubscription) TakeMessage(out *DynamicFollower_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDynamicFollower_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDynamicFollower_RequestSlice(dst, src []DynamicFollower_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DynamicFollower_RequestTypeSupport humble.MessageTypeSupport = _DynamicFollower_RequestTypeSupport{}

type _DynamicFollower_RequestTypeSupport struct{}

func (t _DynamicFollower_RequestTypeSupport) New() humble.Message {
	return NewDynamicFollower_Request()
}

func (t _DynamicFollower_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__DynamicFollower_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__DynamicFollower_Request__create())
}

func (t _DynamicFollower_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__DynamicFollower_Request__destroy((*C.as2_msgs__srv__DynamicFollower_Request)(pointer_to_free))
}

func (t _DynamicFollower_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*DynamicFollower_Request)
	mem := (*C.as2_msgs__srv__DynamicFollower_Request)(dst)
	mem.enable = C.bool(m.Enable)
	geometry_msgs_msg.TwistTypeSupport.AsCStruct(unsafe.Pointer(&mem.speed_limit), &m.SpeedLimit)
}

func (t _DynamicFollower_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DynamicFollower_Request)
	mem := (*C.as2_msgs__srv__DynamicFollower_Request)(ros2_message_buffer)
	m.Enable = bool(mem.enable)
	geometry_msgs_msg.TwistTypeSupport.AsGoStruct(&m.SpeedLimit, unsafe.Pointer(&mem.speed_limit))
}

func (t _DynamicFollower_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__DynamicFollower_Request())
}

type CDynamicFollower_Request = C.as2_msgs__srv__DynamicFollower_Request
type CDynamicFollower_RequestSequence = C.as2_msgs__srv__DynamicFollower_Request__Sequence

func DynamicFollower_RequestSequenceToGo(goSlice *[]DynamicFollower_Request, cSlice CDynamicFollower_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DynamicFollower_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DynamicFollower_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func DynamicFollower_RequestSequenceToC(cSlice *CDynamicFollower_RequestSequence, goSlice []DynamicFollower_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__DynamicFollower_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__DynamicFollower_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DynamicFollower_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func DynamicFollower_RequestArrayToGo(goSlice []DynamicFollower_Request, cSlice []CDynamicFollower_Request) {
	for i := 0; i < len(cSlice); i++ {
		DynamicFollower_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func DynamicFollower_RequestArrayToC(cSlice []CDynamicFollower_Request, goSlice []DynamicFollower_Request) {
	for i := 0; i < len(goSlice); i++ {
		DynamicFollower_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

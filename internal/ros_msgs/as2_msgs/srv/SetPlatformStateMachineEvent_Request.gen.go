// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/set_platform_state_machine_event.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SetPlatformStateMachineEvent_Request", SetPlatformStateMachineEvent_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/SetPlatformStateMachineEvent_Request", SetPlatformStateMachineEvent_RequestTypeSupport)
}

type SetPlatformStateMachineEvent_Request struct {
	Event as2_msgs_msg.PlatformStateMachineEvent `yaml:"event"` // event to set
}

// NewSetPlatformStateMachineEvent_Request creates a new SetPlatformStateMachineEvent_Request with default values.
func NewSetPlatformStateMachineEvent_Request() *SetPlatformStateMachineEvent_Request {
	self := SetPlatformStateMachineEvent_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetPlatformStateMachineEvent_Request) Clone() *SetPlatformStateMachineEvent_Request {
	c := &SetPlatformStateMachineEvent_Request{}
	c.Event = *t.Event.Clone()
	return c
}

func (t *SetPlatformStateMachineEvent_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetPlatformStateMachineEvent_Request) SetDefaults() {
	t.Event.SetDefaults()
}

func (t *SetPlatformStateMachineEvent_Request) GetTypeSupport() humble.MessageTypeSupport {
	return SetPlatformStateMachineEvent_RequestTypeSupport
}

// SetPlatformStateMachineEvent_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type SetPlatformStateMachineEvent_RequestPublisher struct {
	*humble.Publisher
}

// NewSetPlatformStateMachineEvent_RequestPublisher creates and returns a new publisher for the
// SetPlatformStateMachineEvent_Request
func NewSetPlatformStateMachineEvent_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetPlatformStateMachineEvent_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, SetPlatformStateMachineEvent_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetPlatformStateMachineEvent_RequestPublisher{pub}, nil
}

func (p *SetPlatformStateMachineEvent_RequestPublisher) Publish(msg *SetPlatformStateMachineEvent_Request) error {
	return p.Publisher.Publish(msg)
}

// SetPlatformStateMachineEvent_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetPlatformStateMachineEvent_RequestSubscription struct {
	*humble.Subscription
}

// SetPlatformStateMachineEvent_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SetPlatformStateMachineEvent_RequestSubscription.
type SetPlatformStateMachineEvent_RequestSubscriptionCallback func(msg *SetPlatformStateMachineEvent_Request, info *humble.MessageInfo, err error)

// NewSetPlatformStateMachineEvent_RequestSubscription creates and returns a new subscription for the
// SetPlatformStateMachineEvent_Request
func NewSetPlatformStateMachineEvent_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetPlatformStateMachineEvent_RequestSubscriptionCallback) (*SetPlatformStateMachineEvent_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetPlatformStateMachineEvent_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetPlatformStateMachineEvent_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetPlatformStateMachineEvent_RequestSubscription{sub}, nil
}

func (s *SetPlatformStateMachineEvent_RequestSubscription) TakeMessage(out *SetPlatformStateMachineEvent_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetPlatformStateMachineEvent_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetPlatformStateMachineEvent_RequestSlice(dst, src []SetPlatformStateMachineEvent_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetPlatformStateMachineEvent_RequestTypeSupport humble.MessageTypeSupport = _SetPlatformStateMachineEvent_RequestTypeSupport{}

type _SetPlatformStateMachineEvent_RequestTypeSupport struct{}

func (t _SetPlatformStateMachineEvent_RequestTypeSupport) New() humble.Message {
	return NewSetPlatformStateMachineEvent_Request()
}

func (t _SetPlatformStateMachineEvent_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__SetPlatformStateMachineEvent_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__SetPlatformStateMachineEvent_Request__create())
}

func (t _SetPlatformStateMachineEvent_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__SetPlatformStateMachineEvent_Request__destroy((*C.as2_msgs__srv__SetPlatformStateMachineEvent_Request)(pointer_to_free))
}

func (t _SetPlatformStateMachineEvent_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SetPlatformStateMachineEvent_Request)
	mem := (*C.as2_msgs__srv__SetPlatformStateMachineEvent_Request)(dst)
	as2_msgs_msg.PlatformStateMachineEventTypeSupport.AsCStruct(unsafe.Pointer(&mem.event), &m.Event)
}

func (t _SetPlatformStateMachineEvent_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetPlatformStateMachineEvent_Request)
	mem := (*C.as2_msgs__srv__SetPlatformStateMachineEvent_Request)(ros2_message_buffer)
	as2_msgs_msg.PlatformStateMachineEventTypeSupport.AsGoStruct(&m.Event, unsafe.Pointer(&mem.event))
}

func (t _SetPlatformStateMachineEvent_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__SetPlatformStateMachineEvent_Request())
}

type CSetPlatformStateMachineEvent_Request = C.as2_msgs__srv__SetPlatformStateMachineEvent_Request
type CSetPlatformStateMachineEvent_RequestSequence = C.as2_msgs__srv__SetPlatformStateMachineEvent_Request__Sequence

func SetPlatformStateMachineEvent_RequestSequenceToGo(goSlice *[]SetPlatformStateMachineEvent_Request, cSlice CSetPlatformStateMachineEvent_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetPlatformStateMachineEvent_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetPlatformStateMachineEvent_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetPlatformStateMachineEvent_RequestSequenceToC(cSlice *CSetPlatformStateMachineEvent_RequestSequence, goSlice []SetPlatformStateMachineEvent_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__SetPlatformStateMachineEvent_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__SetPlatformStateMachineEvent_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetPlatformStateMachineEvent_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetPlatformStateMachineEvent_RequestArrayToGo(goSlice []SetPlatformStateMachineEvent_Request, cSlice []CSetPlatformStateMachineEvent_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetPlatformStateMachineEvent_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetPlatformStateMachineEvent_RequestArrayToC(cSlice []CSetPlatformStateMachineEvent_Request, goSlice []SetPlatformStateMachineEvent_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetPlatformStateMachineEvent_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

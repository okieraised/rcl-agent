// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	geographic_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geographic_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/geopath_to_path.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GeopathToPath_Request", GeopathToPath_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/GeopathToPath_Request", GeopathToPath_RequestTypeSupport)
}

type GeopathToPath_Request struct {
	GeoPath geographic_msgs_msg.GeoPath `yaml:"geo_path"` // Path in lat/lon and altitude
}

// NewGeopathToPath_Request creates a new GeopathToPath_Request with default values.
func NewGeopathToPath_Request() *GeopathToPath_Request {
	self := GeopathToPath_Request{}
	self.SetDefaults()
	return &self
}

func (t *GeopathToPath_Request) Clone() *GeopathToPath_Request {
	c := &GeopathToPath_Request{}
	c.GeoPath = *t.GeoPath.Clone()
	return c
}

func (t *GeopathToPath_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GeopathToPath_Request) SetDefaults() {
	t.GeoPath.SetDefaults()
}

func (t *GeopathToPath_Request) GetTypeSupport() humble.MessageTypeSupport {
	return GeopathToPath_RequestTypeSupport
}

// GeopathToPath_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type GeopathToPath_RequestPublisher struct {
	*humble.Publisher
}

// NewGeopathToPath_RequestPublisher creates and returns a new publisher for the
// GeopathToPath_Request
func NewGeopathToPath_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GeopathToPath_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, GeopathToPath_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeopathToPath_RequestPublisher{pub}, nil
}

func (p *GeopathToPath_RequestPublisher) Publish(msg *GeopathToPath_Request) error {
	return p.Publisher.Publish(msg)
}

// GeopathToPath_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type GeopathToPath_RequestSubscription struct {
	*humble.Subscription
}

// GeopathToPath_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GeopathToPath_RequestSubscription.
type GeopathToPath_RequestSubscriptionCallback func(msg *GeopathToPath_Request, info *humble.MessageInfo, err error)

// NewGeopathToPath_RequestSubscription creates and returns a new subscription for the
// GeopathToPath_Request
func NewGeopathToPath_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GeopathToPath_RequestSubscriptionCallback) (*GeopathToPath_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GeopathToPath_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GeopathToPath_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeopathToPath_RequestSubscription{sub}, nil
}

func (s *GeopathToPath_RequestSubscription) TakeMessage(out *GeopathToPath_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeopathToPath_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeopathToPath_RequestSlice(dst, src []GeopathToPath_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeopathToPath_RequestTypeSupport humble.MessageTypeSupport = _GeopathToPath_RequestTypeSupport{}

type _GeopathToPath_RequestTypeSupport struct{}

func (t _GeopathToPath_RequestTypeSupport) New() humble.Message {
	return NewGeopathToPath_Request()
}

func (t _GeopathToPath_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__GeopathToPath_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__GeopathToPath_Request__create())
}

func (t _GeopathToPath_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__GeopathToPath_Request__destroy((*C.as2_msgs__srv__GeopathToPath_Request)(pointer_to_free))
}

func (t _GeopathToPath_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GeopathToPath_Request)
	mem := (*C.as2_msgs__srv__GeopathToPath_Request)(dst)
	geographic_msgs_msg.GeoPathTypeSupport.AsCStruct(unsafe.Pointer(&mem.geo_path), &m.GeoPath)
}

func (t _GeopathToPath_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeopathToPath_Request)
	mem := (*C.as2_msgs__srv__GeopathToPath_Request)(ros2_message_buffer)
	geographic_msgs_msg.GeoPathTypeSupport.AsGoStruct(&m.GeoPath, unsafe.Pointer(&mem.geo_path))
}

func (t _GeopathToPath_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__GeopathToPath_Request())
}

type CGeopathToPath_Request = C.as2_msgs__srv__GeopathToPath_Request
type CGeopathToPath_RequestSequence = C.as2_msgs__srv__GeopathToPath_Request__Sequence

func GeopathToPath_RequestSequenceToGo(goSlice *[]GeopathToPath_Request, cSlice CGeopathToPath_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeopathToPath_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeopathToPath_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GeopathToPath_RequestSequenceToC(cSlice *CGeopathToPath_RequestSequence, goSlice []GeopathToPath_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__GeopathToPath_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__GeopathToPath_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeopathToPath_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GeopathToPath_RequestArrayToGo(goSlice []GeopathToPath_Request, cSlice []CGeopathToPath_Request) {
	for i := 0; i < len(cSlice); i++ {
		GeopathToPath_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GeopathToPath_RequestArrayToC(cSlice []CGeopathToPath_Request, goSlice []GeopathToPath_Request) {
	for i := 0; i < len(goSlice); i++ {
		GeopathToPath_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/dynamic_land.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("as2_msgs/DynamicLand", DynamicLandTypeSupport)
	humble.RegisterService("as2_msgs/srv/DynamicLand", DynamicLandTypeSupport)
}

type _DynamicLandTypeSupport struct{}

func (s _DynamicLandTypeSupport) Request() humble.MessageTypeSupport {
	return DynamicLand_RequestTypeSupport
}

func (s _DynamicLandTypeSupport) Response() humble.MessageTypeSupport {
	return DynamicLand_ResponseTypeSupport
}

func (s _DynamicLandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__DynamicLand())
}

// Modifying this variable is undefined behavior.
var DynamicLandTypeSupport humble.ServiceTypeSupport = _DynamicLandTypeSupport{}

// DynamicLandClient wraps humble.Client to provide type safe helper
// functions
type DynamicLandClient struct {
	*humble.Client
}

// NewDynamicLandClient creates and returns a new client for the
// DynamicLand
func NewDynamicLandClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*DynamicLandClient, error) {
	client, err := node.NewClient(serviceName, DynamicLandTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DynamicLandClient{client}, nil
}

func (s *DynamicLandClient) Send(ctx context.Context, req *DynamicLand_Request) (*DynamicLand_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*DynamicLand_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type DynamicLandServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s DynamicLandServiceResponseSender) SendResponse(resp *DynamicLand_Response) error {
	return s.sender.SendResponse(resp)
}

type DynamicLandServiceRequestHandler func(*humble.ServiceInfo, *DynamicLand_Request, DynamicLandServiceResponseSender)

// DynamicLandService wraps humble.Service to provide type safe helper
// functions
type DynamicLandService struct {
	*humble.Service
}

// NewDynamicLandService creates and returns a new service for the
// DynamicLand
func NewDynamicLandService(node *humble.Node, name string, options *humble.ServiceOptions, handler DynamicLandServiceRequestHandler) (*DynamicLandService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*DynamicLand_Request)
		responseSender := DynamicLandServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, DynamicLandTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &DynamicLandService{service}, nil
}

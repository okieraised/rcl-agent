// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/modify_swarm.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/ModifySwarm_Request", ModifySwarm_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/ModifySwarm_Request", ModifySwarm_RequestTypeSupport)
}

type ModifySwarm_Request struct {
	DetachDrone           bool                          `yaml:"detach_drone"`             // Detach the drone reference from the swarm. SERVICE TYPE: NumSwarmFormation------------------------------------------------------------------------------This service modifies the number of drones in the swarm
	NewDrone              bool                          `yaml:"new_drone"`                // Add new drone reference to the swarm
	NewVirtualCentroidRef bool                          `yaml:"new_virtual_centroid_ref"` // New reference to follow
	VirtualCentroid       geometry_msgs_msg.PoseStamped `yaml:"virtual_centroid"`         // Offset of the virtual centroid to the following frame
	SwarmFormation        []as2_msgs_msg.PoseWithID     `yaml:"swarm_formation"`          // Topics to modify the flocking
}

// NewModifySwarm_Request creates a new ModifySwarm_Request with default values.
func NewModifySwarm_Request() *ModifySwarm_Request {
	self := ModifySwarm_Request{}
	self.SetDefaults()
	return &self
}

func (t *ModifySwarm_Request) Clone() *ModifySwarm_Request {
	c := &ModifySwarm_Request{}
	c.DetachDrone = t.DetachDrone
	c.NewDrone = t.NewDrone
	c.NewVirtualCentroidRef = t.NewVirtualCentroidRef
	c.VirtualCentroid = *t.VirtualCentroid.Clone()
	if t.SwarmFormation != nil {
		c.SwarmFormation = make([]as2_msgs_msg.PoseWithID, len(t.SwarmFormation))
		as2_msgs_msg.ClonePoseWithIDSlice(c.SwarmFormation, t.SwarmFormation)
	}
	return c
}

func (t *ModifySwarm_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ModifySwarm_Request) SetDefaults() {
	t.DetachDrone = false
	t.NewDrone = false
	t.NewVirtualCentroidRef = false
	t.VirtualCentroid.SetDefaults()
	t.SwarmFormation = nil
}

func (t *ModifySwarm_Request) GetTypeSupport() humble.MessageTypeSupport {
	return ModifySwarm_RequestTypeSupport
}

// ModifySwarm_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type ModifySwarm_RequestPublisher struct {
	*humble.Publisher
}

// NewModifySwarm_RequestPublisher creates and returns a new publisher for the
// ModifySwarm_Request
func NewModifySwarm_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ModifySwarm_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, ModifySwarm_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ModifySwarm_RequestPublisher{pub}, nil
}

func (p *ModifySwarm_RequestPublisher) Publish(msg *ModifySwarm_Request) error {
	return p.Publisher.Publish(msg)
}

// ModifySwarm_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type ModifySwarm_RequestSubscription struct {
	*humble.Subscription
}

// ModifySwarm_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a ModifySwarm_RequestSubscription.
type ModifySwarm_RequestSubscriptionCallback func(msg *ModifySwarm_Request, info *humble.MessageInfo, err error)

// NewModifySwarm_RequestSubscription creates and returns a new subscription for the
// ModifySwarm_Request
func NewModifySwarm_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ModifySwarm_RequestSubscriptionCallback) (*ModifySwarm_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ModifySwarm_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ModifySwarm_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ModifySwarm_RequestSubscription{sub}, nil
}

func (s *ModifySwarm_RequestSubscription) TakeMessage(out *ModifySwarm_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneModifySwarm_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneModifySwarm_RequestSlice(dst, src []ModifySwarm_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ModifySwarm_RequestTypeSupport humble.MessageTypeSupport = _ModifySwarm_RequestTypeSupport{}

type _ModifySwarm_RequestTypeSupport struct{}

func (t _ModifySwarm_RequestTypeSupport) New() humble.Message {
	return NewModifySwarm_Request()
}

func (t _ModifySwarm_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__ModifySwarm_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__ModifySwarm_Request__create())
}

func (t _ModifySwarm_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__ModifySwarm_Request__destroy((*C.as2_msgs__srv__ModifySwarm_Request)(pointer_to_free))
}

func (t _ModifySwarm_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ModifySwarm_Request)
	mem := (*C.as2_msgs__srv__ModifySwarm_Request)(dst)
	mem.detach_drone = C.bool(m.DetachDrone)
	mem.new_drone = C.bool(m.NewDrone)
	mem.new_virtual_centroid_ref = C.bool(m.NewVirtualCentroidRef)
	geometry_msgs_msg.PoseStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.virtual_centroid), &m.VirtualCentroid)
	as2_msgs_msg.PoseWithIDSequenceToC((*as2_msgs_msg.CPoseWithIDSequence)(unsafe.Pointer(&mem.swarm_formation)), m.SwarmFormation)
}

func (t _ModifySwarm_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ModifySwarm_Request)
	mem := (*C.as2_msgs__srv__ModifySwarm_Request)(ros2_message_buffer)
	m.DetachDrone = bool(mem.detach_drone)
	m.NewDrone = bool(mem.new_drone)
	m.NewVirtualCentroidRef = bool(mem.new_virtual_centroid_ref)
	geometry_msgs_msg.PoseStampedTypeSupport.AsGoStruct(&m.VirtualCentroid, unsafe.Pointer(&mem.virtual_centroid))
	as2_msgs_msg.PoseWithIDSequenceToGo(&m.SwarmFormation, *(*as2_msgs_msg.CPoseWithIDSequence)(unsafe.Pointer(&mem.swarm_formation)))
}

func (t _ModifySwarm_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__ModifySwarm_Request())
}

type CModifySwarm_Request = C.as2_msgs__srv__ModifySwarm_Request
type CModifySwarm_RequestSequence = C.as2_msgs__srv__ModifySwarm_Request__Sequence

func ModifySwarm_RequestSequenceToGo(goSlice *[]ModifySwarm_Request, cSlice CModifySwarm_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ModifySwarm_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ModifySwarm_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ModifySwarm_RequestSequenceToC(cSlice *CModifySwarm_RequestSequence, goSlice []ModifySwarm_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__ModifySwarm_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__ModifySwarm_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ModifySwarm_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ModifySwarm_RequestArrayToGo(goSlice []ModifySwarm_Request, cSlice []CModifySwarm_Request) {
	for i := 0; i < len(cSlice); i++ {
		ModifySwarm_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ModifySwarm_RequestArrayToC(cSlice []CModifySwarm_Request, goSlice []ModifySwarm_Request) {
	for i := 0; i < len(goSlice); i++ {
		ModifySwarm_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

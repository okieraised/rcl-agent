// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	as2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/as2_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/set_platform_state_machine_event.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/SetPlatformStateMachineEvent_Response", SetPlatformStateMachineEvent_ResponseTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/SetPlatformStateMachineEvent_Response", SetPlatformStateMachineEvent_ResponseTypeSupport)
}

type SetPlatformStateMachineEvent_Response struct {
	Success      bool                        `yaml:"success"`       // whether the PSM has been set or not
	CurrentState as2_msgs_msg.PlatformStatus `yaml:"current_state"` // PSM result of the aircraft
}

// NewSetPlatformStateMachineEvent_Response creates a new SetPlatformStateMachineEvent_Response with default values.
func NewSetPlatformStateMachineEvent_Response() *SetPlatformStateMachineEvent_Response {
	self := SetPlatformStateMachineEvent_Response{}
	self.SetDefaults()
	return &self
}

func (t *SetPlatformStateMachineEvent_Response) Clone() *SetPlatformStateMachineEvent_Response {
	c := &SetPlatformStateMachineEvent_Response{}
	c.Success = t.Success
	c.CurrentState = *t.CurrentState.Clone()
	return c
}

func (t *SetPlatformStateMachineEvent_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetPlatformStateMachineEvent_Response) SetDefaults() {
	t.Success = false
	t.CurrentState.SetDefaults()
}

func (t *SetPlatformStateMachineEvent_Response) GetTypeSupport() humble.MessageTypeSupport {
	return SetPlatformStateMachineEvent_ResponseTypeSupport
}

// SetPlatformStateMachineEvent_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type SetPlatformStateMachineEvent_ResponsePublisher struct {
	*humble.Publisher
}

// NewSetPlatformStateMachineEvent_ResponsePublisher creates and returns a new publisher for the
// SetPlatformStateMachineEvent_Response
func NewSetPlatformStateMachineEvent_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetPlatformStateMachineEvent_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, SetPlatformStateMachineEvent_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetPlatformStateMachineEvent_ResponsePublisher{pub}, nil
}

func (p *SetPlatformStateMachineEvent_ResponsePublisher) Publish(msg *SetPlatformStateMachineEvent_Response) error {
	return p.Publisher.Publish(msg)
}

// SetPlatformStateMachineEvent_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetPlatformStateMachineEvent_ResponseSubscription struct {
	*humble.Subscription
}

// SetPlatformStateMachineEvent_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a SetPlatformStateMachineEvent_ResponseSubscription.
type SetPlatformStateMachineEvent_ResponseSubscriptionCallback func(msg *SetPlatformStateMachineEvent_Response, info *humble.MessageInfo, err error)

// NewSetPlatformStateMachineEvent_ResponseSubscription creates and returns a new subscription for the
// SetPlatformStateMachineEvent_Response
func NewSetPlatformStateMachineEvent_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetPlatformStateMachineEvent_ResponseSubscriptionCallback) (*SetPlatformStateMachineEvent_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetPlatformStateMachineEvent_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetPlatformStateMachineEvent_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetPlatformStateMachineEvent_ResponseSubscription{sub}, nil
}

func (s *SetPlatformStateMachineEvent_ResponseSubscription) TakeMessage(out *SetPlatformStateMachineEvent_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetPlatformStateMachineEvent_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetPlatformStateMachineEvent_ResponseSlice(dst, src []SetPlatformStateMachineEvent_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetPlatformStateMachineEvent_ResponseTypeSupport humble.MessageTypeSupport = _SetPlatformStateMachineEvent_ResponseTypeSupport{}

type _SetPlatformStateMachineEvent_ResponseTypeSupport struct{}

func (t _SetPlatformStateMachineEvent_ResponseTypeSupport) New() humble.Message {
	return NewSetPlatformStateMachineEvent_Response()
}

func (t _SetPlatformStateMachineEvent_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__SetPlatformStateMachineEvent_Response
	return (unsafe.Pointer)(C.as2_msgs__srv__SetPlatformStateMachineEvent_Response__create())
}

func (t _SetPlatformStateMachineEvent_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__SetPlatformStateMachineEvent_Response__destroy((*C.as2_msgs__srv__SetPlatformStateMachineEvent_Response)(pointer_to_free))
}

func (t _SetPlatformStateMachineEvent_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SetPlatformStateMachineEvent_Response)
	mem := (*C.as2_msgs__srv__SetPlatformStateMachineEvent_Response)(dst)
	mem.success = C.bool(m.Success)
	as2_msgs_msg.PlatformStatusTypeSupport.AsCStruct(unsafe.Pointer(&mem.current_state), &m.CurrentState)
}

func (t _SetPlatformStateMachineEvent_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetPlatformStateMachineEvent_Response)
	mem := (*C.as2_msgs__srv__SetPlatformStateMachineEvent_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	as2_msgs_msg.PlatformStatusTypeSupport.AsGoStruct(&m.CurrentState, unsafe.Pointer(&mem.current_state))
}

func (t _SetPlatformStateMachineEvent_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__SetPlatformStateMachineEvent_Response())
}

type CSetPlatformStateMachineEvent_Response = C.as2_msgs__srv__SetPlatformStateMachineEvent_Response
type CSetPlatformStateMachineEvent_ResponseSequence = C.as2_msgs__srv__SetPlatformStateMachineEvent_Response__Sequence

func SetPlatformStateMachineEvent_ResponseSequenceToGo(goSlice *[]SetPlatformStateMachineEvent_Response, cSlice CSetPlatformStateMachineEvent_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetPlatformStateMachineEvent_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetPlatformStateMachineEvent_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetPlatformStateMachineEvent_ResponseSequenceToC(cSlice *CSetPlatformStateMachineEvent_ResponseSequence, goSlice []SetPlatformStateMachineEvent_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__SetPlatformStateMachineEvent_Response)(C.malloc(C.sizeof_struct_as2_msgs__srv__SetPlatformStateMachineEvent_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetPlatformStateMachineEvent_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetPlatformStateMachineEvent_ResponseArrayToGo(goSlice []SetPlatformStateMachineEvent_Response, cSlice []CSetPlatformStateMachineEvent_Response) {
	for i := 0; i < len(cSlice); i++ {
		SetPlatformStateMachineEvent_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetPlatformStateMachineEvent_ResponseArrayToC(cSlice []CSetPlatformStateMachineEvent_Response, goSlice []SetPlatformStateMachineEvent_Response) {
	for i := 0; i < len(goSlice); i++ {
		SetPlatformStateMachineEvent_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

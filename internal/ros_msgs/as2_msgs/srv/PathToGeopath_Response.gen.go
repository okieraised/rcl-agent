// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	geographic_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geographic_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/path_to_geopath.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PathToGeopath_Response", PathToGeopath_ResponseTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/PathToGeopath_Response", PathToGeopath_ResponseTypeSupport)
}

type PathToGeopath_Response struct {
	Success bool                        `yaml:"success"`  // whether the origin has been set or not
	GeoPath geographic_msgs_msg.GeoPath `yaml:"geo_path"` // Path in lat/lon and altitude
}

// NewPathToGeopath_Response creates a new PathToGeopath_Response with default values.
func NewPathToGeopath_Response() *PathToGeopath_Response {
	self := PathToGeopath_Response{}
	self.SetDefaults()
	return &self
}

func (t *PathToGeopath_Response) Clone() *PathToGeopath_Response {
	c := &PathToGeopath_Response{}
	c.Success = t.Success
	c.GeoPath = *t.GeoPath.Clone()
	return c
}

func (t *PathToGeopath_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PathToGeopath_Response) SetDefaults() {
	t.Success = false
	t.GeoPath.SetDefaults()
}

func (t *PathToGeopath_Response) GetTypeSupport() humble.MessageTypeSupport {
	return PathToGeopath_ResponseTypeSupport
}

// PathToGeopath_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type PathToGeopath_ResponsePublisher struct {
	*humble.Publisher
}

// NewPathToGeopath_ResponsePublisher creates and returns a new publisher for the
// PathToGeopath_Response
func NewPathToGeopath_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PathToGeopath_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, PathToGeopath_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PathToGeopath_ResponsePublisher{pub}, nil
}

func (p *PathToGeopath_ResponsePublisher) Publish(msg *PathToGeopath_Response) error {
	return p.Publisher.Publish(msg)
}

// PathToGeopath_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type PathToGeopath_ResponseSubscription struct {
	*humble.Subscription
}

// PathToGeopath_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a PathToGeopath_ResponseSubscription.
type PathToGeopath_ResponseSubscriptionCallback func(msg *PathToGeopath_Response, info *humble.MessageInfo, err error)

// NewPathToGeopath_ResponseSubscription creates and returns a new subscription for the
// PathToGeopath_Response
func NewPathToGeopath_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PathToGeopath_ResponseSubscriptionCallback) (*PathToGeopath_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PathToGeopath_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PathToGeopath_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PathToGeopath_ResponseSubscription{sub}, nil
}

func (s *PathToGeopath_ResponseSubscription) TakeMessage(out *PathToGeopath_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePathToGeopath_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePathToGeopath_ResponseSlice(dst, src []PathToGeopath_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PathToGeopath_ResponseTypeSupport humble.MessageTypeSupport = _PathToGeopath_ResponseTypeSupport{}

type _PathToGeopath_ResponseTypeSupport struct{}

func (t _PathToGeopath_ResponseTypeSupport) New() humble.Message {
	return NewPathToGeopath_Response()
}

func (t _PathToGeopath_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__PathToGeopath_Response
	return (unsafe.Pointer)(C.as2_msgs__srv__PathToGeopath_Response__create())
}

func (t _PathToGeopath_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__PathToGeopath_Response__destroy((*C.as2_msgs__srv__PathToGeopath_Response)(pointer_to_free))
}

func (t _PathToGeopath_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PathToGeopath_Response)
	mem := (*C.as2_msgs__srv__PathToGeopath_Response)(dst)
	mem.success = C.bool(m.Success)
	geographic_msgs_msg.GeoPathTypeSupport.AsCStruct(unsafe.Pointer(&mem.geo_path), &m.GeoPath)
}

func (t _PathToGeopath_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PathToGeopath_Response)
	mem := (*C.as2_msgs__srv__PathToGeopath_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	geographic_msgs_msg.GeoPathTypeSupport.AsGoStruct(&m.GeoPath, unsafe.Pointer(&mem.geo_path))
}

func (t _PathToGeopath_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__PathToGeopath_Response())
}

type CPathToGeopath_Response = C.as2_msgs__srv__PathToGeopath_Response
type CPathToGeopath_ResponseSequence = C.as2_msgs__srv__PathToGeopath_Response__Sequence

func PathToGeopath_ResponseSequenceToGo(goSlice *[]PathToGeopath_Response, cSlice CPathToGeopath_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PathToGeopath_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PathToGeopath_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PathToGeopath_ResponseSequenceToC(cSlice *CPathToGeopath_ResponseSequence, goSlice []PathToGeopath_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__PathToGeopath_Response)(C.malloc(C.sizeof_struct_as2_msgs__srv__PathToGeopath_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PathToGeopath_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PathToGeopath_ResponseArrayToGo(goSlice []PathToGeopath_Response, cSlice []CPathToGeopath_Response) {
	for i := 0; i < len(cSlice); i++ {
		PathToGeopath_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PathToGeopath_ResponseArrayToC(cSlice []CPathToGeopath_Response, goSlice []PathToGeopath_Response) {
	for i := 0; i < len(goSlice); i++ {
		PathToGeopath_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/list_control_modes.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/ListControlModes_Request", ListControlModes_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/ListControlModes_Request", ListControlModes_RequestTypeSupport)
}

type ListControlModes_Request struct {
}

// NewListControlModes_Request creates a new ListControlModes_Request with default values.
func NewListControlModes_Request() *ListControlModes_Request {
	self := ListControlModes_Request{}
	self.SetDefaults()
	return &self
}

func (t *ListControlModes_Request) Clone() *ListControlModes_Request {
	c := &ListControlModes_Request{}
	return c
}

func (t *ListControlModes_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ListControlModes_Request) SetDefaults() {
}

func (t *ListControlModes_Request) GetTypeSupport() humble.MessageTypeSupport {
	return ListControlModes_RequestTypeSupport
}

// ListControlModes_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type ListControlModes_RequestPublisher struct {
	*humble.Publisher
}

// NewListControlModes_RequestPublisher creates and returns a new publisher for the
// ListControlModes_Request
func NewListControlModes_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ListControlModes_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, ListControlModes_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListControlModes_RequestPublisher{pub}, nil
}

func (p *ListControlModes_RequestPublisher) Publish(msg *ListControlModes_Request) error {
	return p.Publisher.Publish(msg)
}

// ListControlModes_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type ListControlModes_RequestSubscription struct {
	*humble.Subscription
}

// ListControlModes_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a ListControlModes_RequestSubscription.
type ListControlModes_RequestSubscriptionCallback func(msg *ListControlModes_Request, info *humble.MessageInfo, err error)

// NewListControlModes_RequestSubscription creates and returns a new subscription for the
// ListControlModes_Request
func NewListControlModes_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ListControlModes_RequestSubscriptionCallback) (*ListControlModes_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ListControlModes_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ListControlModes_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ListControlModes_RequestSubscription{sub}, nil
}

func (s *ListControlModes_RequestSubscription) TakeMessage(out *ListControlModes_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneListControlModes_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneListControlModes_RequestSlice(dst, src []ListControlModes_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ListControlModes_RequestTypeSupport humble.MessageTypeSupport = _ListControlModes_RequestTypeSupport{}

type _ListControlModes_RequestTypeSupport struct{}

func (t _ListControlModes_RequestTypeSupport) New() humble.Message {
	return NewListControlModes_Request()
}

func (t _ListControlModes_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__ListControlModes_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__ListControlModes_Request__create())
}

func (t _ListControlModes_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__ListControlModes_Request__destroy((*C.as2_msgs__srv__ListControlModes_Request)(pointer_to_free))
}

func (t _ListControlModes_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {

}

func (t _ListControlModes_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _ListControlModes_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__ListControlModes_Request())
}

type CListControlModes_Request = C.as2_msgs__srv__ListControlModes_Request
type CListControlModes_RequestSequence = C.as2_msgs__srv__ListControlModes_Request__Sequence

func ListControlModes_RequestSequenceToGo(goSlice *[]ListControlModes_Request, cSlice CListControlModes_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ListControlModes_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ListControlModes_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ListControlModes_RequestSequenceToC(cSlice *CListControlModes_RequestSequence, goSlice []ListControlModes_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__ListControlModes_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__ListControlModes_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ListControlModes_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ListControlModes_RequestArrayToGo(goSlice []ListControlModes_Request, cSlice []CListControlModes_Request) {
	for i := 0; i < len(cSlice); i++ {
		ListControlModes_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ListControlModes_RequestArrayToC(cSlice []CListControlModes_Request, goSlice []ListControlModes_Request) {
	for i := 0; i < len(goSlice); i++ {
		ListControlModes_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

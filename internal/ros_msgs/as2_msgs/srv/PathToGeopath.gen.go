// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <as2_msgs/srv/path_to_geopath.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("as2_msgs/PathToGeopath", PathToGeopathTypeSupport)
	humble.RegisterService("as2_msgs/srv/PathToGeopath", PathToGeopathTypeSupport)
}

type _PathToGeopathTypeSupport struct {}

func (s _PathToGeopathTypeSupport) Request() humble.MessageTypeSupport {
	return PathToGeopath_RequestTypeSupport
}

func (s _PathToGeopathTypeSupport) Response() humble.MessageTypeSupport {
	return PathToGeopath_ResponseTypeSupport
}

func (s _PathToGeopathTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__as2_msgs__srv__PathToGeopath())
}

// Modifying this variable is undefined behavior.
var PathToGeopathTypeSupport humble.ServiceTypeSupport = _PathToGeopathTypeSupport{}

// PathToGeopathClient wraps humble.Client to provide type safe helper
// functions
type PathToGeopathClient struct {
	*humble.Client
}

// NewPathToGeopathClient creates and returns a new client for the
// PathToGeopath
func NewPathToGeopathClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*PathToGeopathClient, error) {
	client, err := node.NewClient(serviceName, PathToGeopathTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PathToGeopathClient{client}, nil
}

func (s *PathToGeopathClient) Send(ctx context.Context, req *PathToGeopath_Request) (*PathToGeopath_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*PathToGeopath_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type PathToGeopathServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s PathToGeopathServiceResponseSender) SendResponse(resp *PathToGeopath_Response) error {
	return s.sender.SendResponse(resp)
}

type PathToGeopathServiceRequestHandler func(*humble.ServiceInfo, *PathToGeopath_Request, PathToGeopathServiceResponseSender)

// PathToGeopathService wraps humble.Service to provide type safe helper
// functions
type PathToGeopathService struct {
	*humble.Service
}

// NewPathToGeopathService creates and returns a new service for the
// PathToGeopath
func NewPathToGeopathService(node *humble.Node, name string, options *humble.ServiceOptions, handler PathToGeopathServiceRequestHandler) (*PathToGeopathService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*PathToGeopath_Request)
		responseSender := PathToGeopathServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, PathToGeopathTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &PathToGeopathService{service}, nil
}
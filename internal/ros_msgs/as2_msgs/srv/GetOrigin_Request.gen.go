// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/get_origin.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/GetOrigin_Request", GetOrigin_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/GetOrigin_Request", GetOrigin_RequestTypeSupport)
}

type GetOrigin_Request struct {
}

// NewGetOrigin_Request creates a new GetOrigin_Request with default values.
func NewGetOrigin_Request() *GetOrigin_Request {
	self := GetOrigin_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetOrigin_Request) Clone() *GetOrigin_Request {
	c := &GetOrigin_Request{}
	return c
}

func (t *GetOrigin_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GetOrigin_Request) SetDefaults() {
}

func (t *GetOrigin_Request) GetTypeSupport() humble.MessageTypeSupport {
	return GetOrigin_RequestTypeSupport
}

// GetOrigin_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type GetOrigin_RequestPublisher struct {
	*humble.Publisher
}

// NewGetOrigin_RequestPublisher creates and returns a new publisher for the
// GetOrigin_Request
func NewGetOrigin_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GetOrigin_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, GetOrigin_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetOrigin_RequestPublisher{pub}, nil
}

func (p *GetOrigin_RequestPublisher) Publish(msg *GetOrigin_Request) error {
	return p.Publisher.Publish(msg)
}

// GetOrigin_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type GetOrigin_RequestSubscription struct {
	*humble.Subscription
}

// GetOrigin_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetOrigin_RequestSubscription.
type GetOrigin_RequestSubscriptionCallback func(msg *GetOrigin_Request, info *humble.MessageInfo, err error)

// NewGetOrigin_RequestSubscription creates and returns a new subscription for the
// GetOrigin_Request
func NewGetOrigin_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GetOrigin_RequestSubscriptionCallback) (*GetOrigin_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GetOrigin_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetOrigin_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetOrigin_RequestSubscription{sub}, nil
}

func (s *GetOrigin_RequestSubscription) TakeMessage(out *GetOrigin_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetOrigin_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetOrigin_RequestSlice(dst, src []GetOrigin_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetOrigin_RequestTypeSupport humble.MessageTypeSupport = _GetOrigin_RequestTypeSupport{}

type _GetOrigin_RequestTypeSupport struct{}

func (t _GetOrigin_RequestTypeSupport) New() humble.Message {
	return NewGetOrigin_Request()
}

func (t _GetOrigin_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__GetOrigin_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__GetOrigin_Request__create())
}

func (t _GetOrigin_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__GetOrigin_Request__destroy((*C.as2_msgs__srv__GetOrigin_Request)(pointer_to_free))
}

func (t _GetOrigin_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {

}

func (t _GetOrigin_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _GetOrigin_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__GetOrigin_Request())
}

type CGetOrigin_Request = C.as2_msgs__srv__GetOrigin_Request
type CGetOrigin_RequestSequence = C.as2_msgs__srv__GetOrigin_Request__Sequence

func GetOrigin_RequestSequenceToGo(goSlice *[]GetOrigin_Request, cSlice CGetOrigin_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetOrigin_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetOrigin_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetOrigin_RequestSequenceToC(cSlice *CGetOrigin_RequestSequence, goSlice []GetOrigin_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__GetOrigin_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__GetOrigin_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetOrigin_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetOrigin_RequestArrayToGo(goSlice []GetOrigin_Request, cSlice []CGetOrigin_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetOrigin_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetOrigin_RequestArrayToC(cSlice []CGetOrigin_Request, goSlice []GetOrigin_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetOrigin_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

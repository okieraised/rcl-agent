// Code generated by ros2gen. DO NOT EDIT.

package as2_msgs_srv

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <as2_msgs/srv/package_pick_up.h>

*/
import "C"

func init() {
	humble.RegisterMessage("as2_msgs/PackagePickUp_Request", PackagePickUp_RequestTypeSupport)
	humble.RegisterMessage("as2_msgs/srv/PackagePickUp_Request", PackagePickUp_RequestTypeSupport)
}

type PackagePickUp_Request struct {
	Enable     bool                    `yaml:"enable"`      // Flag to enable pickup
	SpeedLimit geometry_msgs_msg.Twist `yaml:"speed_limit"` // speed limit (m/s)
}

// NewPackagePickUp_Request creates a new PackagePickUp_Request with default values.
func NewPackagePickUp_Request() *PackagePickUp_Request {
	self := PackagePickUp_Request{}
	self.SetDefaults()
	return &self
}

func (t *PackagePickUp_Request) Clone() *PackagePickUp_Request {
	c := &PackagePickUp_Request{}
	c.Enable = t.Enable
	c.SpeedLimit = *t.SpeedLimit.Clone()
	return c
}

func (t *PackagePickUp_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PackagePickUp_Request) SetDefaults() {
	t.Enable = false
	t.SpeedLimit.SetDefaults()
}

func (t *PackagePickUp_Request) GetTypeSupport() humble.MessageTypeSupport {
	return PackagePickUp_RequestTypeSupport
}

// PackagePickUp_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type PackagePickUp_RequestPublisher struct {
	*humble.Publisher
}

// NewPackagePickUp_RequestPublisher creates and returns a new publisher for the
// PackagePickUp_Request
func NewPackagePickUp_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PackagePickUp_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, PackagePickUp_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PackagePickUp_RequestPublisher{pub}, nil
}

func (p *PackagePickUp_RequestPublisher) Publish(msg *PackagePickUp_Request) error {
	return p.Publisher.Publish(msg)
}

// PackagePickUp_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type PackagePickUp_RequestSubscription struct {
	*humble.Subscription
}

// PackagePickUp_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a PackagePickUp_RequestSubscription.
type PackagePickUp_RequestSubscriptionCallback func(msg *PackagePickUp_Request, info *humble.MessageInfo, err error)

// NewPackagePickUp_RequestSubscription creates and returns a new subscription for the
// PackagePickUp_Request
func NewPackagePickUp_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PackagePickUp_RequestSubscriptionCallback) (*PackagePickUp_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PackagePickUp_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PackagePickUp_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PackagePickUp_RequestSubscription{sub}, nil
}

func (s *PackagePickUp_RequestSubscription) TakeMessage(out *PackagePickUp_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePackagePickUp_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePackagePickUp_RequestSlice(dst, src []PackagePickUp_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PackagePickUp_RequestTypeSupport humble.MessageTypeSupport = _PackagePickUp_RequestTypeSupport{}

type _PackagePickUp_RequestTypeSupport struct{}

func (t _PackagePickUp_RequestTypeSupport) New() humble.Message {
	return NewPackagePickUp_Request()
}

func (t _PackagePickUp_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.as2_msgs__srv__PackagePickUp_Request
	return (unsafe.Pointer)(C.as2_msgs__srv__PackagePickUp_Request__create())
}

func (t _PackagePickUp_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.as2_msgs__srv__PackagePickUp_Request__destroy((*C.as2_msgs__srv__PackagePickUp_Request)(pointer_to_free))
}

func (t _PackagePickUp_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PackagePickUp_Request)
	mem := (*C.as2_msgs__srv__PackagePickUp_Request)(dst)
	mem.enable = C.bool(m.Enable)
	geometry_msgs_msg.TwistTypeSupport.AsCStruct(unsafe.Pointer(&mem.speed_limit), &m.SpeedLimit)
}

func (t _PackagePickUp_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PackagePickUp_Request)
	mem := (*C.as2_msgs__srv__PackagePickUp_Request)(ros2_message_buffer)
	m.Enable = bool(mem.enable)
	geometry_msgs_msg.TwistTypeSupport.AsGoStruct(&m.SpeedLimit, unsafe.Pointer(&mem.speed_limit))
}

func (t _PackagePickUp_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__as2_msgs__srv__PackagePickUp_Request())
}

type CPackagePickUp_Request = C.as2_msgs__srv__PackagePickUp_Request
type CPackagePickUp_RequestSequence = C.as2_msgs__srv__PackagePickUp_Request__Sequence

func PackagePickUp_RequestSequenceToGo(goSlice *[]PackagePickUp_Request, cSlice CPackagePickUp_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PackagePickUp_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PackagePickUp_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PackagePickUp_RequestSequenceToC(cSlice *CPackagePickUp_RequestSequence, goSlice []PackagePickUp_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.as2_msgs__srv__PackagePickUp_Request)(C.malloc(C.sizeof_struct_as2_msgs__srv__PackagePickUp_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PackagePickUp_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PackagePickUp_RequestArrayToGo(goSlice []PackagePickUp_Request, cSlice []CPackagePickUp_Request) {
	for i := 0; i < len(cSlice); i++ {
		PackagePickUp_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PackagePickUp_RequestArrayToC(cSlice []CPackagePickUp_Request, goSlice []PackagePickUp_Request) {
	for i := 0; i < len(goSlice); i++ {
		PackagePickUp_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package visualization_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/marker_array.h>

*/
import "C"

func init() {
	humble.RegisterMessage("visualization_msgs/MarkerArray", MarkerArrayTypeSupport)
	humble.RegisterMessage("visualization_msgs/msg/MarkerArray", MarkerArrayTypeSupport)
}

type MarkerArray struct {
	Markers []Marker `yaml:"markers"`
}

// NewMarkerArray creates a new MarkerArray with default values.
func NewMarkerArray() *MarkerArray {
	self := MarkerArray{}
	self.SetDefaults()
	return &self
}

func (t *MarkerArray) Clone() *MarkerArray {
	c := &MarkerArray{}
	if t.Markers != nil {
		c.Markers = make([]Marker, len(t.Markers))
		CloneMarkerSlice(c.Markers, t.Markers)
	}
	return c
}

func (t *MarkerArray) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MarkerArray) SetDefaults() {
	t.Markers = nil
}

func (t *MarkerArray) GetTypeSupport() humble.MessageTypeSupport {
	return MarkerArrayTypeSupport
}

// MarkerArrayPublisher wraps humble.Publisher to provide type safe helper
// functions
type MarkerArrayPublisher struct {
	*humble.Publisher
}

// NewMarkerArrayPublisher creates and returns a new publisher for the
// MarkerArray
func NewMarkerArrayPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MarkerArrayPublisher, error) {
	pub, err := node.NewPublisher(topicName, MarkerArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MarkerArrayPublisher{pub}, nil
}

func (p *MarkerArrayPublisher) Publish(msg *MarkerArray) error {
	return p.Publisher.Publish(msg)
}

// MarkerArraySubscription wraps humble.Subscription to provide type safe helper
// functions
type MarkerArraySubscription struct {
	*humble.Subscription
}

// MarkerArraySubscriptionCallback type is used to provide a subscription
// handler function for a MarkerArraySubscription.
type MarkerArraySubscriptionCallback func(msg *MarkerArray, info *humble.MessageInfo, err error)

// NewMarkerArraySubscription creates and returns a new subscription for the
// MarkerArray
func NewMarkerArraySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MarkerArraySubscriptionCallback) (*MarkerArraySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MarkerArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MarkerArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MarkerArraySubscription{sub}, nil
}

func (s *MarkerArraySubscription) TakeMessage(out *MarkerArray) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMarkerArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMarkerArraySlice(dst, src []MarkerArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MarkerArrayTypeSupport humble.MessageTypeSupport = _MarkerArrayTypeSupport{}

type _MarkerArrayTypeSupport struct{}

func (t _MarkerArrayTypeSupport) New() humble.Message {
	return NewMarkerArray()
}

func (t _MarkerArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__MarkerArray
	return (unsafe.Pointer)(C.visualization_msgs__msg__MarkerArray__create())
}

func (t _MarkerArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__MarkerArray__destroy((*C.visualization_msgs__msg__MarkerArray)(pointer_to_free))
}

func (t _MarkerArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MarkerArray)
	mem := (*C.visualization_msgs__msg__MarkerArray)(dst)
	MarkerSequenceToC(&mem.markers, m.Markers)
}

func (t _MarkerArrayTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MarkerArray)
	mem := (*C.visualization_msgs__msg__MarkerArray)(ros2_message_buffer)
	MarkerSequenceToGo(&m.Markers, mem.markers)
}

func (t _MarkerArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__MarkerArray())
}

type CMarkerArray = C.visualization_msgs__msg__MarkerArray
type CMarkerArraySequence = C.visualization_msgs__msg__MarkerArray__Sequence

func MarkerArraySequenceToGo(goSlice *[]MarkerArray, cSlice CMarkerArraySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MarkerArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MarkerArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MarkerArraySequenceToC(cSlice *CMarkerArraySequence, goSlice []MarkerArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__MarkerArray)(C.malloc(C.sizeof_struct_visualization_msgs__msg__MarkerArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MarkerArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MarkerArrayArrayToGo(goSlice []MarkerArray, cSlice []CMarkerArray) {
	for i := 0; i < len(cSlice); i++ {
		MarkerArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MarkerArrayArrayToC(cSlice []CMarkerArray, goSlice []MarkerArray) {
	for i := 0; i < len(goSlice); i++ {
		MarkerArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

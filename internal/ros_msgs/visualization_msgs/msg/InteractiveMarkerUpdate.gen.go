// Code generated by ros2gen. DO NOT EDIT.

package visualization_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/interactive_marker_update.h>

*/
import "C"

func init() {
	humble.RegisterMessage("visualization_msgs/InteractiveMarkerUpdate", InteractiveMarkerUpdateTypeSupport)
	humble.RegisterMessage("visualization_msgs/msg/InteractiveMarkerUpdate", InteractiveMarkerUpdateTypeSupport)
}

const (
	InteractiveMarkerUpdate_KEEP_ALIVE uint8 = 0 // Type holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.UPDATE: Incremental update to previous state.The sequence number must be 1 higher than forthe previous update.KEEP_ALIVE: Indicates the that the server is still living.The sequence number does not increase.No payload data should be filled out (markers, poses, or erases).
	InteractiveMarkerUpdate_UPDATE     uint8 = 1
)

type InteractiveMarkerUpdate struct {
	ServerId string                  `yaml:"server_id"` // Identifying string. Must be unique in the topic namespacethat this server works on.
	SeqNum   uint64                  `yaml:"seq_num"`   // Sequence number.The client will use this to detect if it has missed an update.
	Type     uint8                   `yaml:"type"`
	Markers  []InteractiveMarker     `yaml:"markers"` // Markers to be added or updated
	Poses    []InteractiveMarkerPose `yaml:"poses"`   // Poses of markers that should be moved
	Erases   []string                `yaml:"erases"`  // Names of markers to be erased
}

// NewInteractiveMarkerUpdate creates a new InteractiveMarkerUpdate with default values.
func NewInteractiveMarkerUpdate() *InteractiveMarkerUpdate {
	self := InteractiveMarkerUpdate{}
	self.SetDefaults()
	return &self
}

func (t *InteractiveMarkerUpdate) Clone() *InteractiveMarkerUpdate {
	c := &InteractiveMarkerUpdate{}
	c.ServerId = t.ServerId
	c.SeqNum = t.SeqNum
	c.Type = t.Type
	if t.Markers != nil {
		c.Markers = make([]InteractiveMarker, len(t.Markers))
		CloneInteractiveMarkerSlice(c.Markers, t.Markers)
	}
	if t.Poses != nil {
		c.Poses = make([]InteractiveMarkerPose, len(t.Poses))
		CloneInteractiveMarkerPoseSlice(c.Poses, t.Poses)
	}
	if t.Erases != nil {
		c.Erases = make([]string, len(t.Erases))
		copy(c.Erases, t.Erases)
	}
	return c
}

func (t *InteractiveMarkerUpdate) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *InteractiveMarkerUpdate) SetDefaults() {
	t.ServerId = ""
	t.SeqNum = 0
	t.Type = 0
	t.Markers = nil
	t.Poses = nil
	t.Erases = nil
}

func (t *InteractiveMarkerUpdate) GetTypeSupport() humble.MessageTypeSupport {
	return InteractiveMarkerUpdateTypeSupport
}

// InteractiveMarkerUpdatePublisher wraps humble.Publisher to provide type safe helper
// functions
type InteractiveMarkerUpdatePublisher struct {
	*humble.Publisher
}

// NewInteractiveMarkerUpdatePublisher creates and returns a new publisher for the
// InteractiveMarkerUpdate
func NewInteractiveMarkerUpdatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*InteractiveMarkerUpdatePublisher, error) {
	pub, err := node.NewPublisher(topicName, InteractiveMarkerUpdateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &InteractiveMarkerUpdatePublisher{pub}, nil
}

func (p *InteractiveMarkerUpdatePublisher) Publish(msg *InteractiveMarkerUpdate) error {
	return p.Publisher.Publish(msg)
}

// InteractiveMarkerUpdateSubscription wraps humble.Subscription to provide type safe helper
// functions
type InteractiveMarkerUpdateSubscription struct {
	*humble.Subscription
}

// InteractiveMarkerUpdateSubscriptionCallback type is used to provide a subscription
// handler function for a InteractiveMarkerUpdateSubscription.
type InteractiveMarkerUpdateSubscriptionCallback func(msg *InteractiveMarkerUpdate, info *humble.MessageInfo, err error)

// NewInteractiveMarkerUpdateSubscription creates and returns a new subscription for the
// InteractiveMarkerUpdate
func NewInteractiveMarkerUpdateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback InteractiveMarkerUpdateSubscriptionCallback) (*InteractiveMarkerUpdateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg InteractiveMarkerUpdate
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, InteractiveMarkerUpdateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &InteractiveMarkerUpdateSubscription{sub}, nil
}

func (s *InteractiveMarkerUpdateSubscription) TakeMessage(out *InteractiveMarkerUpdate) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneInteractiveMarkerUpdateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneInteractiveMarkerUpdateSlice(dst, src []InteractiveMarkerUpdate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var InteractiveMarkerUpdateTypeSupport humble.MessageTypeSupport = _InteractiveMarkerUpdateTypeSupport{}

type _InteractiveMarkerUpdateTypeSupport struct{}

func (t _InteractiveMarkerUpdateTypeSupport) New() humble.Message {
	return NewInteractiveMarkerUpdate()
}

func (t _InteractiveMarkerUpdateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__InteractiveMarkerUpdate
	return (unsafe.Pointer)(C.visualization_msgs__msg__InteractiveMarkerUpdate__create())
}

func (t _InteractiveMarkerUpdateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__InteractiveMarkerUpdate__destroy((*C.visualization_msgs__msg__InteractiveMarkerUpdate)(pointer_to_free))
}

func (t _InteractiveMarkerUpdateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*InteractiveMarkerUpdate)
	mem := (*C.visualization_msgs__msg__InteractiveMarkerUpdate)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.server_id), m.ServerId)
	mem.seq_num = C.uint64_t(m.SeqNum)
	mem._type = C.uint8_t(m.Type)
	InteractiveMarkerSequenceToC(&mem.markers, m.Markers)
	InteractiveMarkerPoseSequenceToC(&mem.poses, m.Poses)
	humble.StringSequenceToC((*humble.CStringSequence)(unsafe.Pointer(&mem.erases)), m.Erases)
}

func (t _InteractiveMarkerUpdateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*InteractiveMarkerUpdate)
	mem := (*C.visualization_msgs__msg__InteractiveMarkerUpdate)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.ServerId, unsafe.Pointer(&mem.server_id))
	m.SeqNum = uint64(mem.seq_num)
	m.Type = uint8(mem._type)
	InteractiveMarkerSequenceToGo(&m.Markers, mem.markers)
	InteractiveMarkerPoseSequenceToGo(&m.Poses, mem.poses)
	humble.StringSequenceToGo(&m.Erases, *(*humble.CStringSequence)(unsafe.Pointer(&mem.erases)))
}

func (t _InteractiveMarkerUpdateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__InteractiveMarkerUpdate())
}

type CInteractiveMarkerUpdate = C.visualization_msgs__msg__InteractiveMarkerUpdate
type CInteractiveMarkerUpdateSequence = C.visualization_msgs__msg__InteractiveMarkerUpdate__Sequence

func InteractiveMarkerUpdateSequenceToGo(goSlice *[]InteractiveMarkerUpdate, cSlice CInteractiveMarkerUpdateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]InteractiveMarkerUpdate, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		InteractiveMarkerUpdateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func InteractiveMarkerUpdateSequenceToC(cSlice *CInteractiveMarkerUpdateSequence, goSlice []InteractiveMarkerUpdate) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__InteractiveMarkerUpdate)(C.malloc(C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerUpdate * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		InteractiveMarkerUpdateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func InteractiveMarkerUpdateArrayToGo(goSlice []InteractiveMarkerUpdate, cSlice []CInteractiveMarkerUpdate) {
	for i := 0; i < len(cSlice); i++ {
		InteractiveMarkerUpdateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func InteractiveMarkerUpdateArrayToC(cSlice []CInteractiveMarkerUpdate, goSlice []InteractiveMarkerUpdate) {
	for i := 0; i < len(goSlice); i++ {
		InteractiveMarkerUpdateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

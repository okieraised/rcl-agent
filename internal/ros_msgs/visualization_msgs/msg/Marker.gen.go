// Code generated by ros2gen. DO NOT EDIT.

package visualization_msgs_msg

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	sensor_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/sensor_msgs/msg"
	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/marker.h>

*/
import "C"

func init() {
	humble.RegisterMessage("visualization_msgs/Marker", MarkerTypeSupport)
	humble.RegisterMessage("visualization_msgs/msg/Marker", MarkerTypeSupport)
}

const (
	Marker_ARROW            int32 = 0
	Marker_CUBE             int32 = 1
	Marker_SPHERE           int32 = 2
	Marker_CYLINDER         int32 = 3
	Marker_LINE_STRIP       int32 = 4
	Marker_LINE_LIST        int32 = 5
	Marker_CUBE_LIST        int32 = 6
	Marker_SPHERE_LIST      int32 = 7
	Marker_POINTS           int32 = 8
	Marker_TEXT_VIEW_FACING int32 = 9
	Marker_MESH_RESOURCE    int32 = 10
	Marker_TRIANGLE_LIST    int32 = 11
	Marker_ADD              int32 = 0
	Marker_MODIFY           int32 = 0
	Marker_DELETE           int32 = 2
	Marker_DELETEALL        int32 = 3
)

type Marker struct {
	Header                   std_msgs_msg.Header             `yaml:"header"`           // Header for timestamp and frame id.
	Ns                       string                          `yaml:"ns"`               // Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.
	Id                       int32                           `yaml:"id"`               // Object ID used in conjunction with the namespace for manipulating and deleting the object later.
	Type                     int32                           `yaml:"type"`             // Type of object.
	Action                   int32                           `yaml:"action"`           // Action to take; one of:- 0 add/modify an object- 1 (deprecated)- 2 deletes an object (with the given ns and id)- 3 deletes all objects (or those with the given ns if any)
	Pose                     geometry_msgs_msg.Pose          `yaml:"pose"`             // Pose of the object with respect the frame_id specified in the header.
	Scale                    geometry_msgs_msg.Vector3       `yaml:"scale"`            // Scale of the object; 1,1,1 means default (usually 1 meter square).
	Color                    std_msgs_msg.ColorRGBA          `yaml:"color"`            // Color of the object; in the range: [0.0-1.0]
	Lifetime                 builtin_interfaces_msg.Duration `yaml:"lifetime"`         // How long the object should last before being automatically deleted.0 indicates forever.
	FrameLocked              bool                            `yaml:"frame_locked"`     // If this marker should be frame-locked, i.e. retransformed into its frame every timestep.
	Points                   []geometry_msgs_msg.Point       `yaml:"points"`           // Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)
	Colors                   []std_msgs_msg.ColorRGBA        `yaml:"colors"`           // Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)The number of colors provided must either be 0 or equal to the number of points provided.NOTE: alpha is not yet used
	TextureResource          string                          `yaml:"texture_resource"` // Texture resource is a special URI that can either reference a texture file ina format acceptable to (resource retriever)[https://index.ros.org/p/resource_retriever/]or an embedded texture via a string matching the format:"embedded://texture_name"
	Texture                  sensor_msgs_msg.CompressedImage `yaml:"texture"`          // An image to be loaded into the rendering engine as the texture for this marker.This will be used iff texture_resource is set to embedded.
	UvCoordinates            []UVCoordinate                  `yaml:"uv_coordinates"`   // Location of each vertex within the texture; in the range: [0.0-1.0]
	Text                     string                          `yaml:"text"`             // Only used for text markers
	MeshResource             string                          `yaml:"mesh_resource"`    // Only used for MESH_RESOURCE markers.Similar to texture_resource, mesh_resource uses resource retriever to load a mesh.Optionally, a mesh file can be sent in-message via the mesh_file field. If doing so,use the following format for mesh_resource:"embedded://mesh_name"
	MeshFile                 MeshFile                        `yaml:"mesh_file"`
	MeshUseEmbeddedMaterials bool                            `yaml:"mesh_use_embedded_materials"`
}

// NewMarker creates a new Marker with default values.
func NewMarker() *Marker {
	self := Marker{}
	self.SetDefaults()
	return &self
}

func (t *Marker) Clone() *Marker {
	c := &Marker{}
	c.Header = *t.Header.Clone()
	c.Ns = t.Ns
	c.Id = t.Id
	c.Type = t.Type
	c.Action = t.Action
	c.Pose = *t.Pose.Clone()
	c.Scale = *t.Scale.Clone()
	c.Color = *t.Color.Clone()
	c.Lifetime = *t.Lifetime.Clone()
	c.FrameLocked = t.FrameLocked
	if t.Points != nil {
		c.Points = make([]geometry_msgs_msg.Point, len(t.Points))
		geometry_msgs_msg.ClonePointSlice(c.Points, t.Points)
	}
	if t.Colors != nil {
		c.Colors = make([]std_msgs_msg.ColorRGBA, len(t.Colors))
		std_msgs_msg.CloneColorRGBASlice(c.Colors, t.Colors)
	}
	c.TextureResource = t.TextureResource
	c.Texture = *t.Texture.Clone()
	if t.UvCoordinates != nil {
		c.UvCoordinates = make([]UVCoordinate, len(t.UvCoordinates))
		CloneUVCoordinateSlice(c.UvCoordinates, t.UvCoordinates)
	}
	c.Text = t.Text
	c.MeshResource = t.MeshResource
	c.MeshFile = *t.MeshFile.Clone()
	c.MeshUseEmbeddedMaterials = t.MeshUseEmbeddedMaterials
	return c
}

func (t *Marker) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Marker) SetDefaults() {
	t.Header.SetDefaults()
	t.Ns = ""
	t.Id = 0
	t.Type = 0
	t.Action = 0
	t.Pose.SetDefaults()
	t.Scale.SetDefaults()
	t.Color.SetDefaults()
	t.Lifetime.SetDefaults()
	t.FrameLocked = false
	t.Points = nil
	t.Colors = nil
	t.TextureResource = ""
	t.Texture.SetDefaults()
	t.UvCoordinates = nil
	t.Text = ""
	t.MeshResource = ""
	t.MeshFile.SetDefaults()
	t.MeshUseEmbeddedMaterials = false
}

func (t *Marker) GetTypeSupport() humble.MessageTypeSupport {
	return MarkerTypeSupport
}

// MarkerPublisher wraps humble.Publisher to provide type safe helper
// functions
type MarkerPublisher struct {
	*humble.Publisher
}

// NewMarkerPublisher creates and returns a new publisher for the
// Marker
func NewMarkerPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MarkerPublisher, error) {
	pub, err := node.NewPublisher(topicName, MarkerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MarkerPublisher{pub}, nil
}

func (p *MarkerPublisher) Publish(msg *Marker) error {
	return p.Publisher.Publish(msg)
}

// MarkerSubscription wraps humble.Subscription to provide type safe helper
// functions
type MarkerSubscription struct {
	*humble.Subscription
}

// MarkerSubscriptionCallback type is used to provide a subscription
// handler function for a MarkerSubscription.
type MarkerSubscriptionCallback func(msg *Marker, info *humble.MessageInfo, err error)

// NewMarkerSubscription creates and returns a new subscription for the
// Marker
func NewMarkerSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MarkerSubscriptionCallback) (*MarkerSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Marker
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MarkerTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MarkerSubscription{sub}, nil
}

func (s *MarkerSubscription) TakeMessage(out *Marker) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMarkerSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMarkerSlice(dst, src []Marker) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MarkerTypeSupport humble.MessageTypeSupport = _MarkerTypeSupport{}

type _MarkerTypeSupport struct{}

func (t _MarkerTypeSupport) New() humble.Message {
	return NewMarker()
}

func (t _MarkerTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__Marker
	return (unsafe.Pointer)(C.visualization_msgs__msg__Marker__create())
}

func (t _MarkerTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__Marker__destroy((*C.visualization_msgs__msg__Marker)(pointer_to_free))
}

func (t _MarkerTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Marker)
	mem := (*C.visualization_msgs__msg__Marker)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	humble.StringAsCStruct(unsafe.Pointer(&mem.ns), m.Ns)
	mem.id = C.int32_t(m.Id)
	mem._type = C.int32_t(m.Type)
	mem.action = C.int32_t(m.Action)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.scale), &m.Scale)
	std_msgs_msg.ColorRGBATypeSupport.AsCStruct(unsafe.Pointer(&mem.color), &m.Color)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.lifetime), &m.Lifetime)
	mem.frame_locked = C.bool(m.FrameLocked)
	geometry_msgs_msg.PointSequenceToC((*geometry_msgs_msg.CPointSequence)(unsafe.Pointer(&mem.points)), m.Points)
	std_msgs_msg.ColorRGBASequenceToC((*std_msgs_msg.CColorRGBASequence)(unsafe.Pointer(&mem.colors)), m.Colors)
	humble.StringAsCStruct(unsafe.Pointer(&mem.texture_resource), m.TextureResource)
	sensor_msgs_msg.CompressedImageTypeSupport.AsCStruct(unsafe.Pointer(&mem.texture), &m.Texture)
	UVCoordinateSequenceToC(&mem.uv_coordinates, m.UvCoordinates)
	humble.StringAsCStruct(unsafe.Pointer(&mem.text), m.Text)
	humble.StringAsCStruct(unsafe.Pointer(&mem.mesh_resource), m.MeshResource)
	MeshFileTypeSupport.AsCStruct(unsafe.Pointer(&mem.mesh_file), &m.MeshFile)
	mem.mesh_use_embedded_materials = C.bool(m.MeshUseEmbeddedMaterials)
}

func (t _MarkerTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Marker)
	mem := (*C.visualization_msgs__msg__Marker)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	humble.StringAsGoStruct(&m.Ns, unsafe.Pointer(&mem.ns))
	m.Id = int32(mem.id)
	m.Type = int32(mem._type)
	m.Action = int32(mem.action)
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Scale, unsafe.Pointer(&mem.scale))
	std_msgs_msg.ColorRGBATypeSupport.AsGoStruct(&m.Color, unsafe.Pointer(&mem.color))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.Lifetime, unsafe.Pointer(&mem.lifetime))
	m.FrameLocked = bool(mem.frame_locked)
	geometry_msgs_msg.PointSequenceToGo(&m.Points, *(*geometry_msgs_msg.CPointSequence)(unsafe.Pointer(&mem.points)))
	std_msgs_msg.ColorRGBASequenceToGo(&m.Colors, *(*std_msgs_msg.CColorRGBASequence)(unsafe.Pointer(&mem.colors)))
	humble.StringAsGoStruct(&m.TextureResource, unsafe.Pointer(&mem.texture_resource))
	sensor_msgs_msg.CompressedImageTypeSupport.AsGoStruct(&m.Texture, unsafe.Pointer(&mem.texture))
	UVCoordinateSequenceToGo(&m.UvCoordinates, mem.uv_coordinates)
	humble.StringAsGoStruct(&m.Text, unsafe.Pointer(&mem.text))
	humble.StringAsGoStruct(&m.MeshResource, unsafe.Pointer(&mem.mesh_resource))
	MeshFileTypeSupport.AsGoStruct(&m.MeshFile, unsafe.Pointer(&mem.mesh_file))
	m.MeshUseEmbeddedMaterials = bool(mem.mesh_use_embedded_materials)
}

func (t _MarkerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__Marker())
}

type CMarker = C.visualization_msgs__msg__Marker
type CMarkerSequence = C.visualization_msgs__msg__Marker__Sequence

func MarkerSequenceToGo(goSlice *[]Marker, cSlice CMarkerSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Marker, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MarkerTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MarkerSequenceToC(cSlice *CMarkerSequence, goSlice []Marker) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__Marker)(C.malloc(C.sizeof_struct_visualization_msgs__msg__Marker * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MarkerTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MarkerArrayToGo(goSlice []Marker, cSlice []CMarker) {
	for i := 0; i < len(cSlice); i++ {
		MarkerTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MarkerArrayToC(cSlice []CMarker, goSlice []Marker) {
	for i := 0; i < len(goSlice); i++ {
		MarkerTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

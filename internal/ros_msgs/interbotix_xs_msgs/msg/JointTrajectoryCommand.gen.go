// Code generated by ros2gen. DO NOT EDIT.

package interbotix_xs_msgs_msg

import (
	"unsafe"

	trajectory_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/trajectory_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <interbotix_xs_msgs/msg/joint_trajectory_command.h>

*/
import "C"

func init() {
	humble.RegisterMessage("interbotix_xs_msgs/JointTrajectoryCommand", JointTrajectoryCommandTypeSupport)
	humble.RegisterMessage("interbotix_xs_msgs/msg/JointTrajectoryCommand", JointTrajectoryCommandTypeSupport)
}

type JointTrajectoryCommand struct {
	CmdType string                              `yaml:"cmd_type"` // set to 'single' for a single joint or 'group' for a group of joints
	Name    string                              `yaml:"name"`     // joint group name if 'cmd_type' is set to 'group' or joint name if 'cmd_type' is set to 'single'
	Traj    trajectory_msgs_msg.JointTrajectory `yaml:"traj"`     // ROS trajectory message
}

// NewJointTrajectoryCommand creates a new JointTrajectoryCommand with default values.
func NewJointTrajectoryCommand() *JointTrajectoryCommand {
	self := JointTrajectoryCommand{}
	self.SetDefaults()
	return &self
}

func (t *JointTrajectoryCommand) Clone() *JointTrajectoryCommand {
	c := &JointTrajectoryCommand{}
	c.CmdType = t.CmdType
	c.Name = t.Name
	c.Traj = *t.Traj.Clone()
	return c
}

func (t *JointTrajectoryCommand) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *JointTrajectoryCommand) SetDefaults() {
	t.CmdType = ""
	t.Name = ""
	t.Traj.SetDefaults()
}

func (t *JointTrajectoryCommand) GetTypeSupport() humble.MessageTypeSupport {
	return JointTrajectoryCommandTypeSupport
}

// JointTrajectoryCommandPublisher wraps humble.Publisher to provide type safe helper
// functions
type JointTrajectoryCommandPublisher struct {
	*humble.Publisher
}

// NewJointTrajectoryCommandPublisher creates and returns a new publisher for the
// JointTrajectoryCommand
func NewJointTrajectoryCommandPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*JointTrajectoryCommandPublisher, error) {
	pub, err := node.NewPublisher(topicName, JointTrajectoryCommandTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointTrajectoryCommandPublisher{pub}, nil
}

func (p *JointTrajectoryCommandPublisher) Publish(msg *JointTrajectoryCommand) error {
	return p.Publisher.Publish(msg)
}

// JointTrajectoryCommandSubscription wraps humble.Subscription to provide type safe helper
// functions
type JointTrajectoryCommandSubscription struct {
	*humble.Subscription
}

// JointTrajectoryCommandSubscriptionCallback type is used to provide a subscription
// handler function for a JointTrajectoryCommandSubscription.
type JointTrajectoryCommandSubscriptionCallback func(msg *JointTrajectoryCommand, info *humble.MessageInfo, err error)

// NewJointTrajectoryCommandSubscription creates and returns a new subscription for the
// JointTrajectoryCommand
func NewJointTrajectoryCommandSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback JointTrajectoryCommandSubscriptionCallback) (*JointTrajectoryCommandSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg JointTrajectoryCommand
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, JointTrajectoryCommandTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointTrajectoryCommandSubscription{sub}, nil
}

func (s *JointTrajectoryCommandSubscription) TakeMessage(out *JointTrajectoryCommand) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointTrajectoryCommandSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointTrajectoryCommandSlice(dst, src []JointTrajectoryCommand) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointTrajectoryCommandTypeSupport humble.MessageTypeSupport = _JointTrajectoryCommandTypeSupport{}

type _JointTrajectoryCommandTypeSupport struct{}

func (t _JointTrajectoryCommandTypeSupport) New() humble.Message {
	return NewJointTrajectoryCommand()
}

func (t _JointTrajectoryCommandTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.interbotix_xs_msgs__msg__JointTrajectoryCommand
	return (unsafe.Pointer)(C.interbotix_xs_msgs__msg__JointTrajectoryCommand__create())
}

func (t _JointTrajectoryCommandTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.interbotix_xs_msgs__msg__JointTrajectoryCommand__destroy((*C.interbotix_xs_msgs__msg__JointTrajectoryCommand)(pointer_to_free))
}

func (t _JointTrajectoryCommandTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*JointTrajectoryCommand)
	mem := (*C.interbotix_xs_msgs__msg__JointTrajectoryCommand)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.cmd_type), m.CmdType)
	humble.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	trajectory_msgs_msg.JointTrajectoryTypeSupport.AsCStruct(unsafe.Pointer(&mem.traj), &m.Traj)
}

func (t _JointTrajectoryCommandTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointTrajectoryCommand)
	mem := (*C.interbotix_xs_msgs__msg__JointTrajectoryCommand)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.CmdType, unsafe.Pointer(&mem.cmd_type))
	humble.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	trajectory_msgs_msg.JointTrajectoryTypeSupport.AsGoStruct(&m.Traj, unsafe.Pointer(&mem.traj))
}

func (t _JointTrajectoryCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__interbotix_xs_msgs__msg__JointTrajectoryCommand())
}

type CJointTrajectoryCommand = C.interbotix_xs_msgs__msg__JointTrajectoryCommand
type CJointTrajectoryCommandSequence = C.interbotix_xs_msgs__msg__JointTrajectoryCommand__Sequence

func JointTrajectoryCommandSequenceToGo(goSlice *[]JointTrajectoryCommand, cSlice CJointTrajectoryCommandSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointTrajectoryCommand, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointTrajectoryCommandTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func JointTrajectoryCommandSequenceToC(cSlice *CJointTrajectoryCommandSequence, goSlice []JointTrajectoryCommand) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.interbotix_xs_msgs__msg__JointTrajectoryCommand)(C.malloc(C.sizeof_struct_interbotix_xs_msgs__msg__JointTrajectoryCommand * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointTrajectoryCommandTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func JointTrajectoryCommandArrayToGo(goSlice []JointTrajectoryCommand, cSlice []CJointTrajectoryCommand) {
	for i := 0; i < len(cSlice); i++ {
		JointTrajectoryCommandTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func JointTrajectoryCommandArrayToC(cSlice []CJointTrajectoryCommand, goSlice []JointTrajectoryCommand) {
	for i := 0; i < len(goSlice); i++ {
		JointTrajectoryCommandTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

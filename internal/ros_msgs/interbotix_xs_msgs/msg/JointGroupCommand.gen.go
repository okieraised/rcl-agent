// Code generated by ros2gen. DO NOT EDIT.

package interbotix_xs_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <interbotix_xs_msgs/msg/joint_group_command.h>

*/
import "C"

func init() {
	humble.RegisterMessage("interbotix_xs_msgs/JointGroupCommand", JointGroupCommandTypeSupport)
	humble.RegisterMessage("interbotix_xs_msgs/msg/JointGroupCommand", JointGroupCommandTypeSupport)
}

type JointGroupCommand struct {
	Name string    `yaml:"name"` // Name of joint group
	Cmd  []float32 `yaml:"cmd"`  // List of joint commands; order is dictated by the index of each joint name for the given group in the 'groups' section of a 'motor_config' yaml file
}

// NewJointGroupCommand creates a new JointGroupCommand with default values.
func NewJointGroupCommand() *JointGroupCommand {
	self := JointGroupCommand{}
	self.SetDefaults()
	return &self
}

func (t *JointGroupCommand) Clone() *JointGroupCommand {
	c := &JointGroupCommand{}
	c.Name = t.Name
	if t.Cmd != nil {
		c.Cmd = make([]float32, len(t.Cmd))
		copy(c.Cmd, t.Cmd)
	}
	return c
}

func (t *JointGroupCommand) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *JointGroupCommand) SetDefaults() {
	t.Name = ""
	t.Cmd = nil
}

func (t *JointGroupCommand) GetTypeSupport() humble.MessageTypeSupport {
	return JointGroupCommandTypeSupport
}

// JointGroupCommandPublisher wraps humble.Publisher to provide type safe helper
// functions
type JointGroupCommandPublisher struct {
	*humble.Publisher
}

// NewJointGroupCommandPublisher creates and returns a new publisher for the
// JointGroupCommand
func NewJointGroupCommandPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*JointGroupCommandPublisher, error) {
	pub, err := node.NewPublisher(topicName, JointGroupCommandTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointGroupCommandPublisher{pub}, nil
}

func (p *JointGroupCommandPublisher) Publish(msg *JointGroupCommand) error {
	return p.Publisher.Publish(msg)
}

// JointGroupCommandSubscription wraps humble.Subscription to provide type safe helper
// functions
type JointGroupCommandSubscription struct {
	*humble.Subscription
}

// JointGroupCommandSubscriptionCallback type is used to provide a subscription
// handler function for a JointGroupCommandSubscription.
type JointGroupCommandSubscriptionCallback func(msg *JointGroupCommand, info *humble.MessageInfo, err error)

// NewJointGroupCommandSubscription creates and returns a new subscription for the
// JointGroupCommand
func NewJointGroupCommandSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback JointGroupCommandSubscriptionCallback) (*JointGroupCommandSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg JointGroupCommand
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, JointGroupCommandTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointGroupCommandSubscription{sub}, nil
}

func (s *JointGroupCommandSubscription) TakeMessage(out *JointGroupCommand) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointGroupCommandSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointGroupCommandSlice(dst, src []JointGroupCommand) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointGroupCommandTypeSupport humble.MessageTypeSupport = _JointGroupCommandTypeSupport{}

type _JointGroupCommandTypeSupport struct{}

func (t _JointGroupCommandTypeSupport) New() humble.Message {
	return NewJointGroupCommand()
}

func (t _JointGroupCommandTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.interbotix_xs_msgs__msg__JointGroupCommand
	return (unsafe.Pointer)(C.interbotix_xs_msgs__msg__JointGroupCommand__create())
}

func (t _JointGroupCommandTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.interbotix_xs_msgs__msg__JointGroupCommand__destroy((*C.interbotix_xs_msgs__msg__JointGroupCommand)(pointer_to_free))
}

func (t _JointGroupCommandTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*JointGroupCommand)
	mem := (*C.interbotix_xs_msgs__msg__JointGroupCommand)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	humble.Float32SequenceToC((*humble.CFloat32Sequence)(unsafe.Pointer(&mem.cmd)), m.Cmd)
}

func (t _JointGroupCommandTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointGroupCommand)
	mem := (*C.interbotix_xs_msgs__msg__JointGroupCommand)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	humble.Float32SequenceToGo(&m.Cmd, *(*humble.CFloat32Sequence)(unsafe.Pointer(&mem.cmd)))
}

func (t _JointGroupCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__interbotix_xs_msgs__msg__JointGroupCommand())
}

type CJointGroupCommand = C.interbotix_xs_msgs__msg__JointGroupCommand
type CJointGroupCommandSequence = C.interbotix_xs_msgs__msg__JointGroupCommand__Sequence

func JointGroupCommandSequenceToGo(goSlice *[]JointGroupCommand, cSlice CJointGroupCommandSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointGroupCommand, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointGroupCommandTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func JointGroupCommandSequenceToC(cSlice *CJointGroupCommandSequence, goSlice []JointGroupCommand) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.interbotix_xs_msgs__msg__JointGroupCommand)(C.malloc(C.sizeof_struct_interbotix_xs_msgs__msg__JointGroupCommand * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointGroupCommandTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func JointGroupCommandArrayToGo(goSlice []JointGroupCommand, cSlice []CJointGroupCommand) {
	for i := 0; i < len(cSlice); i++ {
		JointGroupCommandTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func JointGroupCommandArrayToC(cSlice []CJointGroupCommand, goSlice []JointGroupCommand) {
	for i := 0; i < len(goSlice); i++ {
		JointGroupCommandTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

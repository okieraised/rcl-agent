// Code generated by ros2gen. DO NOT EDIT.

package interbotix_xs_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <interbotix_xs_msgs/msg/joint_single_command.h>

*/
import "C"

func init() {
	humble.RegisterMessage("interbotix_xs_msgs/JointSingleCommand", JointSingleCommandTypeSupport)
	humble.RegisterMessage("interbotix_xs_msgs/msg/JointSingleCommand", JointSingleCommandTypeSupport)
}

type JointSingleCommand struct {
	Name string  `yaml:"name"` // Name of joint
	Cmd  float32 `yaml:"cmd"`  // Joint command
}

// NewJointSingleCommand creates a new JointSingleCommand with default values.
func NewJointSingleCommand() *JointSingleCommand {
	self := JointSingleCommand{}
	self.SetDefaults()
	return &self
}

func (t *JointSingleCommand) Clone() *JointSingleCommand {
	c := &JointSingleCommand{}
	c.Name = t.Name
	c.Cmd = t.Cmd
	return c
}

func (t *JointSingleCommand) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *JointSingleCommand) SetDefaults() {
	t.Name = ""
	t.Cmd = 0
}

func (t *JointSingleCommand) GetTypeSupport() humble.MessageTypeSupport {
	return JointSingleCommandTypeSupport
}

// JointSingleCommandPublisher wraps humble.Publisher to provide type safe helper
// functions
type JointSingleCommandPublisher struct {
	*humble.Publisher
}

// NewJointSingleCommandPublisher creates and returns a new publisher for the
// JointSingleCommand
func NewJointSingleCommandPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*JointSingleCommandPublisher, error) {
	pub, err := node.NewPublisher(topicName, JointSingleCommandTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointSingleCommandPublisher{pub}, nil
}

func (p *JointSingleCommandPublisher) Publish(msg *JointSingleCommand) error {
	return p.Publisher.Publish(msg)
}

// JointSingleCommandSubscription wraps humble.Subscription to provide type safe helper
// functions
type JointSingleCommandSubscription struct {
	*humble.Subscription
}

// JointSingleCommandSubscriptionCallback type is used to provide a subscription
// handler function for a JointSingleCommandSubscription.
type JointSingleCommandSubscriptionCallback func(msg *JointSingleCommand, info *humble.MessageInfo, err error)

// NewJointSingleCommandSubscription creates and returns a new subscription for the
// JointSingleCommand
func NewJointSingleCommandSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback JointSingleCommandSubscriptionCallback) (*JointSingleCommandSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg JointSingleCommand
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, JointSingleCommandTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointSingleCommandSubscription{sub}, nil
}

func (s *JointSingleCommandSubscription) TakeMessage(out *JointSingleCommand) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointSingleCommandSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointSingleCommandSlice(dst, src []JointSingleCommand) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointSingleCommandTypeSupport humble.MessageTypeSupport = _JointSingleCommandTypeSupport{}

type _JointSingleCommandTypeSupport struct{}

func (t _JointSingleCommandTypeSupport) New() humble.Message {
	return NewJointSingleCommand()
}

func (t _JointSingleCommandTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.interbotix_xs_msgs__msg__JointSingleCommand
	return (unsafe.Pointer)(C.interbotix_xs_msgs__msg__JointSingleCommand__create())
}

func (t _JointSingleCommandTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.interbotix_xs_msgs__msg__JointSingleCommand__destroy((*C.interbotix_xs_msgs__msg__JointSingleCommand)(pointer_to_free))
}

func (t _JointSingleCommandTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*JointSingleCommand)
	mem := (*C.interbotix_xs_msgs__msg__JointSingleCommand)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem.cmd = C.float(m.Cmd)
}

func (t _JointSingleCommandTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointSingleCommand)
	mem := (*C.interbotix_xs_msgs__msg__JointSingleCommand)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.Cmd = float32(mem.cmd)
}

func (t _JointSingleCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__interbotix_xs_msgs__msg__JointSingleCommand())
}

type CJointSingleCommand = C.interbotix_xs_msgs__msg__JointSingleCommand
type CJointSingleCommandSequence = C.interbotix_xs_msgs__msg__JointSingleCommand__Sequence

func JointSingleCommandSequenceToGo(goSlice *[]JointSingleCommand, cSlice CJointSingleCommandSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointSingleCommand, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointSingleCommandTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func JointSingleCommandSequenceToC(cSlice *CJointSingleCommandSequence, goSlice []JointSingleCommand) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.interbotix_xs_msgs__msg__JointSingleCommand)(C.malloc(C.sizeof_struct_interbotix_xs_msgs__msg__JointSingleCommand * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointSingleCommandTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func JointSingleCommandArrayToGo(goSlice []JointSingleCommand, cSlice []CJointSingleCommand) {
	for i := 0; i < len(cSlice); i++ {
		JointSingleCommandTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func JointSingleCommandArrayToC(cSlice []CJointSingleCommand, goSlice []JointSingleCommand) {
	for i := 0; i < len(goSlice); i++ {
		JointSingleCommandTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

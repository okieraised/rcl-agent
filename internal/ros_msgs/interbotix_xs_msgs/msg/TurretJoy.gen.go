// Code generated by ros2gen. DO NOT EDIT.

package interbotix_xs_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <interbotix_xs_msgs/msg/turret_joy.h>

*/
import "C"

func init() {
	humble.RegisterMessage("interbotix_xs_msgs/TurretJoy", TurretJoyTypeSupport)
	humble.RegisterMessage("interbotix_xs_msgs/msg/TurretJoy", TurretJoyTypeSupport)
}

const (
	TurretJoy_PAN_CCW       int8 = 1 // Control the pan-and-tilt mechanism
	TurretJoy_PAN_CW        int8 = 2
	TurretJoy_TILT_UP       int8 = 3
	TurretJoy_TILT_DOWN     int8 = 4
	TurretJoy_PAN_TILT_HOME int8 = 5
	TurretJoy_SPEED_INC     int8 = 6 // Customize configurations for the Interbotix TurretInc/Dec Joint speed
	TurretJoy_SPEED_DEC     int8 = 7
	TurretJoy_SPEED_COARSE  int8 = 8 // Quickly toggle between a fast and slow speed setting
	TurretJoy_SPEED_FINE    int8 = 9
)

type TurretJoy struct {
	PanCmd         int8 `yaml:"pan_cmd"` // Control the motion of the pan-and-tilt mechanism
	TiltCmd        int8 `yaml:"tilt_cmd"`
	SpeedCmd       int8 `yaml:"speed_cmd"` // Speed Configs
	SpeedToggleCmd int8 `yaml:"speed_toggle_cmd"`
}

// NewTurretJoy creates a new TurretJoy with default values.
func NewTurretJoy() *TurretJoy {
	self := TurretJoy{}
	self.SetDefaults()
	return &self
}

func (t *TurretJoy) Clone() *TurretJoy {
	c := &TurretJoy{}
	c.PanCmd = t.PanCmd
	c.TiltCmd = t.TiltCmd
	c.SpeedCmd = t.SpeedCmd
	c.SpeedToggleCmd = t.SpeedToggleCmd
	return c
}

func (t *TurretJoy) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TurretJoy) SetDefaults() {
	t.PanCmd = 0
	t.TiltCmd = 0
	t.SpeedCmd = 0
	t.SpeedToggleCmd = 0
}

func (t *TurretJoy) GetTypeSupport() humble.MessageTypeSupport {
	return TurretJoyTypeSupport
}

// TurretJoyPublisher wraps humble.Publisher to provide type safe helper
// functions
type TurretJoyPublisher struct {
	*humble.Publisher
}

// NewTurretJoyPublisher creates and returns a new publisher for the
// TurretJoy
func NewTurretJoyPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TurretJoyPublisher, error) {
	pub, err := node.NewPublisher(topicName, TurretJoyTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TurretJoyPublisher{pub}, nil
}

func (p *TurretJoyPublisher) Publish(msg *TurretJoy) error {
	return p.Publisher.Publish(msg)
}

// TurretJoySubscription wraps humble.Subscription to provide type safe helper
// functions
type TurretJoySubscription struct {
	*humble.Subscription
}

// TurretJoySubscriptionCallback type is used to provide a subscription
// handler function for a TurretJoySubscription.
type TurretJoySubscriptionCallback func(msg *TurretJoy, info *humble.MessageInfo, err error)

// NewTurretJoySubscription creates and returns a new subscription for the
// TurretJoy
func NewTurretJoySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TurretJoySubscriptionCallback) (*TurretJoySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TurretJoy
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TurretJoyTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TurretJoySubscription{sub}, nil
}

func (s *TurretJoySubscription) TakeMessage(out *TurretJoy) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTurretJoySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTurretJoySlice(dst, src []TurretJoy) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TurretJoyTypeSupport humble.MessageTypeSupport = _TurretJoyTypeSupport{}

type _TurretJoyTypeSupport struct{}

func (t _TurretJoyTypeSupport) New() humble.Message {
	return NewTurretJoy()
}

func (t _TurretJoyTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.interbotix_xs_msgs__msg__TurretJoy
	return (unsafe.Pointer)(C.interbotix_xs_msgs__msg__TurretJoy__create())
}

func (t _TurretJoyTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.interbotix_xs_msgs__msg__TurretJoy__destroy((*C.interbotix_xs_msgs__msg__TurretJoy)(pointer_to_free))
}

func (t _TurretJoyTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TurretJoy)
	mem := (*C.interbotix_xs_msgs__msg__TurretJoy)(dst)
	mem.pan_cmd = C.int8_t(m.PanCmd)
	mem.tilt_cmd = C.int8_t(m.TiltCmd)
	mem.speed_cmd = C.int8_t(m.SpeedCmd)
	mem.speed_toggle_cmd = C.int8_t(m.SpeedToggleCmd)
}

func (t _TurretJoyTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TurretJoy)
	mem := (*C.interbotix_xs_msgs__msg__TurretJoy)(ros2_message_buffer)
	m.PanCmd = int8(mem.pan_cmd)
	m.TiltCmd = int8(mem.tilt_cmd)
	m.SpeedCmd = int8(mem.speed_cmd)
	m.SpeedToggleCmd = int8(mem.speed_toggle_cmd)
}

func (t _TurretJoyTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__interbotix_xs_msgs__msg__TurretJoy())
}

type CTurretJoy = C.interbotix_xs_msgs__msg__TurretJoy
type CTurretJoySequence = C.interbotix_xs_msgs__msg__TurretJoy__Sequence

func TurretJoySequenceToGo(goSlice *[]TurretJoy, cSlice CTurretJoySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TurretJoy, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TurretJoyTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TurretJoySequenceToC(cSlice *CTurretJoySequence, goSlice []TurretJoy) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.interbotix_xs_msgs__msg__TurretJoy)(C.malloc(C.sizeof_struct_interbotix_xs_msgs__msg__TurretJoy * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TurretJoyTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TurretJoyArrayToGo(goSlice []TurretJoy, cSlice []CTurretJoy) {
	for i := 0; i < len(cSlice); i++ {
		TurretJoyTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TurretJoyArrayToC(cSlice []CTurretJoy, goSlice []TurretJoy) {
	for i := 0; i < len(goSlice); i++ {
		TurretJoyTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

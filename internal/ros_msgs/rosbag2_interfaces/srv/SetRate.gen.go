// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rosbag2_interfaces/srv/set_rate.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("rosbag2_interfaces/SetRate", SetRateTypeSupport)
	humble.RegisterService("rosbag2_interfaces/srv/SetRate", SetRateTypeSupport)
}

type _SetRateTypeSupport struct {}

func (s _SetRateTypeSupport) Request() humble.MessageTypeSupport {
	return SetRate_RequestTypeSupport
}

func (s _SetRateTypeSupport) Response() humble.MessageTypeSupport {
	return SetRate_ResponseTypeSupport
}

func (s _SetRateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rosbag2_interfaces__srv__SetRate())
}

// Modifying this variable is undefined behavior.
var SetRateTypeSupport humble.ServiceTypeSupport = _SetRateTypeSupport{}

// SetRateClient wraps humble.Client to provide type safe helper
// functions
type SetRateClient struct {
	*humble.Client
}

// NewSetRateClient creates and returns a new client for the
// SetRate
func NewSetRateClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*SetRateClient, error) {
	client, err := node.NewClient(serviceName, SetRateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetRateClient{client}, nil
}

func (s *SetRateClient) Send(ctx context.Context, req *SetRate_Request) (*SetRate_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetRate_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetRateServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s SetRateServiceResponseSender) SendResponse(resp *SetRate_Response) error {
	return s.sender.SendResponse(resp)
}

type SetRateServiceRequestHandler func(*humble.ServiceInfo, *SetRate_Request, SetRateServiceResponseSender)

// SetRateService wraps humble.Service to provide type safe helper
// functions
type SetRateService struct {
	*humble.Service
}

// NewSetRateService creates and returns a new service for the
// SetRate
func NewSetRateService(node *humble.Node, name string, options *humble.ServiceOptions, handler SetRateServiceRequestHandler) (*SetRateService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*SetRate_Request)
		responseSender := SetRateServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetRateTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetRateService{service}, nil
}
// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/is_paused.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rosbag2_interfaces/IsPaused_Request", IsPaused_RequestTypeSupport)
	humble.RegisterMessage("rosbag2_interfaces/srv/IsPaused_Request", IsPaused_RequestTypeSupport)
}

type IsPaused_Request struct {
}

// NewIsPaused_Request creates a new IsPaused_Request with default values.
func NewIsPaused_Request() *IsPaused_Request {
	self := IsPaused_Request{}
	self.SetDefaults()
	return &self
}

func (t *IsPaused_Request) Clone() *IsPaused_Request {
	c := &IsPaused_Request{}
	return c
}

func (t *IsPaused_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *IsPaused_Request) SetDefaults() {
}

func (t *IsPaused_Request) GetTypeSupport() humble.MessageTypeSupport {
	return IsPaused_RequestTypeSupport
}

// IsPaused_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type IsPaused_RequestPublisher struct {
	*humble.Publisher
}

// NewIsPaused_RequestPublisher creates and returns a new publisher for the
// IsPaused_Request
func NewIsPaused_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*IsPaused_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, IsPaused_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &IsPaused_RequestPublisher{pub}, nil
}

func (p *IsPaused_RequestPublisher) Publish(msg *IsPaused_Request) error {
	return p.Publisher.Publish(msg)
}

// IsPaused_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type IsPaused_RequestSubscription struct {
	*humble.Subscription
}

// IsPaused_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a IsPaused_RequestSubscription.
type IsPaused_RequestSubscriptionCallback func(msg *IsPaused_Request, info *humble.MessageInfo, err error)

// NewIsPaused_RequestSubscription creates and returns a new subscription for the
// IsPaused_Request
func NewIsPaused_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback IsPaused_RequestSubscriptionCallback) (*IsPaused_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg IsPaused_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, IsPaused_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &IsPaused_RequestSubscription{sub}, nil
}

func (s *IsPaused_RequestSubscription) TakeMessage(out *IsPaused_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneIsPaused_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneIsPaused_RequestSlice(dst, src []IsPaused_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var IsPaused_RequestTypeSupport humble.MessageTypeSupport = _IsPaused_RequestTypeSupport{}

type _IsPaused_RequestTypeSupport struct{}

func (t _IsPaused_RequestTypeSupport) New() humble.Message {
	return NewIsPaused_Request()
}

func (t _IsPaused_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__IsPaused_Request
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__IsPaused_Request__create())
}

func (t _IsPaused_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__IsPaused_Request__destroy((*C.rosbag2_interfaces__srv__IsPaused_Request)(pointer_to_free))
}

func (t _IsPaused_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {

}

func (t _IsPaused_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _IsPaused_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__IsPaused_Request())
}

type CIsPaused_Request = C.rosbag2_interfaces__srv__IsPaused_Request
type CIsPaused_RequestSequence = C.rosbag2_interfaces__srv__IsPaused_Request__Sequence

func IsPaused_RequestSequenceToGo(goSlice *[]IsPaused_Request, cSlice CIsPaused_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]IsPaused_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		IsPaused_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func IsPaused_RequestSequenceToC(cSlice *CIsPaused_RequestSequence, goSlice []IsPaused_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__IsPaused_Request)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__IsPaused_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		IsPaused_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func IsPaused_RequestArrayToGo(goSlice []IsPaused_Request, cSlice []CIsPaused_Request) {
	for i := 0; i < len(cSlice); i++ {
		IsPaused_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func IsPaused_RequestArrayToC(cSlice []CIsPaused_Request, goSlice []IsPaused_Request) {
	for i := 0; i < len(goSlice); i++ {
		IsPaused_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

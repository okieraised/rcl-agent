// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rosbag2_interfaces/srv/is_paused.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("rosbag2_interfaces/IsPaused", IsPausedTypeSupport)
	humble.RegisterService("rosbag2_interfaces/srv/IsPaused", IsPausedTypeSupport)
}

type _IsPausedTypeSupport struct{}

func (s _IsPausedTypeSupport) Request() humble.MessageTypeSupport {
	return IsPaused_RequestTypeSupport
}

func (s _IsPausedTypeSupport) Response() humble.MessageTypeSupport {
	return IsPaused_ResponseTypeSupport
}

func (s _IsPausedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rosbag2_interfaces__srv__IsPaused())
}

// Modifying this variable is undefined behavior.
var IsPausedTypeSupport humble.ServiceTypeSupport = _IsPausedTypeSupport{}

// IsPausedClient wraps humble.Client to provide type safe helper
// functions
type IsPausedClient struct {
	*humble.Client
}

// NewIsPausedClient creates and returns a new client for the
// IsPaused
func NewIsPausedClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*IsPausedClient, error) {
	client, err := node.NewClient(serviceName, IsPausedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &IsPausedClient{client}, nil
}

func (s *IsPausedClient) Send(ctx context.Context, req *IsPaused_Request) (*IsPaused_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*IsPaused_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type IsPausedServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s IsPausedServiceResponseSender) SendResponse(resp *IsPaused_Response) error {
	return s.sender.SendResponse(resp)
}

type IsPausedServiceRequestHandler func(*humble.ServiceInfo, *IsPaused_Request, IsPausedServiceResponseSender)

// IsPausedService wraps humble.Service to provide type safe helper
// functions
type IsPausedService struct {
	*humble.Service
}

// NewIsPausedService creates and returns a new service for the
// IsPaused
func NewIsPausedService(node *humble.Node, name string, options *humble.ServiceOptions, handler IsPausedServiceRequestHandler) (*IsPausedService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*IsPaused_Request)
		responseSender := IsPausedServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, IsPausedTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &IsPausedService{service}, nil
}

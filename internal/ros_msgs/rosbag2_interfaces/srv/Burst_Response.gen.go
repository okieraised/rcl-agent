// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/burst.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rosbag2_interfaces/Burst_Response", Burst_ResponseTypeSupport)
	humble.RegisterMessage("rosbag2_interfaces/srv/Burst_Response", Burst_ResponseTypeSupport)
}

type Burst_Response struct {
	ActuallyBurst uint64 `yaml:"actually_burst"` // Number of messages actually burst
}

// NewBurst_Response creates a new Burst_Response with default values.
func NewBurst_Response() *Burst_Response {
	self := Burst_Response{}
	self.SetDefaults()
	return &self
}

func (t *Burst_Response) Clone() *Burst_Response {
	c := &Burst_Response{}
	c.ActuallyBurst = t.ActuallyBurst
	return c
}

func (t *Burst_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Burst_Response) SetDefaults() {
	t.ActuallyBurst = 0
}

func (t *Burst_Response) GetTypeSupport() humble.MessageTypeSupport {
	return Burst_ResponseTypeSupport
}

// Burst_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type Burst_ResponsePublisher struct {
	*humble.Publisher
}

// NewBurst_ResponsePublisher creates and returns a new publisher for the
// Burst_Response
func NewBurst_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Burst_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, Burst_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Burst_ResponsePublisher{pub}, nil
}

func (p *Burst_ResponsePublisher) Publish(msg *Burst_Response) error {
	return p.Publisher.Publish(msg)
}

// Burst_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type Burst_ResponseSubscription struct {
	*humble.Subscription
}

// Burst_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a Burst_ResponseSubscription.
type Burst_ResponseSubscriptionCallback func(msg *Burst_Response, info *humble.MessageInfo, err error)

// NewBurst_ResponseSubscription creates and returns a new subscription for the
// Burst_Response
func NewBurst_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Burst_ResponseSubscriptionCallback) (*Burst_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Burst_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Burst_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Burst_ResponseSubscription{sub}, nil
}

func (s *Burst_ResponseSubscription) TakeMessage(out *Burst_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBurst_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBurst_ResponseSlice(dst, src []Burst_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Burst_ResponseTypeSupport humble.MessageTypeSupport = _Burst_ResponseTypeSupport{}

type _Burst_ResponseTypeSupport struct{}

func (t _Burst_ResponseTypeSupport) New() humble.Message {
	return NewBurst_Response()
}

func (t _Burst_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__Burst_Response
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__Burst_Response__create())
}

func (t _Burst_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__Burst_Response__destroy((*C.rosbag2_interfaces__srv__Burst_Response)(pointer_to_free))
}

func (t _Burst_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Burst_Response)
	mem := (*C.rosbag2_interfaces__srv__Burst_Response)(dst)
	mem.actually_burst = C.uint64_t(m.ActuallyBurst)
}

func (t _Burst_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Burst_Response)
	mem := (*C.rosbag2_interfaces__srv__Burst_Response)(ros2_message_buffer)
	m.ActuallyBurst = uint64(mem.actually_burst)
}

func (t _Burst_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__Burst_Response())
}

type CBurst_Response = C.rosbag2_interfaces__srv__Burst_Response
type CBurst_ResponseSequence = C.rosbag2_interfaces__srv__Burst_Response__Sequence

func Burst_ResponseSequenceToGo(goSlice *[]Burst_Response, cSlice CBurst_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Burst_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Burst_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Burst_ResponseSequenceToC(cSlice *CBurst_ResponseSequence, goSlice []Burst_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__Burst_Response)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__Burst_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Burst_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Burst_ResponseArrayToGo(goSlice []Burst_Response, cSlice []CBurst_Response) {
	for i := 0; i < len(cSlice); i++ {
		Burst_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Burst_ResponseArrayToC(cSlice []CBurst_Response, goSlice []Burst_Response) {
	for i := 0; i < len(goSlice); i++ {
		Burst_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

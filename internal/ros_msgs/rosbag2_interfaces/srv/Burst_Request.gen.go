// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/burst.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rosbag2_interfaces/Burst_Request", Burst_RequestTypeSupport)
	humble.RegisterMessage("rosbag2_interfaces/srv/Burst_Request", Burst_RequestTypeSupport)
}

type Burst_Request struct {
	NumMessages uint64 `yaml:"num_messages"` // Number of messages to burst
}

// NewBurst_Request creates a new Burst_Request with default values.
func NewBurst_Request() *Burst_Request {
	self := Burst_Request{}
	self.SetDefaults()
	return &self
}

func (t *Burst_Request) Clone() *Burst_Request {
	c := &Burst_Request{}
	c.NumMessages = t.NumMessages
	return c
}

func (t *Burst_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Burst_Request) SetDefaults() {
	t.NumMessages = 0
}

func (t *Burst_Request) GetTypeSupport() humble.MessageTypeSupport {
	return Burst_RequestTypeSupport
}

// Burst_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type Burst_RequestPublisher struct {
	*humble.Publisher
}

// NewBurst_RequestPublisher creates and returns a new publisher for the
// Burst_Request
func NewBurst_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Burst_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, Burst_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Burst_RequestPublisher{pub}, nil
}

func (p *Burst_RequestPublisher) Publish(msg *Burst_Request) error {
	return p.Publisher.Publish(msg)
}

// Burst_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type Burst_RequestSubscription struct {
	*humble.Subscription
}

// Burst_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a Burst_RequestSubscription.
type Burst_RequestSubscriptionCallback func(msg *Burst_Request, info *humble.MessageInfo, err error)

// NewBurst_RequestSubscription creates and returns a new subscription for the
// Burst_Request
func NewBurst_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Burst_RequestSubscriptionCallback) (*Burst_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Burst_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Burst_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Burst_RequestSubscription{sub}, nil
}

func (s *Burst_RequestSubscription) TakeMessage(out *Burst_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBurst_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBurst_RequestSlice(dst, src []Burst_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Burst_RequestTypeSupport humble.MessageTypeSupport = _Burst_RequestTypeSupport{}

type _Burst_RequestTypeSupport struct{}

func (t _Burst_RequestTypeSupport) New() humble.Message {
	return NewBurst_Request()
}

func (t _Burst_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__Burst_Request
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__Burst_Request__create())
}

func (t _Burst_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__Burst_Request__destroy((*C.rosbag2_interfaces__srv__Burst_Request)(pointer_to_free))
}

func (t _Burst_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Burst_Request)
	mem := (*C.rosbag2_interfaces__srv__Burst_Request)(dst)
	mem.num_messages = C.uint64_t(m.NumMessages)
}

func (t _Burst_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Burst_Request)
	mem := (*C.rosbag2_interfaces__srv__Burst_Request)(ros2_message_buffer)
	m.NumMessages = uint64(mem.num_messages)
}

func (t _Burst_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__Burst_Request())
}

type CBurst_Request = C.rosbag2_interfaces__srv__Burst_Request
type CBurst_RequestSequence = C.rosbag2_interfaces__srv__Burst_Request__Sequence

func Burst_RequestSequenceToGo(goSlice *[]Burst_Request, cSlice CBurst_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Burst_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Burst_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Burst_RequestSequenceToC(cSlice *CBurst_RequestSequence, goSlice []Burst_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__Burst_Request)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__Burst_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Burst_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Burst_RequestArrayToGo(goSlice []Burst_Request, cSlice []CBurst_Request) {
	for i := 0; i < len(cSlice); i++ {
		Burst_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Burst_RequestArrayToC(cSlice []CBurst_Request, goSlice []Burst_Request) {
	for i := 0; i < len(goSlice); i++ {
		Burst_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

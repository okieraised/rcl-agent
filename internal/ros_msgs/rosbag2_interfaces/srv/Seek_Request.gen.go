// Code generated by ros2gen. DO NOT EDIT.

package rosbag2_interfaces_srv

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/seek.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rosbag2_interfaces/Seek_Request", Seek_RequestTypeSupport)
	humble.RegisterMessage("rosbag2_interfaces/srv/Seek_Request", Seek_RequestTypeSupport)
}

type Seek_Request struct {
	Time builtin_interfaces_msg.Time `yaml:"time"`
}

// NewSeek_Request creates a new Seek_Request with default values.
func NewSeek_Request() *Seek_Request {
	self := Seek_Request{}
	self.SetDefaults()
	return &self
}

func (t *Seek_Request) Clone() *Seek_Request {
	c := &Seek_Request{}
	c.Time = *t.Time.Clone()
	return c
}

func (t *Seek_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Seek_Request) SetDefaults() {
	t.Time.SetDefaults()
}

func (t *Seek_Request) GetTypeSupport() humble.MessageTypeSupport {
	return Seek_RequestTypeSupport
}

// Seek_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type Seek_RequestPublisher struct {
	*humble.Publisher
}

// NewSeek_RequestPublisher creates and returns a new publisher for the
// Seek_Request
func NewSeek_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Seek_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, Seek_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Seek_RequestPublisher{pub}, nil
}

func (p *Seek_RequestPublisher) Publish(msg *Seek_Request) error {
	return p.Publisher.Publish(msg)
}

// Seek_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type Seek_RequestSubscription struct {
	*humble.Subscription
}

// Seek_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a Seek_RequestSubscription.
type Seek_RequestSubscriptionCallback func(msg *Seek_Request, info *humble.MessageInfo, err error)

// NewSeek_RequestSubscription creates and returns a new subscription for the
// Seek_Request
func NewSeek_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Seek_RequestSubscriptionCallback) (*Seek_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Seek_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Seek_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Seek_RequestSubscription{sub}, nil
}

func (s *Seek_RequestSubscription) TakeMessage(out *Seek_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSeek_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSeek_RequestSlice(dst, src []Seek_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Seek_RequestTypeSupport humble.MessageTypeSupport = _Seek_RequestTypeSupport{}

type _Seek_RequestTypeSupport struct{}

func (t _Seek_RequestTypeSupport) New() humble.Message {
	return NewSeek_Request()
}

func (t _Seek_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__Seek_Request
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__Seek_Request__create())
}

func (t _Seek_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__Seek_Request__destroy((*C.rosbag2_interfaces__srv__Seek_Request)(pointer_to_free))
}

func (t _Seek_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Seek_Request)
	mem := (*C.rosbag2_interfaces__srv__Seek_Request)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.time), &m.Time)
}

func (t _Seek_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Seek_Request)
	mem := (*C.rosbag2_interfaces__srv__Seek_Request)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Time, unsafe.Pointer(&mem.time))
}

func (t _Seek_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__Seek_Request())
}

type CSeek_Request = C.rosbag2_interfaces__srv__Seek_Request
type CSeek_RequestSequence = C.rosbag2_interfaces__srv__Seek_Request__Sequence

func Seek_RequestSequenceToGo(goSlice *[]Seek_Request, cSlice CSeek_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Seek_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Seek_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Seek_RequestSequenceToC(cSlice *CSeek_RequestSequence, goSlice []Seek_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__Seek_Request)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__Seek_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Seek_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Seek_RequestArrayToGo(goSlice []Seek_Request, cSlice []CSeek_Request) {
	for i := 0; i < len(cSlice); i++ {
		Seek_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Seek_RequestArrayToC(cSlice []CSeek_Request, goSlice []Seek_Request) {
	for i := 0; i < len(goSlice); i++ {
		Seek_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

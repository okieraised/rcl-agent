// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/srv/device_info.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/DeviceInfo_Response", DeviceInfo_ResponseTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/srv/DeviceInfo_Response", DeviceInfo_ResponseTypeSupport)
}

type DeviceInfo_Response struct {
	DeviceName        string `yaml:"device_name"`
	SerialNumber      string `yaml:"serial_number"`
	FirmwareVersion   string `yaml:"firmware_version"`
	UsbTypeDescriptor string `yaml:"usb_type_descriptor"`
	FirmwareUpdateId  string `yaml:"firmware_update_id"`
	Sensors           string `yaml:"sensors"`
	PhysicalPort      string `yaml:"physical_port"`
}

// NewDeviceInfo_Response creates a new DeviceInfo_Response with default values.
func NewDeviceInfo_Response() *DeviceInfo_Response {
	self := DeviceInfo_Response{}
	self.SetDefaults()
	return &self
}

func (t *DeviceInfo_Response) Clone() *DeviceInfo_Response {
	c := &DeviceInfo_Response{}
	c.DeviceName = t.DeviceName
	c.SerialNumber = t.SerialNumber
	c.FirmwareVersion = t.FirmwareVersion
	c.UsbTypeDescriptor = t.UsbTypeDescriptor
	c.FirmwareUpdateId = t.FirmwareUpdateId
	c.Sensors = t.Sensors
	c.PhysicalPort = t.PhysicalPort
	return c
}

func (t *DeviceInfo_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *DeviceInfo_Response) SetDefaults() {
	t.DeviceName = ""
	t.SerialNumber = ""
	t.FirmwareVersion = ""
	t.UsbTypeDescriptor = ""
	t.FirmwareUpdateId = ""
	t.Sensors = ""
	t.PhysicalPort = ""
}

func (t *DeviceInfo_Response) GetTypeSupport() humble.MessageTypeSupport {
	return DeviceInfo_ResponseTypeSupport
}

// DeviceInfo_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type DeviceInfo_ResponsePublisher struct {
	*humble.Publisher
}

// NewDeviceInfo_ResponsePublisher creates and returns a new publisher for the
// DeviceInfo_Response
func NewDeviceInfo_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*DeviceInfo_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, DeviceInfo_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DeviceInfo_ResponsePublisher{pub}, nil
}

func (p *DeviceInfo_ResponsePublisher) Publish(msg *DeviceInfo_Response) error {
	return p.Publisher.Publish(msg)
}

// DeviceInfo_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type DeviceInfo_ResponseSubscription struct {
	*humble.Subscription
}

// DeviceInfo_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a DeviceInfo_ResponseSubscription.
type DeviceInfo_ResponseSubscriptionCallback func(msg *DeviceInfo_Response, info *humble.MessageInfo, err error)

// NewDeviceInfo_ResponseSubscription creates and returns a new subscription for the
// DeviceInfo_Response
func NewDeviceInfo_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback DeviceInfo_ResponseSubscriptionCallback) (*DeviceInfo_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg DeviceInfo_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, DeviceInfo_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DeviceInfo_ResponseSubscription{sub}, nil
}

func (s *DeviceInfo_ResponseSubscription) TakeMessage(out *DeviceInfo_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDeviceInfo_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDeviceInfo_ResponseSlice(dst, src []DeviceInfo_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DeviceInfo_ResponseTypeSupport humble.MessageTypeSupport = _DeviceInfo_ResponseTypeSupport{}

type _DeviceInfo_ResponseTypeSupport struct{}

func (t _DeviceInfo_ResponseTypeSupport) New() humble.Message {
	return NewDeviceInfo_Response()
}

func (t _DeviceInfo_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__srv__DeviceInfo_Response
	return (unsafe.Pointer)(C.realsense2_camera_msgs__srv__DeviceInfo_Response__create())
}

func (t _DeviceInfo_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__srv__DeviceInfo_Response__destroy((*C.realsense2_camera_msgs__srv__DeviceInfo_Response)(pointer_to_free))
}

func (t _DeviceInfo_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*DeviceInfo_Response)
	mem := (*C.realsense2_camera_msgs__srv__DeviceInfo_Response)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.device_name), m.DeviceName)
	humble.StringAsCStruct(unsafe.Pointer(&mem.serial_number), m.SerialNumber)
	humble.StringAsCStruct(unsafe.Pointer(&mem.firmware_version), m.FirmwareVersion)
	humble.StringAsCStruct(unsafe.Pointer(&mem.usb_type_descriptor), m.UsbTypeDescriptor)
	humble.StringAsCStruct(unsafe.Pointer(&mem.firmware_update_id), m.FirmwareUpdateId)
	humble.StringAsCStruct(unsafe.Pointer(&mem.sensors), m.Sensors)
	humble.StringAsCStruct(unsafe.Pointer(&mem.physical_port), m.PhysicalPort)
}

func (t _DeviceInfo_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DeviceInfo_Response)
	mem := (*C.realsense2_camera_msgs__srv__DeviceInfo_Response)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.DeviceName, unsafe.Pointer(&mem.device_name))
	humble.StringAsGoStruct(&m.SerialNumber, unsafe.Pointer(&mem.serial_number))
	humble.StringAsGoStruct(&m.FirmwareVersion, unsafe.Pointer(&mem.firmware_version))
	humble.StringAsGoStruct(&m.UsbTypeDescriptor, unsafe.Pointer(&mem.usb_type_descriptor))
	humble.StringAsGoStruct(&m.FirmwareUpdateId, unsafe.Pointer(&mem.firmware_update_id))
	humble.StringAsGoStruct(&m.Sensors, unsafe.Pointer(&mem.sensors))
	humble.StringAsGoStruct(&m.PhysicalPort, unsafe.Pointer(&mem.physical_port))
}

func (t _DeviceInfo_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__srv__DeviceInfo_Response())
}

type CDeviceInfo_Response = C.realsense2_camera_msgs__srv__DeviceInfo_Response
type CDeviceInfo_ResponseSequence = C.realsense2_camera_msgs__srv__DeviceInfo_Response__Sequence

func DeviceInfo_ResponseSequenceToGo(goSlice *[]DeviceInfo_Response, cSlice CDeviceInfo_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DeviceInfo_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DeviceInfo_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func DeviceInfo_ResponseSequenceToC(cSlice *CDeviceInfo_ResponseSequence, goSlice []DeviceInfo_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__srv__DeviceInfo_Response)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__srv__DeviceInfo_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DeviceInfo_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func DeviceInfo_ResponseArrayToGo(goSlice []DeviceInfo_Response, cSlice []CDeviceInfo_Response) {
	for i := 0; i < len(cSlice); i++ {
		DeviceInfo_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func DeviceInfo_ResponseArrayToC(cSlice []CDeviceInfo_Response, goSlice []DeviceInfo_Response) {
	for i := 0; i < len(goSlice); i++ {
		DeviceInfo_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

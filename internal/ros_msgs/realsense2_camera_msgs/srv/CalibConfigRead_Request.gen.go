// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/srv/calib_config_read.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/CalibConfigRead_Request", CalibConfigRead_RequestTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/srv/CalibConfigRead_Request", CalibConfigRead_RequestTypeSupport)
}

type CalibConfigRead_Request struct {
}

// NewCalibConfigRead_Request creates a new CalibConfigRead_Request with default values.
func NewCalibConfigRead_Request() *CalibConfigRead_Request {
	self := CalibConfigRead_Request{}
	self.SetDefaults()
	return &self
}

func (t *CalibConfigRead_Request) Clone() *CalibConfigRead_Request {
	c := &CalibConfigRead_Request{}
	return c
}

func (t *CalibConfigRead_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *CalibConfigRead_Request) SetDefaults() {
}

func (t *CalibConfigRead_Request) GetTypeSupport() humble.MessageTypeSupport {
	return CalibConfigRead_RequestTypeSupport
}

// CalibConfigRead_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type CalibConfigRead_RequestPublisher struct {
	*humble.Publisher
}

// NewCalibConfigRead_RequestPublisher creates and returns a new publisher for the
// CalibConfigRead_Request
func NewCalibConfigRead_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*CalibConfigRead_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, CalibConfigRead_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CalibConfigRead_RequestPublisher{pub}, nil
}

func (p *CalibConfigRead_RequestPublisher) Publish(msg *CalibConfigRead_Request) error {
	return p.Publisher.Publish(msg)
}

// CalibConfigRead_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type CalibConfigRead_RequestSubscription struct {
	*humble.Subscription
}

// CalibConfigRead_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a CalibConfigRead_RequestSubscription.
type CalibConfigRead_RequestSubscriptionCallback func(msg *CalibConfigRead_Request, info *humble.MessageInfo, err error)

// NewCalibConfigRead_RequestSubscription creates and returns a new subscription for the
// CalibConfigRead_Request
func NewCalibConfigRead_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback CalibConfigRead_RequestSubscriptionCallback) (*CalibConfigRead_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg CalibConfigRead_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, CalibConfigRead_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CalibConfigRead_RequestSubscription{sub}, nil
}

func (s *CalibConfigRead_RequestSubscription) TakeMessage(out *CalibConfigRead_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCalibConfigRead_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCalibConfigRead_RequestSlice(dst, src []CalibConfigRead_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CalibConfigRead_RequestTypeSupport humble.MessageTypeSupport = _CalibConfigRead_RequestTypeSupport{}

type _CalibConfigRead_RequestTypeSupport struct{}

func (t _CalibConfigRead_RequestTypeSupport) New() humble.Message {
	return NewCalibConfigRead_Request()
}

func (t _CalibConfigRead_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__srv__CalibConfigRead_Request
	return (unsafe.Pointer)(C.realsense2_camera_msgs__srv__CalibConfigRead_Request__create())
}

func (t _CalibConfigRead_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__srv__CalibConfigRead_Request__destroy((*C.realsense2_camera_msgs__srv__CalibConfigRead_Request)(pointer_to_free))
}

func (t _CalibConfigRead_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {

}

func (t _CalibConfigRead_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _CalibConfigRead_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__srv__CalibConfigRead_Request())
}

type CCalibConfigRead_Request = C.realsense2_camera_msgs__srv__CalibConfigRead_Request
type CCalibConfigRead_RequestSequence = C.realsense2_camera_msgs__srv__CalibConfigRead_Request__Sequence

func CalibConfigRead_RequestSequenceToGo(goSlice *[]CalibConfigRead_Request, cSlice CCalibConfigRead_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CalibConfigRead_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CalibConfigRead_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func CalibConfigRead_RequestSequenceToC(cSlice *CCalibConfigRead_RequestSequence, goSlice []CalibConfigRead_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__srv__CalibConfigRead_Request)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__srv__CalibConfigRead_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CalibConfigRead_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func CalibConfigRead_RequestArrayToGo(goSlice []CalibConfigRead_Request, cSlice []CCalibConfigRead_Request) {
	for i := 0; i < len(cSlice); i++ {
		CalibConfigRead_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func CalibConfigRead_RequestArrayToC(cSlice []CCalibConfigRead_Request, goSlice []CalibConfigRead_Request) {
	for i := 0; i < len(goSlice); i++ {
		CalibConfigRead_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

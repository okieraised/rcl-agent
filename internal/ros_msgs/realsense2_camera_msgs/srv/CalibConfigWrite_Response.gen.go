// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/srv/calib_config_write.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/CalibConfigWrite_Response", CalibConfigWrite_ResponseTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/srv/CalibConfigWrite_Response", CalibConfigWrite_ResponseTypeSupport)
}

type CalibConfigWrite_Response struct {
	Success      bool   `yaml:"success"`
	ErrorMessage string `yaml:"error_message"`
}

// NewCalibConfigWrite_Response creates a new CalibConfigWrite_Response with default values.
func NewCalibConfigWrite_Response() *CalibConfigWrite_Response {
	self := CalibConfigWrite_Response{}
	self.SetDefaults()
	return &self
}

func (t *CalibConfigWrite_Response) Clone() *CalibConfigWrite_Response {
	c := &CalibConfigWrite_Response{}
	c.Success = t.Success
	c.ErrorMessage = t.ErrorMessage
	return c
}

func (t *CalibConfigWrite_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *CalibConfigWrite_Response) SetDefaults() {
	t.Success = false
	t.ErrorMessage = ""
}

func (t *CalibConfigWrite_Response) GetTypeSupport() humble.MessageTypeSupport {
	return CalibConfigWrite_ResponseTypeSupport
}

// CalibConfigWrite_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type CalibConfigWrite_ResponsePublisher struct {
	*humble.Publisher
}

// NewCalibConfigWrite_ResponsePublisher creates and returns a new publisher for the
// CalibConfigWrite_Response
func NewCalibConfigWrite_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*CalibConfigWrite_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, CalibConfigWrite_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CalibConfigWrite_ResponsePublisher{pub}, nil
}

func (p *CalibConfigWrite_ResponsePublisher) Publish(msg *CalibConfigWrite_Response) error {
	return p.Publisher.Publish(msg)
}

// CalibConfigWrite_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type CalibConfigWrite_ResponseSubscription struct {
	*humble.Subscription
}

// CalibConfigWrite_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a CalibConfigWrite_ResponseSubscription.
type CalibConfigWrite_ResponseSubscriptionCallback func(msg *CalibConfigWrite_Response, info *humble.MessageInfo, err error)

// NewCalibConfigWrite_ResponseSubscription creates and returns a new subscription for the
// CalibConfigWrite_Response
func NewCalibConfigWrite_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback CalibConfigWrite_ResponseSubscriptionCallback) (*CalibConfigWrite_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg CalibConfigWrite_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, CalibConfigWrite_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CalibConfigWrite_ResponseSubscription{sub}, nil
}

func (s *CalibConfigWrite_ResponseSubscription) TakeMessage(out *CalibConfigWrite_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCalibConfigWrite_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCalibConfigWrite_ResponseSlice(dst, src []CalibConfigWrite_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CalibConfigWrite_ResponseTypeSupport humble.MessageTypeSupport = _CalibConfigWrite_ResponseTypeSupport{}

type _CalibConfigWrite_ResponseTypeSupport struct{}

func (t _CalibConfigWrite_ResponseTypeSupport) New() humble.Message {
	return NewCalibConfigWrite_Response()
}

func (t _CalibConfigWrite_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__srv__CalibConfigWrite_Response
	return (unsafe.Pointer)(C.realsense2_camera_msgs__srv__CalibConfigWrite_Response__create())
}

func (t _CalibConfigWrite_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__srv__CalibConfigWrite_Response__destroy((*C.realsense2_camera_msgs__srv__CalibConfigWrite_Response)(pointer_to_free))
}

func (t _CalibConfigWrite_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*CalibConfigWrite_Response)
	mem := (*C.realsense2_camera_msgs__srv__CalibConfigWrite_Response)(dst)
	mem.success = C.bool(m.Success)
	humble.StringAsCStruct(unsafe.Pointer(&mem.error_message), m.ErrorMessage)
}

func (t _CalibConfigWrite_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CalibConfigWrite_Response)
	mem := (*C.realsense2_camera_msgs__srv__CalibConfigWrite_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	humble.StringAsGoStruct(&m.ErrorMessage, unsafe.Pointer(&mem.error_message))
}

func (t _CalibConfigWrite_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__srv__CalibConfigWrite_Response())
}

type CCalibConfigWrite_Response = C.realsense2_camera_msgs__srv__CalibConfigWrite_Response
type CCalibConfigWrite_ResponseSequence = C.realsense2_camera_msgs__srv__CalibConfigWrite_Response__Sequence

func CalibConfigWrite_ResponseSequenceToGo(goSlice *[]CalibConfigWrite_Response, cSlice CCalibConfigWrite_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CalibConfigWrite_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CalibConfigWrite_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func CalibConfigWrite_ResponseSequenceToC(cSlice *CCalibConfigWrite_ResponseSequence, goSlice []CalibConfigWrite_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__srv__CalibConfigWrite_Response)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__srv__CalibConfigWrite_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CalibConfigWrite_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func CalibConfigWrite_ResponseArrayToGo(goSlice []CalibConfigWrite_Response, cSlice []CCalibConfigWrite_Response) {
	for i := 0; i < len(cSlice); i++ {
		CalibConfigWrite_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func CalibConfigWrite_ResponseArrayToC(cSlice []CCalibConfigWrite_Response, goSlice []CalibConfigWrite_Response) {
	for i := 0; i < len(goSlice); i++ {
		CalibConfigWrite_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

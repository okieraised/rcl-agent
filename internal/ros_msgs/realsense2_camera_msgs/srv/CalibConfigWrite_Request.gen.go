// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/srv/calib_config_write.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/CalibConfigWrite_Request", CalibConfigWrite_RequestTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/srv/CalibConfigWrite_Request", CalibConfigWrite_RequestTypeSupport)
}

type CalibConfigWrite_Request struct {
	CalibConfig string `yaml:"calib_config"`
}

// NewCalibConfigWrite_Request creates a new CalibConfigWrite_Request with default values.
func NewCalibConfigWrite_Request() *CalibConfigWrite_Request {
	self := CalibConfigWrite_Request{}
	self.SetDefaults()
	return &self
}

func (t *CalibConfigWrite_Request) Clone() *CalibConfigWrite_Request {
	c := &CalibConfigWrite_Request{}
	c.CalibConfig = t.CalibConfig
	return c
}

func (t *CalibConfigWrite_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *CalibConfigWrite_Request) SetDefaults() {
	t.CalibConfig = ""
}

func (t *CalibConfigWrite_Request) GetTypeSupport() humble.MessageTypeSupport {
	return CalibConfigWrite_RequestTypeSupport
}

// CalibConfigWrite_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type CalibConfigWrite_RequestPublisher struct {
	*humble.Publisher
}

// NewCalibConfigWrite_RequestPublisher creates and returns a new publisher for the
// CalibConfigWrite_Request
func NewCalibConfigWrite_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*CalibConfigWrite_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, CalibConfigWrite_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CalibConfigWrite_RequestPublisher{pub}, nil
}

func (p *CalibConfigWrite_RequestPublisher) Publish(msg *CalibConfigWrite_Request) error {
	return p.Publisher.Publish(msg)
}

// CalibConfigWrite_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type CalibConfigWrite_RequestSubscription struct {
	*humble.Subscription
}

// CalibConfigWrite_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a CalibConfigWrite_RequestSubscription.
type CalibConfigWrite_RequestSubscriptionCallback func(msg *CalibConfigWrite_Request, info *humble.MessageInfo, err error)

// NewCalibConfigWrite_RequestSubscription creates and returns a new subscription for the
// CalibConfigWrite_Request
func NewCalibConfigWrite_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback CalibConfigWrite_RequestSubscriptionCallback) (*CalibConfigWrite_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg CalibConfigWrite_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, CalibConfigWrite_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CalibConfigWrite_RequestSubscription{sub}, nil
}

func (s *CalibConfigWrite_RequestSubscription) TakeMessage(out *CalibConfigWrite_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCalibConfigWrite_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCalibConfigWrite_RequestSlice(dst, src []CalibConfigWrite_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CalibConfigWrite_RequestTypeSupport humble.MessageTypeSupport = _CalibConfigWrite_RequestTypeSupport{}

type _CalibConfigWrite_RequestTypeSupport struct{}

func (t _CalibConfigWrite_RequestTypeSupport) New() humble.Message {
	return NewCalibConfigWrite_Request()
}

func (t _CalibConfigWrite_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__srv__CalibConfigWrite_Request
	return (unsafe.Pointer)(C.realsense2_camera_msgs__srv__CalibConfigWrite_Request__create())
}

func (t _CalibConfigWrite_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__srv__CalibConfigWrite_Request__destroy((*C.realsense2_camera_msgs__srv__CalibConfigWrite_Request)(pointer_to_free))
}

func (t _CalibConfigWrite_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*CalibConfigWrite_Request)
	mem := (*C.realsense2_camera_msgs__srv__CalibConfigWrite_Request)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.calib_config), m.CalibConfig)
}

func (t _CalibConfigWrite_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CalibConfigWrite_Request)
	mem := (*C.realsense2_camera_msgs__srv__CalibConfigWrite_Request)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.CalibConfig, unsafe.Pointer(&mem.calib_config))
}

func (t _CalibConfigWrite_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__srv__CalibConfigWrite_Request())
}

type CCalibConfigWrite_Request = C.realsense2_camera_msgs__srv__CalibConfigWrite_Request
type CCalibConfigWrite_RequestSequence = C.realsense2_camera_msgs__srv__CalibConfigWrite_Request__Sequence

func CalibConfigWrite_RequestSequenceToGo(goSlice *[]CalibConfigWrite_Request, cSlice CCalibConfigWrite_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CalibConfigWrite_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CalibConfigWrite_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func CalibConfigWrite_RequestSequenceToC(cSlice *CCalibConfigWrite_RequestSequence, goSlice []CalibConfigWrite_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__srv__CalibConfigWrite_Request)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__srv__CalibConfigWrite_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CalibConfigWrite_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func CalibConfigWrite_RequestArrayToGo(goSlice []CalibConfigWrite_Request, cSlice []CCalibConfigWrite_Request) {
	for i := 0; i < len(cSlice); i++ {
		CalibConfigWrite_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func CalibConfigWrite_RequestArrayToC(cSlice []CCalibConfigWrite_Request, goSlice []CalibConfigWrite_Request) {
	for i := 0; i < len(goSlice); i++ {
		CalibConfigWrite_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

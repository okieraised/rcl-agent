// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/srv/device_info.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/DeviceInfo_Request", DeviceInfo_RequestTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/srv/DeviceInfo_Request", DeviceInfo_RequestTypeSupport)
}

type DeviceInfo_Request struct {
}

// NewDeviceInfo_Request creates a new DeviceInfo_Request with default values.
func NewDeviceInfo_Request() *DeviceInfo_Request {
	self := DeviceInfo_Request{}
	self.SetDefaults()
	return &self
}

func (t *DeviceInfo_Request) Clone() *DeviceInfo_Request {
	c := &DeviceInfo_Request{}
	return c
}

func (t *DeviceInfo_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *DeviceInfo_Request) SetDefaults() {
}

func (t *DeviceInfo_Request) GetTypeSupport() humble.MessageTypeSupport {
	return DeviceInfo_RequestTypeSupport
}

// DeviceInfo_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type DeviceInfo_RequestPublisher struct {
	*humble.Publisher
}

// NewDeviceInfo_RequestPublisher creates and returns a new publisher for the
// DeviceInfo_Request
func NewDeviceInfo_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*DeviceInfo_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, DeviceInfo_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DeviceInfo_RequestPublisher{pub}, nil
}

func (p *DeviceInfo_RequestPublisher) Publish(msg *DeviceInfo_Request) error {
	return p.Publisher.Publish(msg)
}

// DeviceInfo_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type DeviceInfo_RequestSubscription struct {
	*humble.Subscription
}

// DeviceInfo_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a DeviceInfo_RequestSubscription.
type DeviceInfo_RequestSubscriptionCallback func(msg *DeviceInfo_Request, info *humble.MessageInfo, err error)

// NewDeviceInfo_RequestSubscription creates and returns a new subscription for the
// DeviceInfo_Request
func NewDeviceInfo_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback DeviceInfo_RequestSubscriptionCallback) (*DeviceInfo_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg DeviceInfo_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, DeviceInfo_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DeviceInfo_RequestSubscription{sub}, nil
}

func (s *DeviceInfo_RequestSubscription) TakeMessage(out *DeviceInfo_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDeviceInfo_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDeviceInfo_RequestSlice(dst, src []DeviceInfo_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DeviceInfo_RequestTypeSupport humble.MessageTypeSupport = _DeviceInfo_RequestTypeSupport{}

type _DeviceInfo_RequestTypeSupport struct{}

func (t _DeviceInfo_RequestTypeSupport) New() humble.Message {
	return NewDeviceInfo_Request()
}

func (t _DeviceInfo_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__srv__DeviceInfo_Request
	return (unsafe.Pointer)(C.realsense2_camera_msgs__srv__DeviceInfo_Request__create())
}

func (t _DeviceInfo_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__srv__DeviceInfo_Request__destroy((*C.realsense2_camera_msgs__srv__DeviceInfo_Request)(pointer_to_free))
}

func (t _DeviceInfo_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {

}

func (t _DeviceInfo_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {

}

func (t _DeviceInfo_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__srv__DeviceInfo_Request())
}

type CDeviceInfo_Request = C.realsense2_camera_msgs__srv__DeviceInfo_Request
type CDeviceInfo_RequestSequence = C.realsense2_camera_msgs__srv__DeviceInfo_Request__Sequence

func DeviceInfo_RequestSequenceToGo(goSlice *[]DeviceInfo_Request, cSlice CDeviceInfo_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DeviceInfo_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DeviceInfo_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func DeviceInfo_RequestSequenceToC(cSlice *CDeviceInfo_RequestSequence, goSlice []DeviceInfo_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__srv__DeviceInfo_Request)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__srv__DeviceInfo_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DeviceInfo_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func DeviceInfo_RequestArrayToGo(goSlice []DeviceInfo_Request, cSlice []CDeviceInfo_Request) {
	for i := 0; i < len(cSlice); i++ {
		DeviceInfo_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func DeviceInfo_RequestArrayToC(cSlice []CDeviceInfo_Request, goSlice []DeviceInfo_Request) {
	for i := 0; i < len(goSlice); i++ {
		DeviceInfo_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

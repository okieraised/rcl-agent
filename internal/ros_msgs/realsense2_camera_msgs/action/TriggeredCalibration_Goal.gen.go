// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/action/triggered_calibration.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/TriggeredCalibration_Goal", TriggeredCalibration_GoalTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/action/TriggeredCalibration_Goal", TriggeredCalibration_GoalTypeSupport)
}

type TriggeredCalibration_Goal struct {
	Json string `yaml:"json"` // request
}

// NewTriggeredCalibration_Goal creates a new TriggeredCalibration_Goal with default values.
func NewTriggeredCalibration_Goal() *TriggeredCalibration_Goal {
	self := TriggeredCalibration_Goal{}
	self.SetDefaults()
	return &self
}

func (t *TriggeredCalibration_Goal) Clone() *TriggeredCalibration_Goal {
	c := &TriggeredCalibration_Goal{}
	c.Json = t.Json
	return c
}

func (t *TriggeredCalibration_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TriggeredCalibration_Goal) SetDefaults() {
	t.Json = "calib run"
}

func (t *TriggeredCalibration_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return TriggeredCalibration_GoalTypeSupport
}

// TriggeredCalibration_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type TriggeredCalibration_GoalPublisher struct {
	*humble.Publisher
}

// NewTriggeredCalibration_GoalPublisher creates and returns a new publisher for the
// TriggeredCalibration_Goal
func NewTriggeredCalibration_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TriggeredCalibration_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, TriggeredCalibration_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TriggeredCalibration_GoalPublisher{pub}, nil
}

func (p *TriggeredCalibration_GoalPublisher) Publish(msg *TriggeredCalibration_Goal) error {
	return p.Publisher.Publish(msg)
}

// TriggeredCalibration_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type TriggeredCalibration_GoalSubscription struct {
	*humble.Subscription
}

// TriggeredCalibration_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a TriggeredCalibration_GoalSubscription.
type TriggeredCalibration_GoalSubscriptionCallback func(msg *TriggeredCalibration_Goal, info *humble.MessageInfo, err error)

// NewTriggeredCalibration_GoalSubscription creates and returns a new subscription for the
// TriggeredCalibration_Goal
func NewTriggeredCalibration_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TriggeredCalibration_GoalSubscriptionCallback) (*TriggeredCalibration_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TriggeredCalibration_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TriggeredCalibration_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TriggeredCalibration_GoalSubscription{sub}, nil
}

func (s *TriggeredCalibration_GoalSubscription) TakeMessage(out *TriggeredCalibration_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTriggeredCalibration_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTriggeredCalibration_GoalSlice(dst, src []TriggeredCalibration_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TriggeredCalibration_GoalTypeSupport humble.MessageTypeSupport = _TriggeredCalibration_GoalTypeSupport{}

type _TriggeredCalibration_GoalTypeSupport struct{}

func (t _TriggeredCalibration_GoalTypeSupport) New() humble.Message {
	return NewTriggeredCalibration_Goal()
}

func (t _TriggeredCalibration_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__action__TriggeredCalibration_Goal
	return (unsafe.Pointer)(C.realsense2_camera_msgs__action__TriggeredCalibration_Goal__create())
}

func (t _TriggeredCalibration_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__action__TriggeredCalibration_Goal__destroy((*C.realsense2_camera_msgs__action__TriggeredCalibration_Goal)(pointer_to_free))
}

func (t _TriggeredCalibration_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TriggeredCalibration_Goal)
	mem := (*C.realsense2_camera_msgs__action__TriggeredCalibration_Goal)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.json), m.Json)
}

func (t _TriggeredCalibration_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TriggeredCalibration_Goal)
	mem := (*C.realsense2_camera_msgs__action__TriggeredCalibration_Goal)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Json, unsafe.Pointer(&mem.json))
}

func (t _TriggeredCalibration_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__action__TriggeredCalibration_Goal())
}

type CTriggeredCalibration_Goal = C.realsense2_camera_msgs__action__TriggeredCalibration_Goal
type CTriggeredCalibration_GoalSequence = C.realsense2_camera_msgs__action__TriggeredCalibration_Goal__Sequence

func TriggeredCalibration_GoalSequenceToGo(goSlice *[]TriggeredCalibration_Goal, cSlice CTriggeredCalibration_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TriggeredCalibration_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TriggeredCalibration_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TriggeredCalibration_GoalSequenceToC(cSlice *CTriggeredCalibration_GoalSequence, goSlice []TriggeredCalibration_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__action__TriggeredCalibration_Goal)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__action__TriggeredCalibration_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TriggeredCalibration_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TriggeredCalibration_GoalArrayToGo(goSlice []TriggeredCalibration_Goal, cSlice []CTriggeredCalibration_Goal) {
	for i := 0; i < len(cSlice); i++ {
		TriggeredCalibration_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TriggeredCalibration_GoalArrayToC(cSlice []CTriggeredCalibration_Goal, goSlice []TriggeredCalibration_Goal) {
	for i := 0; i < len(goSlice); i++ {
		TriggeredCalibration_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

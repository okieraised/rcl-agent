// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/action/triggered_calibration.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/TriggeredCalibration_Feedback", TriggeredCalibration_FeedbackTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/action/TriggeredCalibration_Feedback", TriggeredCalibration_FeedbackTypeSupport)
}

type TriggeredCalibration_Feedback struct {
	Progress float32 `yaml:"progress"` // feedback
}

// NewTriggeredCalibration_Feedback creates a new TriggeredCalibration_Feedback with default values.
func NewTriggeredCalibration_Feedback() *TriggeredCalibration_Feedback {
	self := TriggeredCalibration_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *TriggeredCalibration_Feedback) Clone() *TriggeredCalibration_Feedback {
	c := &TriggeredCalibration_Feedback{}
	c.Progress = t.Progress
	return c
}

func (t *TriggeredCalibration_Feedback) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TriggeredCalibration_Feedback) SetDefaults() {
	t.Progress = 0
}

func (t *TriggeredCalibration_Feedback) GetTypeSupport() humble.MessageTypeSupport {
	return TriggeredCalibration_FeedbackTypeSupport
}

// TriggeredCalibration_FeedbackPublisher wraps humble.Publisher to provide type safe helper
// functions
type TriggeredCalibration_FeedbackPublisher struct {
	*humble.Publisher
}

// NewTriggeredCalibration_FeedbackPublisher creates and returns a new publisher for the
// TriggeredCalibration_Feedback
func NewTriggeredCalibration_FeedbackPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TriggeredCalibration_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topicName, TriggeredCalibration_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TriggeredCalibration_FeedbackPublisher{pub}, nil
}

func (p *TriggeredCalibration_FeedbackPublisher) Publish(msg *TriggeredCalibration_Feedback) error {
	return p.Publisher.Publish(msg)
}

// TriggeredCalibration_FeedbackSubscription wraps humble.Subscription to provide type safe helper
// functions
type TriggeredCalibration_FeedbackSubscription struct {
	*humble.Subscription
}

// TriggeredCalibration_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a TriggeredCalibration_FeedbackSubscription.
type TriggeredCalibration_FeedbackSubscriptionCallback func(msg *TriggeredCalibration_Feedback, info *humble.MessageInfo, err error)

// NewTriggeredCalibration_FeedbackSubscription creates and returns a new subscription for the
// TriggeredCalibration_Feedback
func NewTriggeredCalibration_FeedbackSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TriggeredCalibration_FeedbackSubscriptionCallback) (*TriggeredCalibration_FeedbackSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TriggeredCalibration_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TriggeredCalibration_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TriggeredCalibration_FeedbackSubscription{sub}, nil
}

func (s *TriggeredCalibration_FeedbackSubscription) TakeMessage(out *TriggeredCalibration_Feedback) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTriggeredCalibration_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTriggeredCalibration_FeedbackSlice(dst, src []TriggeredCalibration_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TriggeredCalibration_FeedbackTypeSupport humble.MessageTypeSupport = _TriggeredCalibration_FeedbackTypeSupport{}

type _TriggeredCalibration_FeedbackTypeSupport struct{}

func (t _TriggeredCalibration_FeedbackTypeSupport) New() humble.Message {
	return NewTriggeredCalibration_Feedback()
}

func (t _TriggeredCalibration_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback
	return (unsafe.Pointer)(C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback__create())
}

func (t _TriggeredCalibration_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback__destroy((*C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback)(pointer_to_free))
}

func (t _TriggeredCalibration_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TriggeredCalibration_Feedback)
	mem := (*C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback)(dst)
	mem.progress = C.float(m.Progress)
}

func (t _TriggeredCalibration_FeedbackTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TriggeredCalibration_Feedback)
	mem := (*C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback)(ros2_message_buffer)
	m.Progress = float32(mem.progress)
}

func (t _TriggeredCalibration_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__action__TriggeredCalibration_Feedback())
}

type CTriggeredCalibration_Feedback = C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback
type CTriggeredCalibration_FeedbackSequence = C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback__Sequence

func TriggeredCalibration_FeedbackSequenceToGo(goSlice *[]TriggeredCalibration_Feedback, cSlice CTriggeredCalibration_FeedbackSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TriggeredCalibration_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TriggeredCalibration_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TriggeredCalibration_FeedbackSequenceToC(cSlice *CTriggeredCalibration_FeedbackSequence, goSlice []TriggeredCalibration_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__action__TriggeredCalibration_Feedback)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__action__TriggeredCalibration_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TriggeredCalibration_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TriggeredCalibration_FeedbackArrayToGo(goSlice []TriggeredCalibration_Feedback, cSlice []CTriggeredCalibration_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		TriggeredCalibration_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TriggeredCalibration_FeedbackArrayToC(cSlice []CTriggeredCalibration_Feedback, goSlice []TriggeredCalibration_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		TriggeredCalibration_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

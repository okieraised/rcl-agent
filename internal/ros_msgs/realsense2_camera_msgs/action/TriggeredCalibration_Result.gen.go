// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_action

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/action/triggered_calibration.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/TriggeredCalibration_Result", TriggeredCalibration_ResultTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/action/TriggeredCalibration_Result", TriggeredCalibration_ResultTypeSupport)
}

type TriggeredCalibration_Result struct {
	Success     bool    `yaml:"success"` // result
	ErrorMsg    string  `yaml:"error_msg"`
	Calibration string  `yaml:"calibration"`
	Health      float32 `yaml:"health"`
}

// NewTriggeredCalibration_Result creates a new TriggeredCalibration_Result with default values.
func NewTriggeredCalibration_Result() *TriggeredCalibration_Result {
	self := TriggeredCalibration_Result{}
	self.SetDefaults()
	return &self
}

func (t *TriggeredCalibration_Result) Clone() *TriggeredCalibration_Result {
	c := &TriggeredCalibration_Result{}
	c.Success = t.Success
	c.ErrorMsg = t.ErrorMsg
	c.Calibration = t.Calibration
	c.Health = t.Health
	return c
}

func (t *TriggeredCalibration_Result) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TriggeredCalibration_Result) SetDefaults() {
	t.Success = false
	t.ErrorMsg = ""
	t.Calibration = ""
	t.Health = 0
}

func (t *TriggeredCalibration_Result) GetTypeSupport() humble.MessageTypeSupport {
	return TriggeredCalibration_ResultTypeSupport
}

// TriggeredCalibration_ResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type TriggeredCalibration_ResultPublisher struct {
	*humble.Publisher
}

// NewTriggeredCalibration_ResultPublisher creates and returns a new publisher for the
// TriggeredCalibration_Result
func NewTriggeredCalibration_ResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TriggeredCalibration_ResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, TriggeredCalibration_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TriggeredCalibration_ResultPublisher{pub}, nil
}

func (p *TriggeredCalibration_ResultPublisher) Publish(msg *TriggeredCalibration_Result) error {
	return p.Publisher.Publish(msg)
}

// TriggeredCalibration_ResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type TriggeredCalibration_ResultSubscription struct {
	*humble.Subscription
}

// TriggeredCalibration_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a TriggeredCalibration_ResultSubscription.
type TriggeredCalibration_ResultSubscriptionCallback func(msg *TriggeredCalibration_Result, info *humble.MessageInfo, err error)

// NewTriggeredCalibration_ResultSubscription creates and returns a new subscription for the
// TriggeredCalibration_Result
func NewTriggeredCalibration_ResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TriggeredCalibration_ResultSubscriptionCallback) (*TriggeredCalibration_ResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TriggeredCalibration_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TriggeredCalibration_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TriggeredCalibration_ResultSubscription{sub}, nil
}

func (s *TriggeredCalibration_ResultSubscription) TakeMessage(out *TriggeredCalibration_Result) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTriggeredCalibration_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTriggeredCalibration_ResultSlice(dst, src []TriggeredCalibration_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TriggeredCalibration_ResultTypeSupport humble.MessageTypeSupport = _TriggeredCalibration_ResultTypeSupport{}

type _TriggeredCalibration_ResultTypeSupport struct{}

func (t _TriggeredCalibration_ResultTypeSupport) New() humble.Message {
	return NewTriggeredCalibration_Result()
}

func (t _TriggeredCalibration_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__action__TriggeredCalibration_Result
	return (unsafe.Pointer)(C.realsense2_camera_msgs__action__TriggeredCalibration_Result__create())
}

func (t _TriggeredCalibration_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__action__TriggeredCalibration_Result__destroy((*C.realsense2_camera_msgs__action__TriggeredCalibration_Result)(pointer_to_free))
}

func (t _TriggeredCalibration_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TriggeredCalibration_Result)
	mem := (*C.realsense2_camera_msgs__action__TriggeredCalibration_Result)(dst)
	mem.success = C.bool(m.Success)
	humble.StringAsCStruct(unsafe.Pointer(&mem.error_msg), m.ErrorMsg)
	humble.StringAsCStruct(unsafe.Pointer(&mem.calibration), m.Calibration)
	mem.health = C.float(m.Health)
}

func (t _TriggeredCalibration_ResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TriggeredCalibration_Result)
	mem := (*C.realsense2_camera_msgs__action__TriggeredCalibration_Result)(ros2_message_buffer)
	m.Success = bool(mem.success)
	humble.StringAsGoStruct(&m.ErrorMsg, unsafe.Pointer(&mem.error_msg))
	humble.StringAsGoStruct(&m.Calibration, unsafe.Pointer(&mem.calibration))
	m.Health = float32(mem.health)
}

func (t _TriggeredCalibration_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__action__TriggeredCalibration_Result())
}

type CTriggeredCalibration_Result = C.realsense2_camera_msgs__action__TriggeredCalibration_Result
type CTriggeredCalibration_ResultSequence = C.realsense2_camera_msgs__action__TriggeredCalibration_Result__Sequence

func TriggeredCalibration_ResultSequenceToGo(goSlice *[]TriggeredCalibration_Result, cSlice CTriggeredCalibration_ResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TriggeredCalibration_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TriggeredCalibration_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TriggeredCalibration_ResultSequenceToC(cSlice *CTriggeredCalibration_ResultSequence, goSlice []TriggeredCalibration_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__action__TriggeredCalibration_Result)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__action__TriggeredCalibration_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TriggeredCalibration_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TriggeredCalibration_ResultArrayToGo(goSlice []TriggeredCalibration_Result, cSlice []CTriggeredCalibration_Result) {
	for i := 0; i < len(cSlice); i++ {
		TriggeredCalibration_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TriggeredCalibration_ResultArrayToC(cSlice []CTriggeredCalibration_Result, goSlice []TriggeredCalibration_Result) {
	for i := 0; i < len(goSlice); i++ {
		TriggeredCalibration_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

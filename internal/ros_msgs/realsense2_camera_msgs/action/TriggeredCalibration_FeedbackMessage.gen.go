// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_action

import (
	"unsafe"

	unique_identifier_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/unique_identifier_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/action/triggered_calibration.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/TriggeredCalibration_FeedbackMessage", TriggeredCalibration_FeedbackMessageTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/action/TriggeredCalibration_FeedbackMessage", TriggeredCalibration_FeedbackMessageTypeSupport)
}

type TriggeredCalibration_FeedbackMessage struct {
	GoalID   unique_identifier_msgs_msg.UUID `yaml:"goal_id"`
	Feedback TriggeredCalibration_Feedback   `yaml:"feedback"`
}

// NewTriggeredCalibration_FeedbackMessage creates a new TriggeredCalibration_FeedbackMessage with default values.
func NewTriggeredCalibration_FeedbackMessage() *TriggeredCalibration_FeedbackMessage {
	self := TriggeredCalibration_FeedbackMessage{}
	self.SetDefaults()
	return &self
}

func (t *TriggeredCalibration_FeedbackMessage) Clone() *TriggeredCalibration_FeedbackMessage {
	c := &TriggeredCalibration_FeedbackMessage{}
	c.GoalID = *t.GoalID.Clone()
	c.Feedback = *t.Feedback.Clone()
	return c
}

func (t *TriggeredCalibration_FeedbackMessage) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TriggeredCalibration_FeedbackMessage) SetDefaults() {
	t.GoalID.SetDefaults()
	t.Feedback.SetDefaults()
}

func (t *TriggeredCalibration_FeedbackMessage) GetTypeSupport() humble.MessageTypeSupport {
	return TriggeredCalibration_FeedbackMessageTypeSupport
}
func (t *TriggeredCalibration_FeedbackMessage) GetGoalID() *humble.GoalID {
	return (*humble.GoalID)(&t.GoalID.Uuid)
}

func (t *TriggeredCalibration_FeedbackMessage) SetGoalID(id *humble.GoalID) {
	t.GoalID.Uuid = *id
}

// TriggeredCalibration_FeedbackMessagePublisher wraps humble.Publisher to provide type safe helper
// functions
type TriggeredCalibration_FeedbackMessagePublisher struct {
	*humble.Publisher
}

// NewTriggeredCalibration_FeedbackMessagePublisher creates and returns a new publisher for the
// TriggeredCalibration_FeedbackMessage
func NewTriggeredCalibration_FeedbackMessagePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TriggeredCalibration_FeedbackMessagePublisher, error) {
	pub, err := node.NewPublisher(topicName, TriggeredCalibration_FeedbackMessageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TriggeredCalibration_FeedbackMessagePublisher{pub}, nil
}

func (p *TriggeredCalibration_FeedbackMessagePublisher) Publish(msg *TriggeredCalibration_FeedbackMessage) error {
	return p.Publisher.Publish(msg)
}

// TriggeredCalibration_FeedbackMessageSubscription wraps humble.Subscription to provide type safe helper
// functions
type TriggeredCalibration_FeedbackMessageSubscription struct {
	*humble.Subscription
}

// TriggeredCalibration_FeedbackMessageSubscriptionCallback type is used to provide a subscription
// handler function for a TriggeredCalibration_FeedbackMessageSubscription.
type TriggeredCalibration_FeedbackMessageSubscriptionCallback func(msg *TriggeredCalibration_FeedbackMessage, info *humble.MessageInfo, err error)

// NewTriggeredCalibration_FeedbackMessageSubscription creates and returns a new subscription for the
// TriggeredCalibration_FeedbackMessage
func NewTriggeredCalibration_FeedbackMessageSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TriggeredCalibration_FeedbackMessageSubscriptionCallback) (*TriggeredCalibration_FeedbackMessageSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TriggeredCalibration_FeedbackMessage
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TriggeredCalibration_FeedbackMessageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TriggeredCalibration_FeedbackMessageSubscription{sub}, nil
}

func (s *TriggeredCalibration_FeedbackMessageSubscription) TakeMessage(out *TriggeredCalibration_FeedbackMessage) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTriggeredCalibration_FeedbackMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTriggeredCalibration_FeedbackMessageSlice(dst, src []TriggeredCalibration_FeedbackMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TriggeredCalibration_FeedbackMessageTypeSupport humble.MessageTypeSupport = _TriggeredCalibration_FeedbackMessageTypeSupport{}

type _TriggeredCalibration_FeedbackMessageTypeSupport struct{}

func (t _TriggeredCalibration_FeedbackMessageTypeSupport) New() humble.Message {
	return NewTriggeredCalibration_FeedbackMessage()
}

func (t _TriggeredCalibration_FeedbackMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage
	return (unsafe.Pointer)(C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage__create())
}

func (t _TriggeredCalibration_FeedbackMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage__destroy((*C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage)(pointer_to_free))
}

func (t _TriggeredCalibration_FeedbackMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TriggeredCalibration_FeedbackMessage)
	mem := (*C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_id), &m.GoalID)
	TriggeredCalibration_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&mem.feedback), &m.Feedback)
}

func (t _TriggeredCalibration_FeedbackMessageTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TriggeredCalibration_FeedbackMessage)
	mem := (*C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.GoalID, unsafe.Pointer(&mem.goal_id))
	TriggeredCalibration_FeedbackTypeSupport.AsGoStruct(&m.Feedback, unsafe.Pointer(&mem.feedback))
}

func (t _TriggeredCalibration_FeedbackMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage())
}

type CTriggeredCalibration_FeedbackMessage = C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage
type CTriggeredCalibration_FeedbackMessageSequence = C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage__Sequence

func TriggeredCalibration_FeedbackMessageSequenceToGo(goSlice *[]TriggeredCalibration_FeedbackMessage, cSlice CTriggeredCalibration_FeedbackMessageSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TriggeredCalibration_FeedbackMessage, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TriggeredCalibration_FeedbackMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TriggeredCalibration_FeedbackMessageSequenceToC(cSlice *CTriggeredCalibration_FeedbackMessageSequence, goSlice []TriggeredCalibration_FeedbackMessage) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__action__TriggeredCalibration_FeedbackMessage * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TriggeredCalibration_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TriggeredCalibration_FeedbackMessageArrayToGo(goSlice []TriggeredCalibration_FeedbackMessage, cSlice []CTriggeredCalibration_FeedbackMessage) {
	for i := 0; i < len(cSlice); i++ {
		TriggeredCalibration_FeedbackMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TriggeredCalibration_FeedbackMessageArrayToC(cSlice []CTriggeredCalibration_FeedbackMessage, goSlice []TriggeredCalibration_FeedbackMessage) {
	for i := 0; i < len(goSlice); i++ {
		TriggeredCalibration_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

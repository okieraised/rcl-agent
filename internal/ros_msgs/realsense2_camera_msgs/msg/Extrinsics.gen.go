// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/msg/extrinsics.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/Extrinsics", ExtrinsicsTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/msg/Extrinsics", ExtrinsicsTypeSupport)
}

type Extrinsics struct {
	Rotation    [9]float64 `yaml:"rotation"`    // Column - major 3x3 rotation matrix. Cross-stream extrinsics: encodes the topology describing how the different devices are oriented
	Translation [3]float64 `yaml:"translation"` // Three-element translation vector, in meters
}

// NewExtrinsics creates a new Extrinsics with default values.
func NewExtrinsics() *Extrinsics {
	self := Extrinsics{}
	self.SetDefaults()
	return &self
}

func (t *Extrinsics) Clone() *Extrinsics {
	c := &Extrinsics{}
	c.Rotation = t.Rotation
	c.Translation = t.Translation
	return c
}

func (t *Extrinsics) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Extrinsics) SetDefaults() {
	t.Rotation = [9]float64{}
	t.Translation = [3]float64{}
}

func (t *Extrinsics) GetTypeSupport() humble.MessageTypeSupport {
	return ExtrinsicsTypeSupport
}

// ExtrinsicsPublisher wraps humble.Publisher to provide type safe helper
// functions
type ExtrinsicsPublisher struct {
	*humble.Publisher
}

// NewExtrinsicsPublisher creates and returns a new publisher for the
// Extrinsics
func NewExtrinsicsPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ExtrinsicsPublisher, error) {
	pub, err := node.NewPublisher(topicName, ExtrinsicsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ExtrinsicsPublisher{pub}, nil
}

func (p *ExtrinsicsPublisher) Publish(msg *Extrinsics) error {
	return p.Publisher.Publish(msg)
}

// ExtrinsicsSubscription wraps humble.Subscription to provide type safe helper
// functions
type ExtrinsicsSubscription struct {
	*humble.Subscription
}

// ExtrinsicsSubscriptionCallback type is used to provide a subscription
// handler function for a ExtrinsicsSubscription.
type ExtrinsicsSubscriptionCallback func(msg *Extrinsics, info *humble.MessageInfo, err error)

// NewExtrinsicsSubscription creates and returns a new subscription for the
// Extrinsics
func NewExtrinsicsSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ExtrinsicsSubscriptionCallback) (*ExtrinsicsSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Extrinsics
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ExtrinsicsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ExtrinsicsSubscription{sub}, nil
}

func (s *ExtrinsicsSubscription) TakeMessage(out *Extrinsics) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneExtrinsicsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneExtrinsicsSlice(dst, src []Extrinsics) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ExtrinsicsTypeSupport humble.MessageTypeSupport = _ExtrinsicsTypeSupport{}

type _ExtrinsicsTypeSupport struct{}

func (t _ExtrinsicsTypeSupport) New() humble.Message {
	return NewExtrinsics()
}

func (t _ExtrinsicsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__msg__Extrinsics
	return (unsafe.Pointer)(C.realsense2_camera_msgs__msg__Extrinsics__create())
}

func (t _ExtrinsicsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__msg__Extrinsics__destroy((*C.realsense2_camera_msgs__msg__Extrinsics)(pointer_to_free))
}

func (t _ExtrinsicsTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Extrinsics)
	mem := (*C.realsense2_camera_msgs__msg__Extrinsics)(dst)
	cSlice_rotation := mem.rotation[:]
	humble.Float64ArrayToC(*(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_rotation)), m.Rotation[:])
	cSlice_translation := mem.translation[:]
	humble.Float64ArrayToC(*(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_translation)), m.Translation[:])
}

func (t _ExtrinsicsTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Extrinsics)
	mem := (*C.realsense2_camera_msgs__msg__Extrinsics)(ros2_message_buffer)
	cSlice_rotation := mem.rotation[:]
	humble.Float64ArrayToGo(m.Rotation[:], *(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_rotation)))
	cSlice_translation := mem.translation[:]
	humble.Float64ArrayToGo(m.Translation[:], *(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_translation)))
}

func (t _ExtrinsicsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__msg__Extrinsics())
}

type CExtrinsics = C.realsense2_camera_msgs__msg__Extrinsics
type CExtrinsicsSequence = C.realsense2_camera_msgs__msg__Extrinsics__Sequence

func ExtrinsicsSequenceToGo(goSlice *[]Extrinsics, cSlice CExtrinsicsSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Extrinsics, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ExtrinsicsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ExtrinsicsSequenceToC(cSlice *CExtrinsicsSequence, goSlice []Extrinsics) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__msg__Extrinsics)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__msg__Extrinsics * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ExtrinsicsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ExtrinsicsArrayToGo(goSlice []Extrinsics, cSlice []CExtrinsics) {
	for i := 0; i < len(cSlice); i++ {
		ExtrinsicsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ExtrinsicsArrayToC(cSlice []CExtrinsics, goSlice []Extrinsics) {
	for i := 0; i < len(goSlice); i++ {
		ExtrinsicsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

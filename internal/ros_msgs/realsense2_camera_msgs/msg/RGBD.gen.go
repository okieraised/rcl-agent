// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_msg

import (
	"unsafe"

	sensor_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/sensor_msgs/msg"
	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/msg/rgbd.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/RGBD", RGBDTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/msg/RGBD", RGBDTypeSupport)
}

type RGBD struct {
	Header          std_msgs_msg.Header        `yaml:"header"` // RGBD Message
	RgbCameraInfo   sensor_msgs_msg.CameraInfo `yaml:"rgb_camera_info"`
	DepthCameraInfo sensor_msgs_msg.CameraInfo `yaml:"depth_camera_info"`
	Rgb             sensor_msgs_msg.Image      `yaml:"rgb"`
	Depth           sensor_msgs_msg.Image      `yaml:"depth"`
}

// NewRGBD creates a new RGBD with default values.
func NewRGBD() *RGBD {
	self := RGBD{}
	self.SetDefaults()
	return &self
}

func (t *RGBD) Clone() *RGBD {
	c := &RGBD{}
	c.Header = *t.Header.Clone()
	c.RgbCameraInfo = *t.RgbCameraInfo.Clone()
	c.DepthCameraInfo = *t.DepthCameraInfo.Clone()
	c.Rgb = *t.Rgb.Clone()
	c.Depth = *t.Depth.Clone()
	return c
}

func (t *RGBD) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *RGBD) SetDefaults() {
	t.Header.SetDefaults()
	t.RgbCameraInfo.SetDefaults()
	t.DepthCameraInfo.SetDefaults()
	t.Rgb.SetDefaults()
	t.Depth.SetDefaults()
}

func (t *RGBD) GetTypeSupport() humble.MessageTypeSupport {
	return RGBDTypeSupport
}

// RGBDPublisher wraps humble.Publisher to provide type safe helper
// functions
type RGBDPublisher struct {
	*humble.Publisher
}

// NewRGBDPublisher creates and returns a new publisher for the
// RGBD
func NewRGBDPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*RGBDPublisher, error) {
	pub, err := node.NewPublisher(topicName, RGBDTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RGBDPublisher{pub}, nil
}

func (p *RGBDPublisher) Publish(msg *RGBD) error {
	return p.Publisher.Publish(msg)
}

// RGBDSubscription wraps humble.Subscription to provide type safe helper
// functions
type RGBDSubscription struct {
	*humble.Subscription
}

// RGBDSubscriptionCallback type is used to provide a subscription
// handler function for a RGBDSubscription.
type RGBDSubscriptionCallback func(msg *RGBD, info *humble.MessageInfo, err error)

// NewRGBDSubscription creates and returns a new subscription for the
// RGBD
func NewRGBDSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback RGBDSubscriptionCallback) (*RGBDSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg RGBD
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, RGBDTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RGBDSubscription{sub}, nil
}

func (s *RGBDSubscription) TakeMessage(out *RGBD) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRGBDSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRGBDSlice(dst, src []RGBD) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RGBDTypeSupport humble.MessageTypeSupport = _RGBDTypeSupport{}

type _RGBDTypeSupport struct{}

func (t _RGBDTypeSupport) New() humble.Message {
	return NewRGBD()
}

func (t _RGBDTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__msg__RGBD
	return (unsafe.Pointer)(C.realsense2_camera_msgs__msg__RGBD__create())
}

func (t _RGBDTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__msg__RGBD__destroy((*C.realsense2_camera_msgs__msg__RGBD)(pointer_to_free))
}

func (t _RGBDTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*RGBD)
	mem := (*C.realsense2_camera_msgs__msg__RGBD)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	sensor_msgs_msg.CameraInfoTypeSupport.AsCStruct(unsafe.Pointer(&mem.rgb_camera_info), &m.RgbCameraInfo)
	sensor_msgs_msg.CameraInfoTypeSupport.AsCStruct(unsafe.Pointer(&mem.depth_camera_info), &m.DepthCameraInfo)
	sensor_msgs_msg.ImageTypeSupport.AsCStruct(unsafe.Pointer(&mem.rgb), &m.Rgb)
	sensor_msgs_msg.ImageTypeSupport.AsCStruct(unsafe.Pointer(&mem.depth), &m.Depth)
}

func (t _RGBDTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RGBD)
	mem := (*C.realsense2_camera_msgs__msg__RGBD)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	sensor_msgs_msg.CameraInfoTypeSupport.AsGoStruct(&m.RgbCameraInfo, unsafe.Pointer(&mem.rgb_camera_info))
	sensor_msgs_msg.CameraInfoTypeSupport.AsGoStruct(&m.DepthCameraInfo, unsafe.Pointer(&mem.depth_camera_info))
	sensor_msgs_msg.ImageTypeSupport.AsGoStruct(&m.Rgb, unsafe.Pointer(&mem.rgb))
	sensor_msgs_msg.ImageTypeSupport.AsGoStruct(&m.Depth, unsafe.Pointer(&mem.depth))
}

func (t _RGBDTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__msg__RGBD())
}

type CRGBD = C.realsense2_camera_msgs__msg__RGBD
type CRGBDSequence = C.realsense2_camera_msgs__msg__RGBD__Sequence

func RGBDSequenceToGo(goSlice *[]RGBD, cSlice CRGBDSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RGBD, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RGBDTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func RGBDSequenceToC(cSlice *CRGBDSequence, goSlice []RGBD) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__msg__RGBD)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__msg__RGBD * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RGBDTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func RGBDArrayToGo(goSlice []RGBD, cSlice []CRGBD) {
	for i := 0; i < len(cSlice); i++ {
		RGBDTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func RGBDArrayToC(cSlice []CRGBD, goSlice []RGBD) {
	for i := 0; i < len(goSlice); i++ {
		RGBDTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/msg/imu_info.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/IMUInfo", IMUInfoTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/msg/IMUInfo", IMUInfoTypeSupport)
}

type IMUInfo struct {
	Header         std_msgs_msg.Header `yaml:"header"` // header.frame_id is either set to "imu_accel" or "imu_gyro"to distinguish between "accel" and "gyro" info.
	Data           [12]float64         `yaml:"data"`
	NoiseVariances [3]float64          `yaml:"noise_variances"`
	BiasVariances  [3]float64          `yaml:"bias_variances"`
}

// NewIMUInfo creates a new IMUInfo with default values.
func NewIMUInfo() *IMUInfo {
	self := IMUInfo{}
	self.SetDefaults()
	return &self
}

func (t *IMUInfo) Clone() *IMUInfo {
	c := &IMUInfo{}
	c.Header = *t.Header.Clone()
	c.Data = t.Data
	c.NoiseVariances = t.NoiseVariances
	c.BiasVariances = t.BiasVariances
	return c
}

func (t *IMUInfo) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *IMUInfo) SetDefaults() {
	t.Header.SetDefaults()
	t.Data = [12]float64{}
	t.NoiseVariances = [3]float64{}
	t.BiasVariances = [3]float64{}
}

func (t *IMUInfo) GetTypeSupport() humble.MessageTypeSupport {
	return IMUInfoTypeSupport
}

// IMUInfoPublisher wraps humble.Publisher to provide type safe helper
// functions
type IMUInfoPublisher struct {
	*humble.Publisher
}

// NewIMUInfoPublisher creates and returns a new publisher for the
// IMUInfo
func NewIMUInfoPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*IMUInfoPublisher, error) {
	pub, err := node.NewPublisher(topicName, IMUInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &IMUInfoPublisher{pub}, nil
}

func (p *IMUInfoPublisher) Publish(msg *IMUInfo) error {
	return p.Publisher.Publish(msg)
}

// IMUInfoSubscription wraps humble.Subscription to provide type safe helper
// functions
type IMUInfoSubscription struct {
	*humble.Subscription
}

// IMUInfoSubscriptionCallback type is used to provide a subscription
// handler function for a IMUInfoSubscription.
type IMUInfoSubscriptionCallback func(msg *IMUInfo, info *humble.MessageInfo, err error)

// NewIMUInfoSubscription creates and returns a new subscription for the
// IMUInfo
func NewIMUInfoSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback IMUInfoSubscriptionCallback) (*IMUInfoSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg IMUInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, IMUInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &IMUInfoSubscription{sub}, nil
}

func (s *IMUInfoSubscription) TakeMessage(out *IMUInfo) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneIMUInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneIMUInfoSlice(dst, src []IMUInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var IMUInfoTypeSupport humble.MessageTypeSupport = _IMUInfoTypeSupport{}

type _IMUInfoTypeSupport struct{}

func (t _IMUInfoTypeSupport) New() humble.Message {
	return NewIMUInfo()
}

func (t _IMUInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__msg__IMUInfo
	return (unsafe.Pointer)(C.realsense2_camera_msgs__msg__IMUInfo__create())
}

func (t _IMUInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__msg__IMUInfo__destroy((*C.realsense2_camera_msgs__msg__IMUInfo)(pointer_to_free))
}

func (t _IMUInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*IMUInfo)
	mem := (*C.realsense2_camera_msgs__msg__IMUInfo)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	cSlice_data := mem.data[:]
	humble.Float64ArrayToC(*(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_data)), m.Data[:])
	cSlice_noise_variances := mem.noise_variances[:]
	humble.Float64ArrayToC(*(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_noise_variances)), m.NoiseVariances[:])
	cSlice_bias_variances := mem.bias_variances[:]
	humble.Float64ArrayToC(*(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_bias_variances)), m.BiasVariances[:])
}

func (t _IMUInfoTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*IMUInfo)
	mem := (*C.realsense2_camera_msgs__msg__IMUInfo)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	cSlice_data := mem.data[:]
	humble.Float64ArrayToGo(m.Data[:], *(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_data)))
	cSlice_noise_variances := mem.noise_variances[:]
	humble.Float64ArrayToGo(m.NoiseVariances[:], *(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_noise_variances)))
	cSlice_bias_variances := mem.bias_variances[:]
	humble.Float64ArrayToGo(m.BiasVariances[:], *(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_bias_variances)))
}

func (t _IMUInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__msg__IMUInfo())
}

type CIMUInfo = C.realsense2_camera_msgs__msg__IMUInfo
type CIMUInfoSequence = C.realsense2_camera_msgs__msg__IMUInfo__Sequence

func IMUInfoSequenceToGo(goSlice *[]IMUInfo, cSlice CIMUInfoSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]IMUInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		IMUInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func IMUInfoSequenceToC(cSlice *CIMUInfoSequence, goSlice []IMUInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__msg__IMUInfo)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__msg__IMUInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		IMUInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func IMUInfoArrayToGo(goSlice []IMUInfo, cSlice []CIMUInfo) {
	for i := 0; i < len(cSlice); i++ {
		IMUInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func IMUInfoArrayToC(cSlice []CIMUInfo, goSlice []IMUInfo) {
	for i := 0; i < len(goSlice); i++ {
		IMUInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

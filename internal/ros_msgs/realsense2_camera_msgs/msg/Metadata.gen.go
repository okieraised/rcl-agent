// Code generated by ros2gen. DO NOT EDIT.

package realsense2_camera_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <realsense2_camera_msgs/msg/metadata.h>

*/
import "C"

func init() {
	humble.RegisterMessage("realsense2_camera_msgs/Metadata", MetadataTypeSupport)
	humble.RegisterMessage("realsense2_camera_msgs/msg/Metadata", MetadataTypeSupport)
}

type Metadata struct {
	Header   std_msgs_msg.Header `yaml:"header"`
	JsonData string              `yaml:"json_data"`
}

// NewMetadata creates a new Metadata with default values.
func NewMetadata() *Metadata {
	self := Metadata{}
	self.SetDefaults()
	return &self
}

func (t *Metadata) Clone() *Metadata {
	c := &Metadata{}
	c.Header = *t.Header.Clone()
	c.JsonData = t.JsonData
	return c
}

func (t *Metadata) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Metadata) SetDefaults() {
	t.Header.SetDefaults()
	t.JsonData = ""
}

func (t *Metadata) GetTypeSupport() humble.MessageTypeSupport {
	return MetadataTypeSupport
}

// MetadataPublisher wraps humble.Publisher to provide type safe helper
// functions
type MetadataPublisher struct {
	*humble.Publisher
}

// NewMetadataPublisher creates and returns a new publisher for the
// Metadata
func NewMetadataPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MetadataPublisher, error) {
	pub, err := node.NewPublisher(topicName, MetadataTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MetadataPublisher{pub}, nil
}

func (p *MetadataPublisher) Publish(msg *Metadata) error {
	return p.Publisher.Publish(msg)
}

// MetadataSubscription wraps humble.Subscription to provide type safe helper
// functions
type MetadataSubscription struct {
	*humble.Subscription
}

// MetadataSubscriptionCallback type is used to provide a subscription
// handler function for a MetadataSubscription.
type MetadataSubscriptionCallback func(msg *Metadata, info *humble.MessageInfo, err error)

// NewMetadataSubscription creates and returns a new subscription for the
// Metadata
func NewMetadataSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MetadataSubscriptionCallback) (*MetadataSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Metadata
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MetadataTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MetadataSubscription{sub}, nil
}

func (s *MetadataSubscription) TakeMessage(out *Metadata) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMetadataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMetadataSlice(dst, src []Metadata) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MetadataTypeSupport humble.MessageTypeSupport = _MetadataTypeSupport{}

type _MetadataTypeSupport struct{}

func (t _MetadataTypeSupport) New() humble.Message {
	return NewMetadata()
}

func (t _MetadataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.realsense2_camera_msgs__msg__Metadata
	return (unsafe.Pointer)(C.realsense2_camera_msgs__msg__Metadata__create())
}

func (t _MetadataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.realsense2_camera_msgs__msg__Metadata__destroy((*C.realsense2_camera_msgs__msg__Metadata)(pointer_to_free))
}

func (t _MetadataTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Metadata)
	mem := (*C.realsense2_camera_msgs__msg__Metadata)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	humble.StringAsCStruct(unsafe.Pointer(&mem.json_data), m.JsonData)
}

func (t _MetadataTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Metadata)
	mem := (*C.realsense2_camera_msgs__msg__Metadata)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	humble.StringAsGoStruct(&m.JsonData, unsafe.Pointer(&mem.json_data))
}

func (t _MetadataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__realsense2_camera_msgs__msg__Metadata())
}

type CMetadata = C.realsense2_camera_msgs__msg__Metadata
type CMetadataSequence = C.realsense2_camera_msgs__msg__Metadata__Sequence

func MetadataSequenceToGo(goSlice *[]Metadata, cSlice CMetadataSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Metadata, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MetadataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MetadataSequenceToC(cSlice *CMetadataSequence, goSlice []Metadata) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.realsense2_camera_msgs__msg__Metadata)(C.malloc(C.sizeof_struct_realsense2_camera_msgs__msg__Metadata * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MetadataTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MetadataArrayToGo(goSlice []Metadata, cSlice []CMetadata) {
	for i := 0; i < len(cSlice); i++ {
		MetadataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MetadataArrayToC(cSlice []CMetadata, goSlice []Metadata) {
	for i := 0; i < len(goSlice); i++ {
		MetadataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

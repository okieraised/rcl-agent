// Code generated by ros2gen. DO NOT EDIT.

package rosgraph_msgs_msg

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosgraph_msgs/msg/clock.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rosgraph_msgs/Clock", ClockTypeSupport)
	humble.RegisterMessage("rosgraph_msgs/msg/Clock", ClockTypeSupport)
}

type Clock struct {
	Clock builtin_interfaces_msg.Time `yaml:"clock"` // This message communicates the current time.For more information, see https://design.ros2.org/articles/clock_and_time.html.
}

// NewClock creates a new Clock with default values.
func NewClock() *Clock {
	self := Clock{}
	self.SetDefaults()
	return &self
}

func (t *Clock) Clone() *Clock {
	c := &Clock{}
	c.Clock = *t.Clock.Clone()
	return c
}

func (t *Clock) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Clock) SetDefaults() {
	t.Clock.SetDefaults()
}

func (t *Clock) GetTypeSupport() humble.MessageTypeSupport {
	return ClockTypeSupport
}

// ClockPublisher wraps humble.Publisher to provide type safe helper
// functions
type ClockPublisher struct {
	*humble.Publisher
}

// NewClockPublisher creates and returns a new publisher for the
// Clock
func NewClockPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ClockPublisher, error) {
	pub, err := node.NewPublisher(topicName, ClockTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ClockPublisher{pub}, nil
}

func (p *ClockPublisher) Publish(msg *Clock) error {
	return p.Publisher.Publish(msg)
}

// ClockSubscription wraps humble.Subscription to provide type safe helper
// functions
type ClockSubscription struct {
	*humble.Subscription
}

// ClockSubscriptionCallback type is used to provide a subscription
// handler function for a ClockSubscription.
type ClockSubscriptionCallback func(msg *Clock, info *humble.MessageInfo, err error)

// NewClockSubscription creates and returns a new subscription for the
// Clock
func NewClockSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ClockSubscriptionCallback) (*ClockSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Clock
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ClockTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ClockSubscription{sub}, nil
}

func (s *ClockSubscription) TakeMessage(out *Clock) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneClockSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneClockSlice(dst, src []Clock) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ClockTypeSupport humble.MessageTypeSupport = _ClockTypeSupport{}

type _ClockTypeSupport struct{}

func (t _ClockTypeSupport) New() humble.Message {
	return NewClock()
}

func (t _ClockTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosgraph_msgs__msg__Clock
	return (unsafe.Pointer)(C.rosgraph_msgs__msg__Clock__create())
}

func (t _ClockTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosgraph_msgs__msg__Clock__destroy((*C.rosgraph_msgs__msg__Clock)(pointer_to_free))
}

func (t _ClockTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Clock)
	mem := (*C.rosgraph_msgs__msg__Clock)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.clock), &m.Clock)
}

func (t _ClockTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Clock)
	mem := (*C.rosgraph_msgs__msg__Clock)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Clock, unsafe.Pointer(&mem.clock))
}

func (t _ClockTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock())
}

type CClock = C.rosgraph_msgs__msg__Clock
type CClockSequence = C.rosgraph_msgs__msg__Clock__Sequence

func ClockSequenceToGo(goSlice *[]Clock, cSlice CClockSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Clock, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ClockTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ClockSequenceToC(cSlice *CClockSequence, goSlice []Clock) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosgraph_msgs__msg__Clock)(C.malloc(C.sizeof_struct_rosgraph_msgs__msg__Clock * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ClockTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ClockArrayToGo(goSlice []Clock, cSlice []CClock) {
	for i := 0; i < len(cSlice); i++ {
		ClockTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ClockArrayToC(cSlice []CClock, goSlice []Clock) {
	for i := 0; i < len(goSlice); i++ {
		ClockTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

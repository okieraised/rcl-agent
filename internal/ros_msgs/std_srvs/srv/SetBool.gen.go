// Code generated by ros2gen. DO NOT EDIT.

package std_srvs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <std_srvs/srv/set_bool.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("std_srvs/SetBool", SetBoolTypeSupport)
	humble.RegisterService("std_srvs/srv/SetBool", SetBoolTypeSupport)
}

type _SetBoolTypeSupport struct {}

func (s _SetBoolTypeSupport) Request() humble.MessageTypeSupport {
	return SetBool_RequestTypeSupport
}

func (s _SetBoolTypeSupport) Response() humble.MessageTypeSupport {
	return SetBool_ResponseTypeSupport
}

func (s _SetBoolTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool())
}

// Modifying this variable is undefined behavior.
var SetBoolTypeSupport humble.ServiceTypeSupport = _SetBoolTypeSupport{}

// SetBoolClient wraps humble.Client to provide type safe helper
// functions
type SetBoolClient struct {
	*humble.Client
}

// NewSetBoolClient creates and returns a new client for the
// SetBool
func NewSetBoolClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*SetBoolClient, error) {
	client, err := node.NewClient(serviceName, SetBoolTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetBoolClient{client}, nil
}

func (s *SetBoolClient) Send(ctx context.Context, req *SetBool_Request) (*SetBool_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetBool_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetBoolServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s SetBoolServiceResponseSender) SendResponse(resp *SetBool_Response) error {
	return s.sender.SendResponse(resp)
}

type SetBoolServiceRequestHandler func(*humble.ServiceInfo, *SetBool_Request, SetBoolServiceResponseSender)

// SetBoolService wraps humble.Service to provide type safe helper
// functions
type SetBoolService struct {
	*humble.Service
}

// NewSetBoolService creates and returns a new service for the
// SetBool
func NewSetBoolService(node *humble.Node, name string, options *humble.ServiceOptions, handler SetBoolServiceRequestHandler) (*SetBoolService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*SetBool_Request)
		responseSender := SetBoolServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetBoolTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetBoolService{service}, nil
}
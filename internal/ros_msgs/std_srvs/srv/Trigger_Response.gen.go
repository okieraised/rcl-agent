// Code generated by ros2gen. DO NOT EDIT.

package std_srvs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <std_srvs/srv/trigger.h>

*/
import "C"

func init() {
	humble.RegisterMessage("std_srvs/Trigger_Response", Trigger_ResponseTypeSupport)
	humble.RegisterMessage("std_srvs/srv/Trigger_Response", Trigger_ResponseTypeSupport)
}

type Trigger_Response struct {
	Success bool   `yaml:"success"` // indicate successful run of triggered service
	Message string `yaml:"message"` // informational, e.g. for error messages
}

// NewTrigger_Response creates a new Trigger_Response with default values.
func NewTrigger_Response() *Trigger_Response {
	self := Trigger_Response{}
	self.SetDefaults()
	return &self
}

func (t *Trigger_Response) Clone() *Trigger_Response {
	c := &Trigger_Response{}
	c.Success = t.Success
	c.Message = t.Message
	return c
}

func (t *Trigger_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Trigger_Response) SetDefaults() {
	t.Success = false
	t.Message = ""
}

func (t *Trigger_Response) GetTypeSupport() humble.MessageTypeSupport {
	return Trigger_ResponseTypeSupport
}

// Trigger_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type Trigger_ResponsePublisher struct {
	*humble.Publisher
}

// NewTrigger_ResponsePublisher creates and returns a new publisher for the
// Trigger_Response
func NewTrigger_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Trigger_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, Trigger_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Trigger_ResponsePublisher{pub}, nil
}

func (p *Trigger_ResponsePublisher) Publish(msg *Trigger_Response) error {
	return p.Publisher.Publish(msg)
}

// Trigger_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type Trigger_ResponseSubscription struct {
	*humble.Subscription
}

// Trigger_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a Trigger_ResponseSubscription.
type Trigger_ResponseSubscriptionCallback func(msg *Trigger_Response, info *humble.MessageInfo, err error)

// NewTrigger_ResponseSubscription creates and returns a new subscription for the
// Trigger_Response
func NewTrigger_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Trigger_ResponseSubscriptionCallback) (*Trigger_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Trigger_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Trigger_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Trigger_ResponseSubscription{sub}, nil
}

func (s *Trigger_ResponseSubscription) TakeMessage(out *Trigger_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrigger_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrigger_ResponseSlice(dst, src []Trigger_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Trigger_ResponseTypeSupport humble.MessageTypeSupport = _Trigger_ResponseTypeSupport{}

type _Trigger_ResponseTypeSupport struct{}

func (t _Trigger_ResponseTypeSupport) New() humble.Message {
	return NewTrigger_Response()
}

func (t _Trigger_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.std_srvs__srv__Trigger_Response
	return (unsafe.Pointer)(C.std_srvs__srv__Trigger_Response__create())
}

func (t _Trigger_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.std_srvs__srv__Trigger_Response__destroy((*C.std_srvs__srv__Trigger_Response)(pointer_to_free))
}

func (t _Trigger_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Trigger_Response)
	mem := (*C.std_srvs__srv__Trigger_Response)(dst)
	mem.success = C.bool(m.Success)
	humble.StringAsCStruct(unsafe.Pointer(&mem.message), m.Message)
}

func (t _Trigger_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Trigger_Response)
	mem := (*C.std_srvs__srv__Trigger_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	humble.StringAsGoStruct(&m.Message, unsafe.Pointer(&mem.message))
}

func (t _Trigger_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response())
}

type CTrigger_Response = C.std_srvs__srv__Trigger_Response
type CTrigger_ResponseSequence = C.std_srvs__srv__Trigger_Response__Sequence

func Trigger_ResponseSequenceToGo(goSlice *[]Trigger_Response, cSlice CTrigger_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Trigger_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Trigger_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Trigger_ResponseSequenceToC(cSlice *CTrigger_ResponseSequence, goSlice []Trigger_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.std_srvs__srv__Trigger_Response)(C.malloc(C.sizeof_struct_std_srvs__srv__Trigger_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Trigger_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Trigger_ResponseArrayToGo(goSlice []Trigger_Response, cSlice []CTrigger_Response) {
	for i := 0; i < len(cSlice); i++ {
		Trigger_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Trigger_ResponseArrayToC(cSlice []CTrigger_Response, goSlice []Trigger_Response) {
	for i := 0; i < len(goSlice); i++ {
		Trigger_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package std_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <std_msgs/msg/multi_array_layout.h>

*/
import "C"

func init() {
	humble.RegisterMessage("std_msgs/MultiArrayLayout", MultiArrayLayoutTypeSupport)
	humble.RegisterMessage("std_msgs/msg/MultiArrayLayout", MultiArrayLayoutTypeSupport)
}

type MultiArrayLayout struct {
	Dim        []MultiArrayDimension `yaml:"dim"`         // Array of dimension properties
	DataOffset uint32                `yaml:"data_offset"` // padding bytes at front of data
}

// NewMultiArrayLayout creates a new MultiArrayLayout with default values.
func NewMultiArrayLayout() *MultiArrayLayout {
	self := MultiArrayLayout{}
	self.SetDefaults()
	return &self
}

func (t *MultiArrayLayout) Clone() *MultiArrayLayout {
	c := &MultiArrayLayout{}
	if t.Dim != nil {
		c.Dim = make([]MultiArrayDimension, len(t.Dim))
		CloneMultiArrayDimensionSlice(c.Dim, t.Dim)
	}
	c.DataOffset = t.DataOffset
	return c
}

func (t *MultiArrayLayout) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MultiArrayLayout) SetDefaults() {
	t.Dim = nil
	t.DataOffset = 0
}

func (t *MultiArrayLayout) GetTypeSupport() humble.MessageTypeSupport {
	return MultiArrayLayoutTypeSupport
}

// MultiArrayLayoutPublisher wraps humble.Publisher to provide type safe helper
// functions
type MultiArrayLayoutPublisher struct {
	*humble.Publisher
}

// NewMultiArrayLayoutPublisher creates and returns a new publisher for the
// MultiArrayLayout
func NewMultiArrayLayoutPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MultiArrayLayoutPublisher, error) {
	pub, err := node.NewPublisher(topicName, MultiArrayLayoutTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MultiArrayLayoutPublisher{pub}, nil
}

func (p *MultiArrayLayoutPublisher) Publish(msg *MultiArrayLayout) error {
	return p.Publisher.Publish(msg)
}

// MultiArrayLayoutSubscription wraps humble.Subscription to provide type safe helper
// functions
type MultiArrayLayoutSubscription struct {
	*humble.Subscription
}

// MultiArrayLayoutSubscriptionCallback type is used to provide a subscription
// handler function for a MultiArrayLayoutSubscription.
type MultiArrayLayoutSubscriptionCallback func(msg *MultiArrayLayout, info *humble.MessageInfo, err error)

// NewMultiArrayLayoutSubscription creates and returns a new subscription for the
// MultiArrayLayout
func NewMultiArrayLayoutSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MultiArrayLayoutSubscriptionCallback) (*MultiArrayLayoutSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MultiArrayLayout
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MultiArrayLayoutTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MultiArrayLayoutSubscription{sub}, nil
}

func (s *MultiArrayLayoutSubscription) TakeMessage(out *MultiArrayLayout) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMultiArrayLayoutSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMultiArrayLayoutSlice(dst, src []MultiArrayLayout) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MultiArrayLayoutTypeSupport humble.MessageTypeSupport = _MultiArrayLayoutTypeSupport{}

type _MultiArrayLayoutTypeSupport struct{}

func (t _MultiArrayLayoutTypeSupport) New() humble.Message {
	return NewMultiArrayLayout()
}

func (t _MultiArrayLayoutTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.std_msgs__msg__MultiArrayLayout
	return (unsafe.Pointer)(C.std_msgs__msg__MultiArrayLayout__create())
}

func (t _MultiArrayLayoutTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.std_msgs__msg__MultiArrayLayout__destroy((*C.std_msgs__msg__MultiArrayLayout)(pointer_to_free))
}

func (t _MultiArrayLayoutTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MultiArrayLayout)
	mem := (*C.std_msgs__msg__MultiArrayLayout)(dst)
	MultiArrayDimensionSequenceToC(&mem.dim, m.Dim)
	mem.data_offset = C.uint32_t(m.DataOffset)
}

func (t _MultiArrayLayoutTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MultiArrayLayout)
	mem := (*C.std_msgs__msg__MultiArrayLayout)(ros2_message_buffer)
	MultiArrayDimensionSequenceToGo(&m.Dim, mem.dim)
	m.DataOffset = uint32(mem.data_offset)
}

func (t _MultiArrayLayoutTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout())
}

type CMultiArrayLayout = C.std_msgs__msg__MultiArrayLayout
type CMultiArrayLayoutSequence = C.std_msgs__msg__MultiArrayLayout__Sequence

func MultiArrayLayoutSequenceToGo(goSlice *[]MultiArrayLayout, cSlice CMultiArrayLayoutSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MultiArrayLayout, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MultiArrayLayoutTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MultiArrayLayoutSequenceToC(cSlice *CMultiArrayLayoutSequence, goSlice []MultiArrayLayout) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.std_msgs__msg__MultiArrayLayout)(C.malloc(C.sizeof_struct_std_msgs__msg__MultiArrayLayout * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MultiArrayLayoutTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MultiArrayLayoutArrayToGo(goSlice []MultiArrayLayout, cSlice []CMultiArrayLayout) {
	for i := 0; i < len(cSlice); i++ {
		MultiArrayLayoutTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MultiArrayLayoutArrayToC(cSlice []CMultiArrayLayout, goSlice []MultiArrayLayout) {
	for i := 0; i < len(goSlice); i++ {
		MultiArrayLayoutTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

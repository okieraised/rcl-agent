// Code generated by ros2gen. DO NOT EDIT.

package std_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <std_msgs/msg/bool.h>

*/
import "C"

func init() {
	humble.RegisterMessage("std_msgs/Bool", BoolTypeSupport)
	humble.RegisterMessage("std_msgs/msg/Bool", BoolTypeSupport)
}

type Bool struct {
	Data bool `yaml:"data"`
}

// NewBool creates a new Bool with default values.
func NewBool() *Bool {
	self := Bool{}
	self.SetDefaults()
	return &self
}

func (t *Bool) Clone() *Bool {
	c := &Bool{}
	c.Data = t.Data
	return c
}

func (t *Bool) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Bool) SetDefaults() {
	t.Data = false
}

func (t *Bool) GetTypeSupport() humble.MessageTypeSupport {
	return BoolTypeSupport
}

// BoolPublisher wraps humble.Publisher to provide type safe helper
// functions
type BoolPublisher struct {
	*humble.Publisher
}

// NewBoolPublisher creates and returns a new publisher for the
// Bool
func NewBoolPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*BoolPublisher, error) {
	pub, err := node.NewPublisher(topicName, BoolTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &BoolPublisher{pub}, nil
}

func (p *BoolPublisher) Publish(msg *Bool) error {
	return p.Publisher.Publish(msg)
}

// BoolSubscription wraps humble.Subscription to provide type safe helper
// functions
type BoolSubscription struct {
	*humble.Subscription
}

// BoolSubscriptionCallback type is used to provide a subscription
// handler function for a BoolSubscription.
type BoolSubscriptionCallback func(msg *Bool, info *humble.MessageInfo, err error)

// NewBoolSubscription creates and returns a new subscription for the
// Bool
func NewBoolSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback BoolSubscriptionCallback) (*BoolSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Bool
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, BoolTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &BoolSubscription{sub}, nil
}

func (s *BoolSubscription) TakeMessage(out *Bool) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBoolSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBoolSlice(dst, src []Bool) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var BoolTypeSupport humble.MessageTypeSupport = _BoolTypeSupport{}

type _BoolTypeSupport struct{}

func (t _BoolTypeSupport) New() humble.Message {
	return NewBool()
}

func (t _BoolTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.std_msgs__msg__Bool
	return (unsafe.Pointer)(C.std_msgs__msg__Bool__create())
}

func (t _BoolTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.std_msgs__msg__Bool__destroy((*C.std_msgs__msg__Bool)(pointer_to_free))
}

func (t _BoolTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Bool)
	mem := (*C.std_msgs__msg__Bool)(dst)
	mem.data = C.bool(m.Data)
}

func (t _BoolTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Bool)
	mem := (*C.std_msgs__msg__Bool)(ros2_message_buffer)
	m.Data = bool(mem.data)
}

func (t _BoolTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Bool())
}

type CBool = C.std_msgs__msg__Bool
type CBoolSequence = C.std_msgs__msg__Bool__Sequence

func BoolSequenceToGo(goSlice *[]Bool, cSlice CBoolSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Bool, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		BoolTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func BoolSequenceToC(cSlice *CBoolSequence, goSlice []Bool) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.std_msgs__msg__Bool)(C.malloc(C.sizeof_struct_std_msgs__msg__Bool * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		BoolTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func BoolArrayToGo(goSlice []Bool, cSlice []CBool) {
	for i := 0; i < len(cSlice); i++ {
		BoolTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func BoolArrayToC(cSlice []CBool, goSlice []Bool) {
	for i := 0; i < len(goSlice); i++ {
		BoolTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package std_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <std_msgs/msg/byte_multi_array.h>

*/
import "C"

func init() {
	humble.RegisterMessage("std_msgs/ByteMultiArray", ByteMultiArrayTypeSupport)
	humble.RegisterMessage("std_msgs/msg/ByteMultiArray", ByteMultiArrayTypeSupport)
}

type ByteMultiArray struct {
	Layout MultiArrayLayout `yaml:"layout"` // specification of data layout
	Data   []byte           `yaml:"data"`   // array of data
}

// NewByteMultiArray creates a new ByteMultiArray with default values.
func NewByteMultiArray() *ByteMultiArray {
	self := ByteMultiArray{}
	self.SetDefaults()
	return &self
}

func (t *ByteMultiArray) Clone() *ByteMultiArray {
	c := &ByteMultiArray{}
	c.Layout = *t.Layout.Clone()
	if t.Data != nil {
		c.Data = make([]byte, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *ByteMultiArray) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ByteMultiArray) SetDefaults() {
	t.Layout.SetDefaults()
	t.Data = nil
}

func (t *ByteMultiArray) GetTypeSupport() humble.MessageTypeSupport {
	return ByteMultiArrayTypeSupport
}

// ByteMultiArrayPublisher wraps humble.Publisher to provide type safe helper
// functions
type ByteMultiArrayPublisher struct {
	*humble.Publisher
}

// NewByteMultiArrayPublisher creates and returns a new publisher for the
// ByteMultiArray
func NewByteMultiArrayPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ByteMultiArrayPublisher, error) {
	pub, err := node.NewPublisher(topicName, ByteMultiArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ByteMultiArrayPublisher{pub}, nil
}

func (p *ByteMultiArrayPublisher) Publish(msg *ByteMultiArray) error {
	return p.Publisher.Publish(msg)
}

// ByteMultiArraySubscription wraps humble.Subscription to provide type safe helper
// functions
type ByteMultiArraySubscription struct {
	*humble.Subscription
}

// ByteMultiArraySubscriptionCallback type is used to provide a subscription
// handler function for a ByteMultiArraySubscription.
type ByteMultiArraySubscriptionCallback func(msg *ByteMultiArray, info *humble.MessageInfo, err error)

// NewByteMultiArraySubscription creates and returns a new subscription for the
// ByteMultiArray
func NewByteMultiArraySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ByteMultiArraySubscriptionCallback) (*ByteMultiArraySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ByteMultiArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ByteMultiArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ByteMultiArraySubscription{sub}, nil
}

func (s *ByteMultiArraySubscription) TakeMessage(out *ByteMultiArray) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneByteMultiArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneByteMultiArraySlice(dst, src []ByteMultiArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ByteMultiArrayTypeSupport humble.MessageTypeSupport = _ByteMultiArrayTypeSupport{}

type _ByteMultiArrayTypeSupport struct{}

func (t _ByteMultiArrayTypeSupport) New() humble.Message {
	return NewByteMultiArray()
}

func (t _ByteMultiArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.std_msgs__msg__ByteMultiArray
	return (unsafe.Pointer)(C.std_msgs__msg__ByteMultiArray__create())
}

func (t _ByteMultiArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.std_msgs__msg__ByteMultiArray__destroy((*C.std_msgs__msg__ByteMultiArray)(pointer_to_free))
}

func (t _ByteMultiArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ByteMultiArray)
	mem := (*C.std_msgs__msg__ByteMultiArray)(dst)
	MultiArrayLayoutTypeSupport.AsCStruct(unsafe.Pointer(&mem.layout), &m.Layout)
	humble.ByteSequenceToC((*humble.CByteSequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _ByteMultiArrayTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ByteMultiArray)
	mem := (*C.std_msgs__msg__ByteMultiArray)(ros2_message_buffer)
	MultiArrayLayoutTypeSupport.AsGoStruct(&m.Layout, unsafe.Pointer(&mem.layout))
	humble.ByteSequenceToGo(&m.Data, *(*humble.CByteSequence)(unsafe.Pointer(&mem.data)))
}

func (t _ByteMultiArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ByteMultiArray())
}

type CByteMultiArray = C.std_msgs__msg__ByteMultiArray
type CByteMultiArraySequence = C.std_msgs__msg__ByteMultiArray__Sequence

func ByteMultiArraySequenceToGo(goSlice *[]ByteMultiArray, cSlice CByteMultiArraySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ByteMultiArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ByteMultiArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ByteMultiArraySequenceToC(cSlice *CByteMultiArraySequence, goSlice []ByteMultiArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.std_msgs__msg__ByteMultiArray)(C.malloc(C.sizeof_struct_std_msgs__msg__ByteMultiArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ByteMultiArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ByteMultiArrayArrayToGo(goSlice []ByteMultiArray, cSlice []CByteMultiArray) {
	for i := 0; i < len(cSlice); i++ {
		ByteMultiArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ByteMultiArrayArrayToC(cSlice []CByteMultiArray, goSlice []ByteMultiArray) {
	for i := 0; i < len(goSlice); i++ {
		ByteMultiArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

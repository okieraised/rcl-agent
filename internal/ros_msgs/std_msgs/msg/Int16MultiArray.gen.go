// Code generated by ros2gen. DO NOT EDIT.

package std_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <std_msgs/msg/int16_multi_array.h>

*/
import "C"

func init() {
	humble.RegisterMessage("std_msgs/Int16MultiArray", Int16MultiArrayTypeSupport)
	humble.RegisterMessage("std_msgs/msg/Int16MultiArray", Int16MultiArrayTypeSupport)
}

type Int16MultiArray struct {
	Layout MultiArrayLayout `yaml:"layout"` // specification of data layout
	Data   []int16          `yaml:"data"`   // array of data
}

// NewInt16MultiArray creates a new Int16MultiArray with default values.
func NewInt16MultiArray() *Int16MultiArray {
	self := Int16MultiArray{}
	self.SetDefaults()
	return &self
}

func (t *Int16MultiArray) Clone() *Int16MultiArray {
	c := &Int16MultiArray{}
	c.Layout = *t.Layout.Clone()
	if t.Data != nil {
		c.Data = make([]int16, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *Int16MultiArray) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Int16MultiArray) SetDefaults() {
	t.Layout.SetDefaults()
	t.Data = nil
}

func (t *Int16MultiArray) GetTypeSupport() humble.MessageTypeSupport {
	return Int16MultiArrayTypeSupport
}

// Int16MultiArrayPublisher wraps humble.Publisher to provide type safe helper
// functions
type Int16MultiArrayPublisher struct {
	*humble.Publisher
}

// NewInt16MultiArrayPublisher creates and returns a new publisher for the
// Int16MultiArray
func NewInt16MultiArrayPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Int16MultiArrayPublisher, error) {
	pub, err := node.NewPublisher(topicName, Int16MultiArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Int16MultiArrayPublisher{pub}, nil
}

func (p *Int16MultiArrayPublisher) Publish(msg *Int16MultiArray) error {
	return p.Publisher.Publish(msg)
}

// Int16MultiArraySubscription wraps humble.Subscription to provide type safe helper
// functions
type Int16MultiArraySubscription struct {
	*humble.Subscription
}

// Int16MultiArraySubscriptionCallback type is used to provide a subscription
// handler function for a Int16MultiArraySubscription.
type Int16MultiArraySubscriptionCallback func(msg *Int16MultiArray, info *humble.MessageInfo, err error)

// NewInt16MultiArraySubscription creates and returns a new subscription for the
// Int16MultiArray
func NewInt16MultiArraySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Int16MultiArraySubscriptionCallback) (*Int16MultiArraySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Int16MultiArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Int16MultiArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Int16MultiArraySubscription{sub}, nil
}

func (s *Int16MultiArraySubscription) TakeMessage(out *Int16MultiArray) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneInt16MultiArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneInt16MultiArraySlice(dst, src []Int16MultiArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Int16MultiArrayTypeSupport humble.MessageTypeSupport = _Int16MultiArrayTypeSupport{}

type _Int16MultiArrayTypeSupport struct{}

func (t _Int16MultiArrayTypeSupport) New() humble.Message {
	return NewInt16MultiArray()
}

func (t _Int16MultiArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.std_msgs__msg__Int16MultiArray
	return (unsafe.Pointer)(C.std_msgs__msg__Int16MultiArray__create())
}

func (t _Int16MultiArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.std_msgs__msg__Int16MultiArray__destroy((*C.std_msgs__msg__Int16MultiArray)(pointer_to_free))
}

func (t _Int16MultiArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Int16MultiArray)
	mem := (*C.std_msgs__msg__Int16MultiArray)(dst)
	MultiArrayLayoutTypeSupport.AsCStruct(unsafe.Pointer(&mem.layout), &m.Layout)
	humble.Int16SequenceToC((*humble.CInt16Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _Int16MultiArrayTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Int16MultiArray)
	mem := (*C.std_msgs__msg__Int16MultiArray)(ros2_message_buffer)
	MultiArrayLayoutTypeSupport.AsGoStruct(&m.Layout, unsafe.Pointer(&mem.layout))
	humble.Int16SequenceToGo(&m.Data, *(*humble.CInt16Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _Int16MultiArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int16MultiArray())
}

type CInt16MultiArray = C.std_msgs__msg__Int16MultiArray
type CInt16MultiArraySequence = C.std_msgs__msg__Int16MultiArray__Sequence

func Int16MultiArraySequenceToGo(goSlice *[]Int16MultiArray, cSlice CInt16MultiArraySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Int16MultiArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Int16MultiArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Int16MultiArraySequenceToC(cSlice *CInt16MultiArraySequence, goSlice []Int16MultiArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.std_msgs__msg__Int16MultiArray)(C.malloc(C.sizeof_struct_std_msgs__msg__Int16MultiArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Int16MultiArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Int16MultiArrayArrayToGo(goSlice []Int16MultiArray, cSlice []CInt16MultiArray) {
	for i := 0; i < len(cSlice); i++ {
		Int16MultiArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Int16MultiArrayArrayToC(cSlice []CInt16MultiArray, goSlice []Int16MultiArray) {
	for i := 0; i < len(goSlice); i++ {
		Int16MultiArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

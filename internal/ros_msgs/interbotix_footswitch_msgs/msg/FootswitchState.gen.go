// Code generated by ros2gen. DO NOT EDIT.

package interbotix_footswitch_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <interbotix_footswitch_msgs/msg/footswitch_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("interbotix_footswitch_msgs/FootswitchState", FootswitchStateTypeSupport)
	humble.RegisterMessage("interbotix_footswitch_msgs/msg/FootswitchState", FootswitchStateTypeSupport)
}

type FootswitchState struct {
	Header std_msgs_msg.Header `yaml:"header"`
	State  [3]bool             `yaml:"state"`
}

// NewFootswitchState creates a new FootswitchState with default values.
func NewFootswitchState() *FootswitchState {
	self := FootswitchState{}
	self.SetDefaults()
	return &self
}

func (t *FootswitchState) Clone() *FootswitchState {
	c := &FootswitchState{}
	c.Header = *t.Header.Clone()
	c.State = t.State
	return c
}

func (t *FootswitchState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *FootswitchState) SetDefaults() {
	t.Header.SetDefaults()
	t.State = [3]bool{}
}

func (t *FootswitchState) GetTypeSupport() humble.MessageTypeSupport {
	return FootswitchStateTypeSupport
}

// FootswitchStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type FootswitchStatePublisher struct {
	*humble.Publisher
}

// NewFootswitchStatePublisher creates and returns a new publisher for the
// FootswitchState
func NewFootswitchStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*FootswitchStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, FootswitchStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FootswitchStatePublisher{pub}, nil
}

func (p *FootswitchStatePublisher) Publish(msg *FootswitchState) error {
	return p.Publisher.Publish(msg)
}

// FootswitchStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type FootswitchStateSubscription struct {
	*humble.Subscription
}

// FootswitchStateSubscriptionCallback type is used to provide a subscription
// handler function for a FootswitchStateSubscription.
type FootswitchStateSubscriptionCallback func(msg *FootswitchState, info *humble.MessageInfo, err error)

// NewFootswitchStateSubscription creates and returns a new subscription for the
// FootswitchState
func NewFootswitchStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback FootswitchStateSubscriptionCallback) (*FootswitchStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg FootswitchState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, FootswitchStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FootswitchStateSubscription{sub}, nil
}

func (s *FootswitchStateSubscription) TakeMessage(out *FootswitchState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFootswitchStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFootswitchStateSlice(dst, src []FootswitchState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FootswitchStateTypeSupport humble.MessageTypeSupport = _FootswitchStateTypeSupport{}

type _FootswitchStateTypeSupport struct{}

func (t _FootswitchStateTypeSupport) New() humble.Message {
	return NewFootswitchState()
}

func (t _FootswitchStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.interbotix_footswitch_msgs__msg__FootswitchState
	return (unsafe.Pointer)(C.interbotix_footswitch_msgs__msg__FootswitchState__create())
}

func (t _FootswitchStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.interbotix_footswitch_msgs__msg__FootswitchState__destroy((*C.interbotix_footswitch_msgs__msg__FootswitchState)(pointer_to_free))
}

func (t _FootswitchStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*FootswitchState)
	mem := (*C.interbotix_footswitch_msgs__msg__FootswitchState)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	cSlice_state := mem.state[:]
	humble.BoolArrayToC(*(*[]humble.CBool)(unsafe.Pointer(&cSlice_state)), m.State[:])
}

func (t _FootswitchStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FootswitchState)
	mem := (*C.interbotix_footswitch_msgs__msg__FootswitchState)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	cSlice_state := mem.state[:]
	humble.BoolArrayToGo(m.State[:], *(*[]humble.CBool)(unsafe.Pointer(&cSlice_state)))
}

func (t _FootswitchStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__interbotix_footswitch_msgs__msg__FootswitchState())
}

type CFootswitchState = C.interbotix_footswitch_msgs__msg__FootswitchState
type CFootswitchStateSequence = C.interbotix_footswitch_msgs__msg__FootswitchState__Sequence

func FootswitchStateSequenceToGo(goSlice *[]FootswitchState, cSlice CFootswitchStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FootswitchState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FootswitchStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func FootswitchStateSequenceToC(cSlice *CFootswitchStateSequence, goSlice []FootswitchState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.interbotix_footswitch_msgs__msg__FootswitchState)(C.malloc(C.sizeof_struct_interbotix_footswitch_msgs__msg__FootswitchState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FootswitchStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func FootswitchStateArrayToGo(goSlice []FootswitchState, cSlice []CFootswitchState) {
	for i := 0; i < len(cSlice); i++ {
		FootswitchStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func FootswitchStateArrayToC(cSlice []CFootswitchState, goSlice []FootswitchState) {
	for i := 0; i < len(goSlice); i++ {
		FootswitchStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

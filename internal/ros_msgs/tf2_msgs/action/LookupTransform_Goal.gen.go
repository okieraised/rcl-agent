// Code generated by ros2gen. DO NOT EDIT.

package tf2_msgs_action

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <tf2_msgs/action/lookup_transform.h>

*/
import "C"

func init() {
	humble.RegisterMessage("tf2_msgs/LookupTransform_Goal", LookupTransform_GoalTypeSupport)
	humble.RegisterMessage("tf2_msgs/action/LookupTransform_Goal", LookupTransform_GoalTypeSupport)
}

type LookupTransform_Goal struct {
	TargetFrame string                          `yaml:"target_frame"` // Simple API
	SourceFrame string                          `yaml:"source_frame"`
	SourceTime  builtin_interfaces_msg.Time     `yaml:"source_time"`
	Timeout     builtin_interfaces_msg.Duration `yaml:"timeout"`
	TargetTime  builtin_interfaces_msg.Time     `yaml:"target_time"` // Advanced API
	FixedFrame  string                          `yaml:"fixed_frame"`
	Advanced    bool                            `yaml:"advanced"` // Whether or not to use the advanced API
}

// NewLookupTransform_Goal creates a new LookupTransform_Goal with default values.
func NewLookupTransform_Goal() *LookupTransform_Goal {
	self := LookupTransform_Goal{}
	self.SetDefaults()
	return &self
}

func (t *LookupTransform_Goal) Clone() *LookupTransform_Goal {
	c := &LookupTransform_Goal{}
	c.TargetFrame = t.TargetFrame
	c.SourceFrame = t.SourceFrame
	c.SourceTime = *t.SourceTime.Clone()
	c.Timeout = *t.Timeout.Clone()
	c.TargetTime = *t.TargetTime.Clone()
	c.FixedFrame = t.FixedFrame
	c.Advanced = t.Advanced
	return c
}

func (t *LookupTransform_Goal) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *LookupTransform_Goal) SetDefaults() {
	t.TargetFrame = ""
	t.SourceFrame = ""
	t.SourceTime.SetDefaults()
	t.Timeout.SetDefaults()
	t.TargetTime.SetDefaults()
	t.FixedFrame = ""
	t.Advanced = false
}

func (t *LookupTransform_Goal) GetTypeSupport() humble.MessageTypeSupport {
	return LookupTransform_GoalTypeSupport
}

// LookupTransform_GoalPublisher wraps humble.Publisher to provide type safe helper
// functions
type LookupTransform_GoalPublisher struct {
	*humble.Publisher
}

// NewLookupTransform_GoalPublisher creates and returns a new publisher for the
// LookupTransform_Goal
func NewLookupTransform_GoalPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*LookupTransform_GoalPublisher, error) {
	pub, err := node.NewPublisher(topicName, LookupTransform_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LookupTransform_GoalPublisher{pub}, nil
}

func (p *LookupTransform_GoalPublisher) Publish(msg *LookupTransform_Goal) error {
	return p.Publisher.Publish(msg)
}

// LookupTransform_GoalSubscription wraps humble.Subscription to provide type safe helper
// functions
type LookupTransform_GoalSubscription struct {
	*humble.Subscription
}

// LookupTransform_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a LookupTransform_GoalSubscription.
type LookupTransform_GoalSubscriptionCallback func(msg *LookupTransform_Goal, info *humble.MessageInfo, err error)

// NewLookupTransform_GoalSubscription creates and returns a new subscription for the
// LookupTransform_Goal
func NewLookupTransform_GoalSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback LookupTransform_GoalSubscriptionCallback) (*LookupTransform_GoalSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg LookupTransform_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, LookupTransform_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LookupTransform_GoalSubscription{sub}, nil
}

func (s *LookupTransform_GoalSubscription) TakeMessage(out *LookupTransform_Goal) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLookupTransform_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLookupTransform_GoalSlice(dst, src []LookupTransform_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LookupTransform_GoalTypeSupport humble.MessageTypeSupport = _LookupTransform_GoalTypeSupport{}

type _LookupTransform_GoalTypeSupport struct{}

func (t _LookupTransform_GoalTypeSupport) New() humble.Message {
	return NewLookupTransform_Goal()
}

func (t _LookupTransform_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.tf2_msgs__action__LookupTransform_Goal
	return (unsafe.Pointer)(C.tf2_msgs__action__LookupTransform_Goal__create())
}

func (t _LookupTransform_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.tf2_msgs__action__LookupTransform_Goal__destroy((*C.tf2_msgs__action__LookupTransform_Goal)(pointer_to_free))
}

func (t _LookupTransform_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*LookupTransform_Goal)
	mem := (*C.tf2_msgs__action__LookupTransform_Goal)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.target_frame), m.TargetFrame)
	humble.StringAsCStruct(unsafe.Pointer(&mem.source_frame), m.SourceFrame)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.source_time), &m.SourceTime)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.timeout), &m.Timeout)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.target_time), &m.TargetTime)
	humble.StringAsCStruct(unsafe.Pointer(&mem.fixed_frame), m.FixedFrame)
	mem.advanced = C.bool(m.Advanced)
}

func (t _LookupTransform_GoalTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LookupTransform_Goal)
	mem := (*C.tf2_msgs__action__LookupTransform_Goal)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.TargetFrame, unsafe.Pointer(&mem.target_frame))
	humble.StringAsGoStruct(&m.SourceFrame, unsafe.Pointer(&mem.source_frame))
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.SourceTime, unsafe.Pointer(&mem.source_time))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.Timeout, unsafe.Pointer(&mem.timeout))
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.TargetTime, unsafe.Pointer(&mem.target_time))
	humble.StringAsGoStruct(&m.FixedFrame, unsafe.Pointer(&mem.fixed_frame))
	m.Advanced = bool(mem.advanced)
}

func (t _LookupTransform_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__action__LookupTransform_Goal())
}

type CLookupTransform_Goal = C.tf2_msgs__action__LookupTransform_Goal
type CLookupTransform_GoalSequence = C.tf2_msgs__action__LookupTransform_Goal__Sequence

func LookupTransform_GoalSequenceToGo(goSlice *[]LookupTransform_Goal, cSlice CLookupTransform_GoalSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LookupTransform_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LookupTransform_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func LookupTransform_GoalSequenceToC(cSlice *CLookupTransform_GoalSequence, goSlice []LookupTransform_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.tf2_msgs__action__LookupTransform_Goal)(C.malloc(C.sizeof_struct_tf2_msgs__action__LookupTransform_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LookupTransform_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func LookupTransform_GoalArrayToGo(goSlice []LookupTransform_Goal, cSlice []CLookupTransform_Goal) {
	for i := 0; i < len(cSlice); i++ {
		LookupTransform_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func LookupTransform_GoalArrayToC(cSlice []CLookupTransform_Goal, goSlice []LookupTransform_Goal) {
	for i := 0; i < len(goSlice); i++ {
		LookupTransform_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

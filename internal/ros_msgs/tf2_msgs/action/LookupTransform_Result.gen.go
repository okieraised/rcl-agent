// Code generated by ros2gen. DO NOT EDIT.

package tf2_msgs_action

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	tf2_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/tf2_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <tf2_msgs/action/lookup_transform.h>

*/
import "C"

func init() {
	humble.RegisterMessage("tf2_msgs/LookupTransform_Result", LookupTransform_ResultTypeSupport)
	humble.RegisterMessage("tf2_msgs/action/LookupTransform_Result", LookupTransform_ResultTypeSupport)
}

type LookupTransform_Result struct {
	Transform geometry_msgs_msg.TransformStamped `yaml:"transform"`
	Error     tf2_msgs_msg.TF2Error              `yaml:"error"`
}

// NewLookupTransform_Result creates a new LookupTransform_Result with default values.
func NewLookupTransform_Result() *LookupTransform_Result {
	self := LookupTransform_Result{}
	self.SetDefaults()
	return &self
}

func (t *LookupTransform_Result) Clone() *LookupTransform_Result {
	c := &LookupTransform_Result{}
	c.Transform = *t.Transform.Clone()
	c.Error = *t.Error.Clone()
	return c
}

func (t *LookupTransform_Result) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *LookupTransform_Result) SetDefaults() {
	t.Transform.SetDefaults()
	t.Error.SetDefaults()
}

func (t *LookupTransform_Result) GetTypeSupport() humble.MessageTypeSupport {
	return LookupTransform_ResultTypeSupport
}

// LookupTransform_ResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type LookupTransform_ResultPublisher struct {
	*humble.Publisher
}

// NewLookupTransform_ResultPublisher creates and returns a new publisher for the
// LookupTransform_Result
func NewLookupTransform_ResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*LookupTransform_ResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, LookupTransform_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LookupTransform_ResultPublisher{pub}, nil
}

func (p *LookupTransform_ResultPublisher) Publish(msg *LookupTransform_Result) error {
	return p.Publisher.Publish(msg)
}

// LookupTransform_ResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type LookupTransform_ResultSubscription struct {
	*humble.Subscription
}

// LookupTransform_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a LookupTransform_ResultSubscription.
type LookupTransform_ResultSubscriptionCallback func(msg *LookupTransform_Result, info *humble.MessageInfo, err error)

// NewLookupTransform_ResultSubscription creates and returns a new subscription for the
// LookupTransform_Result
func NewLookupTransform_ResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback LookupTransform_ResultSubscriptionCallback) (*LookupTransform_ResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg LookupTransform_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, LookupTransform_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LookupTransform_ResultSubscription{sub}, nil
}

func (s *LookupTransform_ResultSubscription) TakeMessage(out *LookupTransform_Result) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLookupTransform_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLookupTransform_ResultSlice(dst, src []LookupTransform_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LookupTransform_ResultTypeSupport humble.MessageTypeSupport = _LookupTransform_ResultTypeSupport{}

type _LookupTransform_ResultTypeSupport struct{}

func (t _LookupTransform_ResultTypeSupport) New() humble.Message {
	return NewLookupTransform_Result()
}

func (t _LookupTransform_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.tf2_msgs__action__LookupTransform_Result
	return (unsafe.Pointer)(C.tf2_msgs__action__LookupTransform_Result__create())
}

func (t _LookupTransform_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.tf2_msgs__action__LookupTransform_Result__destroy((*C.tf2_msgs__action__LookupTransform_Result)(pointer_to_free))
}

func (t _LookupTransform_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*LookupTransform_Result)
	mem := (*C.tf2_msgs__action__LookupTransform_Result)(dst)
	geometry_msgs_msg.TransformStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.transform), &m.Transform)
	tf2_msgs_msg.TF2ErrorTypeSupport.AsCStruct(unsafe.Pointer(&mem.error), &m.Error)
}

func (t _LookupTransform_ResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LookupTransform_Result)
	mem := (*C.tf2_msgs__action__LookupTransform_Result)(ros2_message_buffer)
	geometry_msgs_msg.TransformStampedTypeSupport.AsGoStruct(&m.Transform, unsafe.Pointer(&mem.transform))
	tf2_msgs_msg.TF2ErrorTypeSupport.AsGoStruct(&m.Error, unsafe.Pointer(&mem.error))
}

func (t _LookupTransform_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__action__LookupTransform_Result())
}

type CLookupTransform_Result = C.tf2_msgs__action__LookupTransform_Result
type CLookupTransform_ResultSequence = C.tf2_msgs__action__LookupTransform_Result__Sequence

func LookupTransform_ResultSequenceToGo(goSlice *[]LookupTransform_Result, cSlice CLookupTransform_ResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LookupTransform_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LookupTransform_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func LookupTransform_ResultSequenceToC(cSlice *CLookupTransform_ResultSequence, goSlice []LookupTransform_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.tf2_msgs__action__LookupTransform_Result)(C.malloc(C.sizeof_struct_tf2_msgs__action__LookupTransform_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LookupTransform_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func LookupTransform_ResultArrayToGo(goSlice []LookupTransform_Result, cSlice []CLookupTransform_Result) {
	for i := 0; i < len(cSlice); i++ {
		LookupTransform_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func LookupTransform_ResultArrayToC(cSlice []CLookupTransform_Result, goSlice []LookupTransform_Result) {
	for i := 0; i < len(goSlice); i++ {
		LookupTransform_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

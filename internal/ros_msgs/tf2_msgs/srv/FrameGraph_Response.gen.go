// Code generated by ros2gen. DO NOT EDIT.

package tf2_msgs_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <tf2_msgs/srv/frame_graph.h>

*/
import "C"

func init() {
	humble.RegisterMessage("tf2_msgs/FrameGraph_Response", FrameGraph_ResponseTypeSupport)
	humble.RegisterMessage("tf2_msgs/srv/FrameGraph_Response", FrameGraph_ResponseTypeSupport)
}

type FrameGraph_Response struct {
	FrameYaml string `yaml:"frame_yaml"`
}

// NewFrameGraph_Response creates a new FrameGraph_Response with default values.
func NewFrameGraph_Response() *FrameGraph_Response {
	self := FrameGraph_Response{}
	self.SetDefaults()
	return &self
}

func (t *FrameGraph_Response) Clone() *FrameGraph_Response {
	c := &FrameGraph_Response{}
	c.FrameYaml = t.FrameYaml
	return c
}

func (t *FrameGraph_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *FrameGraph_Response) SetDefaults() {
	t.FrameYaml = ""
}

func (t *FrameGraph_Response) GetTypeSupport() humble.MessageTypeSupport {
	return FrameGraph_ResponseTypeSupport
}

// FrameGraph_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type FrameGraph_ResponsePublisher struct {
	*humble.Publisher
}

// NewFrameGraph_ResponsePublisher creates and returns a new publisher for the
// FrameGraph_Response
func NewFrameGraph_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*FrameGraph_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, FrameGraph_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FrameGraph_ResponsePublisher{pub}, nil
}

func (p *FrameGraph_ResponsePublisher) Publish(msg *FrameGraph_Response) error {
	return p.Publisher.Publish(msg)
}

// FrameGraph_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type FrameGraph_ResponseSubscription struct {
	*humble.Subscription
}

// FrameGraph_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a FrameGraph_ResponseSubscription.
type FrameGraph_ResponseSubscriptionCallback func(msg *FrameGraph_Response, info *humble.MessageInfo, err error)

// NewFrameGraph_ResponseSubscription creates and returns a new subscription for the
// FrameGraph_Response
func NewFrameGraph_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback FrameGraph_ResponseSubscriptionCallback) (*FrameGraph_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg FrameGraph_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, FrameGraph_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FrameGraph_ResponseSubscription{sub}, nil
}

func (s *FrameGraph_ResponseSubscription) TakeMessage(out *FrameGraph_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFrameGraph_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFrameGraph_ResponseSlice(dst, src []FrameGraph_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FrameGraph_ResponseTypeSupport humble.MessageTypeSupport = _FrameGraph_ResponseTypeSupport{}

type _FrameGraph_ResponseTypeSupport struct{}

func (t _FrameGraph_ResponseTypeSupport) New() humble.Message {
	return NewFrameGraph_Response()
}

func (t _FrameGraph_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.tf2_msgs__srv__FrameGraph_Response
	return (unsafe.Pointer)(C.tf2_msgs__srv__FrameGraph_Response__create())
}

func (t _FrameGraph_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.tf2_msgs__srv__FrameGraph_Response__destroy((*C.tf2_msgs__srv__FrameGraph_Response)(pointer_to_free))
}

func (t _FrameGraph_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*FrameGraph_Response)
	mem := (*C.tf2_msgs__srv__FrameGraph_Response)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.frame_yaml), m.FrameYaml)
}

func (t _FrameGraph_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FrameGraph_Response)
	mem := (*C.tf2_msgs__srv__FrameGraph_Response)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.FrameYaml, unsafe.Pointer(&mem.frame_yaml))
}

func (t _FrameGraph_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__srv__FrameGraph_Response())
}

type CFrameGraph_Response = C.tf2_msgs__srv__FrameGraph_Response
type CFrameGraph_ResponseSequence = C.tf2_msgs__srv__FrameGraph_Response__Sequence

func FrameGraph_ResponseSequenceToGo(goSlice *[]FrameGraph_Response, cSlice CFrameGraph_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FrameGraph_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FrameGraph_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func FrameGraph_ResponseSequenceToC(cSlice *CFrameGraph_ResponseSequence, goSlice []FrameGraph_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.tf2_msgs__srv__FrameGraph_Response)(C.malloc(C.sizeof_struct_tf2_msgs__srv__FrameGraph_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FrameGraph_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func FrameGraph_ResponseArrayToGo(goSlice []FrameGraph_Response, cSlice []CFrameGraph_Response) {
	for i := 0; i < len(cSlice); i++ {
		FrameGraph_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func FrameGraph_ResponseArrayToC(cSlice []CFrameGraph_Response, goSlice []FrameGraph_Response) {
	for i := 0; i < len(goSlice); i++ {
		FrameGraph_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

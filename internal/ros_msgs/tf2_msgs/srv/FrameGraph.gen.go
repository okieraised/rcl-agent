// Code generated by ros2gen. DO NOT EDIT.

package tf2_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <tf2_msgs/srv/frame_graph.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("tf2_msgs/FrameGraph", FrameGraphTypeSupport)
	humble.RegisterService("tf2_msgs/srv/FrameGraph", FrameGraphTypeSupport)
}

type _FrameGraphTypeSupport struct{}

func (s _FrameGraphTypeSupport) Request() humble.MessageTypeSupport {
	return FrameGraph_RequestTypeSupport
}

func (s _FrameGraphTypeSupport) Response() humble.MessageTypeSupport {
	return FrameGraph_ResponseTypeSupport
}

func (s _FrameGraphTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__tf2_msgs__srv__FrameGraph())
}

// Modifying this variable is undefined behavior.
var FrameGraphTypeSupport humble.ServiceTypeSupport = _FrameGraphTypeSupport{}

// FrameGraphClient wraps humble.Client to provide type safe helper
// functions
type FrameGraphClient struct {
	*humble.Client
}

// NewFrameGraphClient creates and returns a new client for the
// FrameGraph
func NewFrameGraphClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*FrameGraphClient, error) {
	client, err := node.NewClient(serviceName, FrameGraphTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FrameGraphClient{client}, nil
}

func (s *FrameGraphClient) Send(ctx context.Context, req *FrameGraph_Request) (*FrameGraph_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*FrameGraph_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type FrameGraphServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s FrameGraphServiceResponseSender) SendResponse(resp *FrameGraph_Response) error {
	return s.sender.SendResponse(resp)
}

type FrameGraphServiceRequestHandler func(*humble.ServiceInfo, *FrameGraph_Request, FrameGraphServiceResponseSender)

// FrameGraphService wraps humble.Service to provide type safe helper
// functions
type FrameGraphService struct {
	*humble.Service
}

// NewFrameGraphService creates and returns a new service for the
// FrameGraph
func NewFrameGraphService(node *humble.Node, name string, options *humble.ServiceOptions, handler FrameGraphServiceRequestHandler) (*FrameGraphService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*FrameGraph_Request)
		responseSender := FrameGraphServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, FrameGraphTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &FrameGraphService{service}, nil
}

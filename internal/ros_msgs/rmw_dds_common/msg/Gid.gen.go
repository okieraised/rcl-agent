// Code generated by ros2gen. DO NOT EDIT.

package rmw_dds_common_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rmw_dds_common/msg/gid.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rmw_dds_common/Gid", GidTypeSupport)
	humble.RegisterMessage("rmw_dds_common/msg/Gid", GidTypeSupport)
}

type Gid struct {
	Data [24]byte `yaml:"data"`
}

// NewGid creates a new Gid with default values.
func NewGid() *Gid {
	self := Gid{}
	self.SetDefaults()
	return &self
}

func (t *Gid) Clone() *Gid {
	c := &Gid{}
	c.Data = t.Data
	return c
}

func (t *Gid) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Gid) SetDefaults() {
	t.Data = [24]byte{}
}

func (t *Gid) GetTypeSupport() humble.MessageTypeSupport {
	return GidTypeSupport
}

// GidPublisher wraps humble.Publisher to provide type safe helper
// functions
type GidPublisher struct {
	*humble.Publisher
}

// NewGidPublisher creates and returns a new publisher for the
// Gid
func NewGidPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GidPublisher, error) {
	pub, err := node.NewPublisher(topicName, GidTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GidPublisher{pub}, nil
}

func (p *GidPublisher) Publish(msg *Gid) error {
	return p.Publisher.Publish(msg)
}

// GidSubscription wraps humble.Subscription to provide type safe helper
// functions
type GidSubscription struct {
	*humble.Subscription
}

// GidSubscriptionCallback type is used to provide a subscription
// handler function for a GidSubscription.
type GidSubscriptionCallback func(msg *Gid, info *humble.MessageInfo, err error)

// NewGidSubscription creates and returns a new subscription for the
// Gid
func NewGidSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GidSubscriptionCallback) (*GidSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Gid
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GidTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GidSubscription{sub}, nil
}

func (s *GidSubscription) TakeMessage(out *Gid) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGidSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGidSlice(dst, src []Gid) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GidTypeSupport humble.MessageTypeSupport = _GidTypeSupport{}

type _GidTypeSupport struct{}

func (t _GidTypeSupport) New() humble.Message {
	return NewGid()
}

func (t _GidTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rmw_dds_common__msg__Gid
	return (unsafe.Pointer)(C.rmw_dds_common__msg__Gid__create())
}

func (t _GidTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rmw_dds_common__msg__Gid__destroy((*C.rmw_dds_common__msg__Gid)(pointer_to_free))
}

func (t _GidTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Gid)
	mem := (*C.rmw_dds_common__msg__Gid)(dst)
	cSlice_data := mem.data[:]
	humble.CharArrayToC(*(*[]humble.CChar)(unsafe.Pointer(&cSlice_data)), m.Data[:])
}

func (t _GidTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Gid)
	mem := (*C.rmw_dds_common__msg__Gid)(ros2_message_buffer)
	cSlice_data := mem.data[:]
	humble.CharArrayToGo(m.Data[:], *(*[]humble.CChar)(unsafe.Pointer(&cSlice_data)))
}

func (t _GidTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rmw_dds_common__msg__Gid())
}

type CGid = C.rmw_dds_common__msg__Gid
type CGidSequence = C.rmw_dds_common__msg__Gid__Sequence

func GidSequenceToGo(goSlice *[]Gid, cSlice CGidSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Gid, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GidTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GidSequenceToC(cSlice *CGidSequence, goSlice []Gid) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rmw_dds_common__msg__Gid)(C.malloc(C.sizeof_struct_rmw_dds_common__msg__Gid * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GidTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GidArrayToGo(goSlice []Gid, cSlice []CGid) {
	for i := 0; i < len(cSlice); i++ {
		GidTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GidArrayToC(cSlice []CGid, goSlice []Gid) {
	for i := 0; i < len(goSlice); i++ {
		GidTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

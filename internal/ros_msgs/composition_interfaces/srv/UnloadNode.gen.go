// Code generated by ros2gen. DO NOT EDIT.

package composition_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <composition_interfaces/srv/unload_node.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("composition_interfaces/UnloadNode", UnloadNodeTypeSupport)
	humble.RegisterService("composition_interfaces/srv/UnloadNode", UnloadNodeTypeSupport)
}

type _UnloadNodeTypeSupport struct {}

func (s _UnloadNodeTypeSupport) Request() humble.MessageTypeSupport {
	return UnloadNode_RequestTypeSupport
}

func (s _UnloadNodeTypeSupport) Response() humble.MessageTypeSupport {
	return UnloadNode_ResponseTypeSupport
}

func (s _UnloadNodeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__composition_interfaces__srv__UnloadNode())
}

// Modifying this variable is undefined behavior.
var UnloadNodeTypeSupport humble.ServiceTypeSupport = _UnloadNodeTypeSupport{}

// UnloadNodeClient wraps humble.Client to provide type safe helper
// functions
type UnloadNodeClient struct {
	*humble.Client
}

// NewUnloadNodeClient creates and returns a new client for the
// UnloadNode
func NewUnloadNodeClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*UnloadNodeClient, error) {
	client, err := node.NewClient(serviceName, UnloadNodeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UnloadNodeClient{client}, nil
}

func (s *UnloadNodeClient) Send(ctx context.Context, req *UnloadNode_Request) (*UnloadNode_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*UnloadNode_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type UnloadNodeServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s UnloadNodeServiceResponseSender) SendResponse(resp *UnloadNode_Response) error {
	return s.sender.SendResponse(resp)
}

type UnloadNodeServiceRequestHandler func(*humble.ServiceInfo, *UnloadNode_Request, UnloadNodeServiceResponseSender)

// UnloadNodeService wraps humble.Service to provide type safe helper
// functions
type UnloadNodeService struct {
	*humble.Service
}

// NewUnloadNodeService creates and returns a new service for the
// UnloadNode
func NewUnloadNodeService(node *humble.Node, name string, options *humble.ServiceOptions, handler UnloadNodeServiceRequestHandler) (*UnloadNodeService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*UnloadNode_Request)
		responseSender := UnloadNodeServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, UnloadNodeTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &UnloadNodeService{service}, nil
}
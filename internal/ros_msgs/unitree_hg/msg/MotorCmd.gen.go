// Code generated by ros2gen. DO NOT EDIT.

package unitree_hg_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_hg/msg/motor_cmd.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_hg/MotorCmd", MotorCmdTypeSupport)
	humble.RegisterMessage("unitree_hg/msg/MotorCmd", MotorCmdTypeSupport)
}

type MotorCmd struct {
	Mode    uint8   `yaml:"mode"`
	Q       float32 `yaml:"q"`
	Dq      float32 `yaml:"dq"`
	Tau     float32 `yaml:"tau"`
	Kp      float32 `yaml:"kp"`
	Kd      float32 `yaml:"kd"`
	Reserve uint32  `yaml:"reserve"`
}

// NewMotorCmd creates a new MotorCmd with default values.
func NewMotorCmd() *MotorCmd {
	self := MotorCmd{}
	self.SetDefaults()
	return &self
}

func (t *MotorCmd) Clone() *MotorCmd {
	c := &MotorCmd{}
	c.Mode = t.Mode
	c.Q = t.Q
	c.Dq = t.Dq
	c.Tau = t.Tau
	c.Kp = t.Kp
	c.Kd = t.Kd
	c.Reserve = t.Reserve
	return c
}

func (t *MotorCmd) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MotorCmd) SetDefaults() {
	t.Mode = 0
	t.Q = 0
	t.Dq = 0
	t.Tau = 0
	t.Kp = 0
	t.Kd = 0
	t.Reserve = 0
}

func (t *MotorCmd) GetTypeSupport() humble.MessageTypeSupport {
	return MotorCmdTypeSupport
}

// MotorCmdPublisher wraps humble.Publisher to provide type safe helper
// functions
type MotorCmdPublisher struct {
	*humble.Publisher
}

// NewMotorCmdPublisher creates and returns a new publisher for the
// MotorCmd
func NewMotorCmdPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MotorCmdPublisher, error) {
	pub, err := node.NewPublisher(topicName, MotorCmdTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MotorCmdPublisher{pub}, nil
}

func (p *MotorCmdPublisher) Publish(msg *MotorCmd) error {
	return p.Publisher.Publish(msg)
}

// MotorCmdSubscription wraps humble.Subscription to provide type safe helper
// functions
type MotorCmdSubscription struct {
	*humble.Subscription
}

// MotorCmdSubscriptionCallback type is used to provide a subscription
// handler function for a MotorCmdSubscription.
type MotorCmdSubscriptionCallback func(msg *MotorCmd, info *humble.MessageInfo, err error)

// NewMotorCmdSubscription creates and returns a new subscription for the
// MotorCmd
func NewMotorCmdSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MotorCmdSubscriptionCallback) (*MotorCmdSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MotorCmd
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MotorCmdTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MotorCmdSubscription{sub}, nil
}

func (s *MotorCmdSubscription) TakeMessage(out *MotorCmd) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMotorCmdSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMotorCmdSlice(dst, src []MotorCmd) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MotorCmdTypeSupport humble.MessageTypeSupport = _MotorCmdTypeSupport{}

type _MotorCmdTypeSupport struct{}

func (t _MotorCmdTypeSupport) New() humble.Message {
	return NewMotorCmd()
}

func (t _MotorCmdTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_hg__msg__MotorCmd
	return (unsafe.Pointer)(C.unitree_hg__msg__MotorCmd__create())
}

func (t _MotorCmdTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_hg__msg__MotorCmd__destroy((*C.unitree_hg__msg__MotorCmd)(pointer_to_free))
}

func (t _MotorCmdTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MotorCmd)
	mem := (*C.unitree_hg__msg__MotorCmd)(dst)
	mem.mode = C.uint8_t(m.Mode)
	mem.q = C.float(m.Q)
	mem.dq = C.float(m.Dq)
	mem.tau = C.float(m.Tau)
	mem.kp = C.float(m.Kp)
	mem.kd = C.float(m.Kd)
	mem.reserve = C.uint32_t(m.Reserve)
}

func (t _MotorCmdTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MotorCmd)
	mem := (*C.unitree_hg__msg__MotorCmd)(ros2_message_buffer)
	m.Mode = uint8(mem.mode)
	m.Q = float32(mem.q)
	m.Dq = float32(mem.dq)
	m.Tau = float32(mem.tau)
	m.Kp = float32(mem.kp)
	m.Kd = float32(mem.kd)
	m.Reserve = uint32(mem.reserve)
}

func (t _MotorCmdTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_hg__msg__MotorCmd())
}

type CMotorCmd = C.unitree_hg__msg__MotorCmd
type CMotorCmdSequence = C.unitree_hg__msg__MotorCmd__Sequence

func MotorCmdSequenceToGo(goSlice *[]MotorCmd, cSlice CMotorCmdSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MotorCmd, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MotorCmdTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MotorCmdSequenceToC(cSlice *CMotorCmdSequence, goSlice []MotorCmd) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_hg__msg__MotorCmd)(C.malloc(C.sizeof_struct_unitree_hg__msg__MotorCmd * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MotorCmdTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MotorCmdArrayToGo(goSlice []MotorCmd, cSlice []CMotorCmd) {
	for i := 0; i < len(cSlice); i++ {
		MotorCmdTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MotorCmdArrayToC(cSlice []CMotorCmd, goSlice []MotorCmd) {
	for i := 0; i < len(goSlice); i++ {
		MotorCmdTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

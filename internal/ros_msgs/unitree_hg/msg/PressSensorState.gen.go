// Code generated by ros2gen. DO NOT EDIT.

package unitree_hg_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_hg/msg/press_sensor_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_hg/PressSensorState", PressSensorStateTypeSupport)
	humble.RegisterMessage("unitree_hg/msg/PressSensorState", PressSensorStateTypeSupport)
}

type PressSensorState struct {
	Pressure    [12]float32 `yaml:"pressure"`
	Temperature [12]float32 `yaml:"temperature"`
}

// NewPressSensorState creates a new PressSensorState with default values.
func NewPressSensorState() *PressSensorState {
	self := PressSensorState{}
	self.SetDefaults()
	return &self
}

func (t *PressSensorState) Clone() *PressSensorState {
	c := &PressSensorState{}
	c.Pressure = t.Pressure
	c.Temperature = t.Temperature
	return c
}

func (t *PressSensorState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PressSensorState) SetDefaults() {
	t.Pressure = [12]float32{}
	t.Temperature = [12]float32{}
}

func (t *PressSensorState) GetTypeSupport() humble.MessageTypeSupport {
	return PressSensorStateTypeSupport
}

// PressSensorStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type PressSensorStatePublisher struct {
	*humble.Publisher
}

// NewPressSensorStatePublisher creates and returns a new publisher for the
// PressSensorState
func NewPressSensorStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PressSensorStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, PressSensorStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PressSensorStatePublisher{pub}, nil
}

func (p *PressSensorStatePublisher) Publish(msg *PressSensorState) error {
	return p.Publisher.Publish(msg)
}

// PressSensorStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type PressSensorStateSubscription struct {
	*humble.Subscription
}

// PressSensorStateSubscriptionCallback type is used to provide a subscription
// handler function for a PressSensorStateSubscription.
type PressSensorStateSubscriptionCallback func(msg *PressSensorState, info *humble.MessageInfo, err error)

// NewPressSensorStateSubscription creates and returns a new subscription for the
// PressSensorState
func NewPressSensorStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PressSensorStateSubscriptionCallback) (*PressSensorStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PressSensorState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PressSensorStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PressSensorStateSubscription{sub}, nil
}

func (s *PressSensorStateSubscription) TakeMessage(out *PressSensorState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePressSensorStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePressSensorStateSlice(dst, src []PressSensorState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PressSensorStateTypeSupport humble.MessageTypeSupport = _PressSensorStateTypeSupport{}

type _PressSensorStateTypeSupport struct{}

func (t _PressSensorStateTypeSupport) New() humble.Message {
	return NewPressSensorState()
}

func (t _PressSensorStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_hg__msg__PressSensorState
	return (unsafe.Pointer)(C.unitree_hg__msg__PressSensorState__create())
}

func (t _PressSensorStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_hg__msg__PressSensorState__destroy((*C.unitree_hg__msg__PressSensorState)(pointer_to_free))
}

func (t _PressSensorStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PressSensorState)
	mem := (*C.unitree_hg__msg__PressSensorState)(dst)
	cSlice_pressure := mem.pressure[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_pressure)), m.Pressure[:])
	cSlice_temperature := mem.temperature[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_temperature)), m.Temperature[:])
}

func (t _PressSensorStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PressSensorState)
	mem := (*C.unitree_hg__msg__PressSensorState)(ros2_message_buffer)
	cSlice_pressure := mem.pressure[:]
	humble.Float32ArrayToGo(m.Pressure[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_pressure)))
	cSlice_temperature := mem.temperature[:]
	humble.Float32ArrayToGo(m.Temperature[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_temperature)))
}

func (t _PressSensorStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_hg__msg__PressSensorState())
}

type CPressSensorState = C.unitree_hg__msg__PressSensorState
type CPressSensorStateSequence = C.unitree_hg__msg__PressSensorState__Sequence

func PressSensorStateSequenceToGo(goSlice *[]PressSensorState, cSlice CPressSensorStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PressSensorState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PressSensorStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PressSensorStateSequenceToC(cSlice *CPressSensorStateSequence, goSlice []PressSensorState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_hg__msg__PressSensorState)(C.malloc(C.sizeof_struct_unitree_hg__msg__PressSensorState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PressSensorStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PressSensorStateArrayToGo(goSlice []PressSensorState, cSlice []CPressSensorState) {
	for i := 0; i < len(cSlice); i++ {
		PressSensorStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PressSensorStateArrayToC(cSlice []CPressSensorState, goSlice []PressSensorState) {
	for i := 0; i < len(goSlice); i++ {
		PressSensorStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

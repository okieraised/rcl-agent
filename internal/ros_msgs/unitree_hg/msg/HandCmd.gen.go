// Code generated by ros2gen. DO NOT EDIT.

package unitree_hg_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_hg/msg/hand_cmd.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_hg/HandCmd", HandCmdTypeSupport)
	humble.RegisterMessage("unitree_hg/msg/HandCmd", HandCmdTypeSupport)
}

type HandCmd struct {
	MotorCmd []MotorCmd `yaml:"motor_cmd"`
}

// NewHandCmd creates a new HandCmd with default values.
func NewHandCmd() *HandCmd {
	self := HandCmd{}
	self.SetDefaults()
	return &self
}

func (t *HandCmd) Clone() *HandCmd {
	c := &HandCmd{}
	if t.MotorCmd != nil {
		c.MotorCmd = make([]MotorCmd, len(t.MotorCmd))
		CloneMotorCmdSlice(c.MotorCmd, t.MotorCmd)
	}
	return c
}

func (t *HandCmd) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *HandCmd) SetDefaults() {
	t.MotorCmd = nil
}

func (t *HandCmd) GetTypeSupport() humble.MessageTypeSupport {
	return HandCmdTypeSupport
}

// HandCmdPublisher wraps humble.Publisher to provide type safe helper
// functions
type HandCmdPublisher struct {
	*humble.Publisher
}

// NewHandCmdPublisher creates and returns a new publisher for the
// HandCmd
func NewHandCmdPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*HandCmdPublisher, error) {
	pub, err := node.NewPublisher(topicName, HandCmdTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HandCmdPublisher{pub}, nil
}

func (p *HandCmdPublisher) Publish(msg *HandCmd) error {
	return p.Publisher.Publish(msg)
}

// HandCmdSubscription wraps humble.Subscription to provide type safe helper
// functions
type HandCmdSubscription struct {
	*humble.Subscription
}

// HandCmdSubscriptionCallback type is used to provide a subscription
// handler function for a HandCmdSubscription.
type HandCmdSubscriptionCallback func(msg *HandCmd, info *humble.MessageInfo, err error)

// NewHandCmdSubscription creates and returns a new subscription for the
// HandCmd
func NewHandCmdSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback HandCmdSubscriptionCallback) (*HandCmdSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg HandCmd
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, HandCmdTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HandCmdSubscription{sub}, nil
}

func (s *HandCmdSubscription) TakeMessage(out *HandCmd) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHandCmdSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHandCmdSlice(dst, src []HandCmd) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HandCmdTypeSupport humble.MessageTypeSupport = _HandCmdTypeSupport{}

type _HandCmdTypeSupport struct{}

func (t _HandCmdTypeSupport) New() humble.Message {
	return NewHandCmd()
}

func (t _HandCmdTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_hg__msg__HandCmd
	return (unsafe.Pointer)(C.unitree_hg__msg__HandCmd__create())
}

func (t _HandCmdTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_hg__msg__HandCmd__destroy((*C.unitree_hg__msg__HandCmd)(pointer_to_free))
}

func (t _HandCmdTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*HandCmd)
	mem := (*C.unitree_hg__msg__HandCmd)(dst)
	MotorCmdSequenceToC(&mem.motor_cmd, m.MotorCmd)
}

func (t _HandCmdTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HandCmd)
	mem := (*C.unitree_hg__msg__HandCmd)(ros2_message_buffer)
	MotorCmdSequenceToGo(&m.MotorCmd, mem.motor_cmd)
}

func (t _HandCmdTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_hg__msg__HandCmd())
}

type CHandCmd = C.unitree_hg__msg__HandCmd
type CHandCmdSequence = C.unitree_hg__msg__HandCmd__Sequence

func HandCmdSequenceToGo(goSlice *[]HandCmd, cSlice CHandCmdSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HandCmd, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HandCmdTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func HandCmdSequenceToC(cSlice *CHandCmdSequence, goSlice []HandCmd) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_hg__msg__HandCmd)(C.malloc(C.sizeof_struct_unitree_hg__msg__HandCmd * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HandCmdTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func HandCmdArrayToGo(goSlice []HandCmd, cSlice []CHandCmd) {
	for i := 0; i < len(cSlice); i++ {
		HandCmdTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func HandCmdArrayToC(cSlice []CHandCmd, goSlice []HandCmd) {
	for i := 0; i < len(goSlice); i++ {
		HandCmdTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

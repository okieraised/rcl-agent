// Code generated by ros2gen. DO NOT EDIT.

package unitree_hg_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_hg/msg/motor_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_hg/MotorState", MotorStateTypeSupport)
	humble.RegisterMessage("unitree_hg/msg/MotorState", MotorStateTypeSupport)
}

type MotorState struct {
	Mode        uint8     `yaml:"mode"`
	Q           float32   `yaml:"q"`
	Dq          float32   `yaml:"dq"`
	Ddq         float32   `yaml:"ddq"`
	TauEst      float32   `yaml:"tau_est"`
	Temperature [2]int16  `yaml:"temperature"`
	Vol         float32   `yaml:"vol"`
	Sensor      [2]uint32 `yaml:"sensor"`
	Motorstate  uint32    `yaml:"motorstate"`
	Reserve     [4]uint32 `yaml:"reserve"`
}

// NewMotorState creates a new MotorState with default values.
func NewMotorState() *MotorState {
	self := MotorState{}
	self.SetDefaults()
	return &self
}

func (t *MotorState) Clone() *MotorState {
	c := &MotorState{}
	c.Mode = t.Mode
	c.Q = t.Q
	c.Dq = t.Dq
	c.Ddq = t.Ddq
	c.TauEst = t.TauEst
	c.Temperature = t.Temperature
	c.Vol = t.Vol
	c.Sensor = t.Sensor
	c.Motorstate = t.Motorstate
	c.Reserve = t.Reserve
	return c
}

func (t *MotorState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MotorState) SetDefaults() {
	t.Mode = 0
	t.Q = 0
	t.Dq = 0
	t.Ddq = 0
	t.TauEst = 0
	t.Temperature = [2]int16{}
	t.Vol = 0
	t.Sensor = [2]uint32{}
	t.Motorstate = 0
	t.Reserve = [4]uint32{}
}

func (t *MotorState) GetTypeSupport() humble.MessageTypeSupport {
	return MotorStateTypeSupport
}

// MotorStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type MotorStatePublisher struct {
	*humble.Publisher
}

// NewMotorStatePublisher creates and returns a new publisher for the
// MotorState
func NewMotorStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MotorStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, MotorStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MotorStatePublisher{pub}, nil
}

func (p *MotorStatePublisher) Publish(msg *MotorState) error {
	return p.Publisher.Publish(msg)
}

// MotorStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type MotorStateSubscription struct {
	*humble.Subscription
}

// MotorStateSubscriptionCallback type is used to provide a subscription
// handler function for a MotorStateSubscription.
type MotorStateSubscriptionCallback func(msg *MotorState, info *humble.MessageInfo, err error)

// NewMotorStateSubscription creates and returns a new subscription for the
// MotorState
func NewMotorStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MotorStateSubscriptionCallback) (*MotorStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MotorState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MotorStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MotorStateSubscription{sub}, nil
}

func (s *MotorStateSubscription) TakeMessage(out *MotorState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMotorStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMotorStateSlice(dst, src []MotorState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MotorStateTypeSupport humble.MessageTypeSupport = _MotorStateTypeSupport{}

type _MotorStateTypeSupport struct{}

func (t _MotorStateTypeSupport) New() humble.Message {
	return NewMotorState()
}

func (t _MotorStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_hg__msg__MotorState
	return (unsafe.Pointer)(C.unitree_hg__msg__MotorState__create())
}

func (t _MotorStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_hg__msg__MotorState__destroy((*C.unitree_hg__msg__MotorState)(pointer_to_free))
}

func (t _MotorStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MotorState)
	mem := (*C.unitree_hg__msg__MotorState)(dst)
	mem.mode = C.uint8_t(m.Mode)
	mem.q = C.float(m.Q)
	mem.dq = C.float(m.Dq)
	mem.ddq = C.float(m.Ddq)
	mem.tau_est = C.float(m.TauEst)
	cSlice_temperature := mem.temperature[:]
	humble.Int16ArrayToC(*(*[]humble.CInt16)(unsafe.Pointer(&cSlice_temperature)), m.Temperature[:])
	mem.vol = C.float(m.Vol)
	cSlice_sensor := mem.sensor[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_sensor)), m.Sensor[:])
	mem.motorstate = C.uint32_t(m.Motorstate)
	cSlice_reserve := mem.reserve[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_reserve)), m.Reserve[:])
}

func (t _MotorStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MotorState)
	mem := (*C.unitree_hg__msg__MotorState)(ros2_message_buffer)
	m.Mode = uint8(mem.mode)
	m.Q = float32(mem.q)
	m.Dq = float32(mem.dq)
	m.Ddq = float32(mem.ddq)
	m.TauEst = float32(mem.tau_est)
	cSlice_temperature := mem.temperature[:]
	humble.Int16ArrayToGo(m.Temperature[:], *(*[]humble.CInt16)(unsafe.Pointer(&cSlice_temperature)))
	m.Vol = float32(mem.vol)
	cSlice_sensor := mem.sensor[:]
	humble.Uint32ArrayToGo(m.Sensor[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_sensor)))
	m.Motorstate = uint32(mem.motorstate)
	cSlice_reserve := mem.reserve[:]
	humble.Uint32ArrayToGo(m.Reserve[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_reserve)))
}

func (t _MotorStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_hg__msg__MotorState())
}

type CMotorState = C.unitree_hg__msg__MotorState
type CMotorStateSequence = C.unitree_hg__msg__MotorState__Sequence

func MotorStateSequenceToGo(goSlice *[]MotorState, cSlice CMotorStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MotorState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MotorStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MotorStateSequenceToC(cSlice *CMotorStateSequence, goSlice []MotorState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_hg__msg__MotorState)(C.malloc(C.sizeof_struct_unitree_hg__msg__MotorState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MotorStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MotorStateArrayToGo(goSlice []MotorState, cSlice []CMotorState) {
	for i := 0; i < len(cSlice); i++ {
		MotorStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MotorStateArrayToC(cSlice []CMotorState, goSlice []MotorState) {
	for i := 0; i < len(goSlice); i++ {
		MotorStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

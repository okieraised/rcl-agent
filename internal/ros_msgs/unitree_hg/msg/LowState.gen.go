// Code generated by ros2gen. DO NOT EDIT.

package unitree_hg_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_hg/msg/low_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_hg/LowState", LowStateTypeSupport)
	humble.RegisterMessage("unitree_hg/msg/LowState", LowStateTypeSupport)
}

type LowState struct {
	Version        [2]uint32      `yaml:"version"`
	ModePr         uint8          `yaml:"mode_pr"`
	ModeMachine    uint8          `yaml:"mode_machine"`
	Tick           uint32         `yaml:"tick"`
	ImuState       IMUState       `yaml:"imu_state"`
	MotorState     [35]MotorState `yaml:"motor_state"`
	WirelessRemote [40]uint8      `yaml:"wireless_remote"`
	Reserve        [4]uint32      `yaml:"reserve"`
	Crc            uint32         `yaml:"crc"`
}

// NewLowState creates a new LowState with default values.
func NewLowState() *LowState {
	self := LowState{}
	self.SetDefaults()
	return &self
}

func (t *LowState) Clone() *LowState {
	c := &LowState{}
	c.Version = t.Version
	c.ModePr = t.ModePr
	c.ModeMachine = t.ModeMachine
	c.Tick = t.Tick
	c.ImuState = *t.ImuState.Clone()
	CloneMotorStateSlice(c.MotorState[:], t.MotorState[:])
	c.WirelessRemote = t.WirelessRemote
	c.Reserve = t.Reserve
	c.Crc = t.Crc
	return c
}

func (t *LowState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *LowState) SetDefaults() {
	t.Version = [2]uint32{}
	t.ModePr = 0
	t.ModeMachine = 0
	t.Tick = 0
	t.ImuState.SetDefaults()
	for i := range t.MotorState {
		t.MotorState[i].SetDefaults()
	}
	t.WirelessRemote = [40]uint8{}
	t.Reserve = [4]uint32{}
	t.Crc = 0
}

func (t *LowState) GetTypeSupport() humble.MessageTypeSupport {
	return LowStateTypeSupport
}

// LowStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type LowStatePublisher struct {
	*humble.Publisher
}

// NewLowStatePublisher creates and returns a new publisher for the
// LowState
func NewLowStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*LowStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, LowStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LowStatePublisher{pub}, nil
}

func (p *LowStatePublisher) Publish(msg *LowState) error {
	return p.Publisher.Publish(msg)
}

// LowStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type LowStateSubscription struct {
	*humble.Subscription
}

// LowStateSubscriptionCallback type is used to provide a subscription
// handler function for a LowStateSubscription.
type LowStateSubscriptionCallback func(msg *LowState, info *humble.MessageInfo, err error)

// NewLowStateSubscription creates and returns a new subscription for the
// LowState
func NewLowStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback LowStateSubscriptionCallback) (*LowStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg LowState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, LowStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LowStateSubscription{sub}, nil
}

func (s *LowStateSubscription) TakeMessage(out *LowState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLowStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLowStateSlice(dst, src []LowState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LowStateTypeSupport humble.MessageTypeSupport = _LowStateTypeSupport{}

type _LowStateTypeSupport struct{}

func (t _LowStateTypeSupport) New() humble.Message {
	return NewLowState()
}

func (t _LowStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_hg__msg__LowState
	return (unsafe.Pointer)(C.unitree_hg__msg__LowState__create())
}

func (t _LowStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_hg__msg__LowState__destroy((*C.unitree_hg__msg__LowState)(pointer_to_free))
}

func (t _LowStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*LowState)
	mem := (*C.unitree_hg__msg__LowState)(dst)
	cSlice_version := mem.version[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_version)), m.Version[:])
	mem.mode_pr = C.uint8_t(m.ModePr)
	mem.mode_machine = C.uint8_t(m.ModeMachine)
	mem.tick = C.uint32_t(m.Tick)
	IMUStateTypeSupport.AsCStruct(unsafe.Pointer(&mem.imu_state), &m.ImuState)
	MotorStateArrayToC(mem.motor_state[:], m.MotorState[:])
	cSlice_wireless_remote := mem.wireless_remote[:]
	humble.Uint8ArrayToC(*(*[]humble.CUint8)(unsafe.Pointer(&cSlice_wireless_remote)), m.WirelessRemote[:])
	cSlice_reserve := mem.reserve[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_reserve)), m.Reserve[:])
	mem.crc = C.uint32_t(m.Crc)
}

func (t _LowStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LowState)
	mem := (*C.unitree_hg__msg__LowState)(ros2_message_buffer)
	cSlice_version := mem.version[:]
	humble.Uint32ArrayToGo(m.Version[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_version)))
	m.ModePr = uint8(mem.mode_pr)
	m.ModeMachine = uint8(mem.mode_machine)
	m.Tick = uint32(mem.tick)
	IMUStateTypeSupport.AsGoStruct(&m.ImuState, unsafe.Pointer(&mem.imu_state))
	MotorStateArrayToGo(m.MotorState[:], mem.motor_state[:])
	cSlice_wireless_remote := mem.wireless_remote[:]
	humble.Uint8ArrayToGo(m.WirelessRemote[:], *(*[]humble.CUint8)(unsafe.Pointer(&cSlice_wireless_remote)))
	cSlice_reserve := mem.reserve[:]
	humble.Uint32ArrayToGo(m.Reserve[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_reserve)))
	m.Crc = uint32(mem.crc)
}

func (t _LowStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_hg__msg__LowState())
}

type CLowState = C.unitree_hg__msg__LowState
type CLowStateSequence = C.unitree_hg__msg__LowState__Sequence

func LowStateSequenceToGo(goSlice *[]LowState, cSlice CLowStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LowState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LowStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func LowStateSequenceToC(cSlice *CLowStateSequence, goSlice []LowState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_hg__msg__LowState)(C.malloc(C.sizeof_struct_unitree_hg__msg__LowState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LowStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func LowStateArrayToGo(goSlice []LowState, cSlice []CLowState) {
	for i := 0; i < len(cSlice); i++ {
		LowStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func LowStateArrayToC(cSlice []CLowState, goSlice []LowState) {
	for i := 0; i < len(goSlice); i++ {
		LowStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

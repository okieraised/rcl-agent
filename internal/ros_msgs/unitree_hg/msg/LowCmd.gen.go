// Code generated by ros2gen. DO NOT EDIT.

package unitree_hg_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_hg/msg/low_cmd.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_hg/LowCmd", LowCmdTypeSupport)
	humble.RegisterMessage("unitree_hg/msg/LowCmd", LowCmdTypeSupport)
}

type LowCmd struct {
	ModePr      uint8        `yaml:"mode_pr"`
	ModeMachine uint8        `yaml:"mode_machine"`
	MotorCmd    [35]MotorCmd `yaml:"motor_cmd"`
	Reserve     [4]uint32    `yaml:"reserve"`
	Crc         uint32       `yaml:"crc"`
}

// NewLowCmd creates a new LowCmd with default values.
func NewLowCmd() *LowCmd {
	self := LowCmd{}
	self.SetDefaults()
	return &self
}

func (t *LowCmd) Clone() *LowCmd {
	c := &LowCmd{}
	c.ModePr = t.ModePr
	c.ModeMachine = t.ModeMachine
	CloneMotorCmdSlice(c.MotorCmd[:], t.MotorCmd[:])
	c.Reserve = t.Reserve
	c.Crc = t.Crc
	return c
}

func (t *LowCmd) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *LowCmd) SetDefaults() {
	t.ModePr = 0
	t.ModeMachine = 0
	for i := range t.MotorCmd {
		t.MotorCmd[i].SetDefaults()
	}
	t.Reserve = [4]uint32{}
	t.Crc = 0
}

func (t *LowCmd) GetTypeSupport() humble.MessageTypeSupport {
	return LowCmdTypeSupport
}

// LowCmdPublisher wraps humble.Publisher to provide type safe helper
// functions
type LowCmdPublisher struct {
	*humble.Publisher
}

// NewLowCmdPublisher creates and returns a new publisher for the
// LowCmd
func NewLowCmdPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*LowCmdPublisher, error) {
	pub, err := node.NewPublisher(topicName, LowCmdTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LowCmdPublisher{pub}, nil
}

func (p *LowCmdPublisher) Publish(msg *LowCmd) error {
	return p.Publisher.Publish(msg)
}

// LowCmdSubscription wraps humble.Subscription to provide type safe helper
// functions
type LowCmdSubscription struct {
	*humble.Subscription
}

// LowCmdSubscriptionCallback type is used to provide a subscription
// handler function for a LowCmdSubscription.
type LowCmdSubscriptionCallback func(msg *LowCmd, info *humble.MessageInfo, err error)

// NewLowCmdSubscription creates and returns a new subscription for the
// LowCmd
func NewLowCmdSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback LowCmdSubscriptionCallback) (*LowCmdSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg LowCmd
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, LowCmdTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LowCmdSubscription{sub}, nil
}

func (s *LowCmdSubscription) TakeMessage(out *LowCmd) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLowCmdSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLowCmdSlice(dst, src []LowCmd) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LowCmdTypeSupport humble.MessageTypeSupport = _LowCmdTypeSupport{}

type _LowCmdTypeSupport struct{}

func (t _LowCmdTypeSupport) New() humble.Message {
	return NewLowCmd()
}

func (t _LowCmdTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_hg__msg__LowCmd
	return (unsafe.Pointer)(C.unitree_hg__msg__LowCmd__create())
}

func (t _LowCmdTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_hg__msg__LowCmd__destroy((*C.unitree_hg__msg__LowCmd)(pointer_to_free))
}

func (t _LowCmdTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*LowCmd)
	mem := (*C.unitree_hg__msg__LowCmd)(dst)
	mem.mode_pr = C.uint8_t(m.ModePr)
	mem.mode_machine = C.uint8_t(m.ModeMachine)
	MotorCmdArrayToC(mem.motor_cmd[:], m.MotorCmd[:])
	cSlice_reserve := mem.reserve[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_reserve)), m.Reserve[:])
	mem.crc = C.uint32_t(m.Crc)
}

func (t _LowCmdTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LowCmd)
	mem := (*C.unitree_hg__msg__LowCmd)(ros2_message_buffer)
	m.ModePr = uint8(mem.mode_pr)
	m.ModeMachine = uint8(mem.mode_machine)
	MotorCmdArrayToGo(m.MotorCmd[:], mem.motor_cmd[:])
	cSlice_reserve := mem.reserve[:]
	humble.Uint32ArrayToGo(m.Reserve[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_reserve)))
	m.Crc = uint32(mem.crc)
}

func (t _LowCmdTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_hg__msg__LowCmd())
}

type CLowCmd = C.unitree_hg__msg__LowCmd
type CLowCmdSequence = C.unitree_hg__msg__LowCmd__Sequence

func LowCmdSequenceToGo(goSlice *[]LowCmd, cSlice CLowCmdSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LowCmd, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LowCmdTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func LowCmdSequenceToC(cSlice *CLowCmdSequence, goSlice []LowCmd) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_hg__msg__LowCmd)(C.malloc(C.sizeof_struct_unitree_hg__msg__LowCmd * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LowCmdTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func LowCmdArrayToGo(goSlice []LowCmd, cSlice []CLowCmd) {
	for i := 0; i < len(cSlice); i++ {
		LowCmdTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func LowCmdArrayToC(cSlice []CLowCmd, goSlice []LowCmd) {
	for i := 0; i < len(goSlice); i++ {
		LowCmdTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

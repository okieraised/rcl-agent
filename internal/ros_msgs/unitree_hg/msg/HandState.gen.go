// Code generated by ros2gen. DO NOT EDIT.

package unitree_hg_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_hg/msg/hand_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_hg/HandState", HandStateTypeSupport)
	humble.RegisterMessage("unitree_hg/msg/HandState", HandStateTypeSupport)
}

type HandState struct {
	MotorState       []MotorState       `yaml:"motor_state"`
	ImuState         IMUState           `yaml:"imu_state"`
	PressSensorState []PressSensorState `yaml:"press_sensor_state"`
	PowerV           float32            `yaml:"power_v"`
	PowerA           float32            `yaml:"power_a"`
	Reserve          [2]uint32          `yaml:"reserve"`
}

// NewHandState creates a new HandState with default values.
func NewHandState() *HandState {
	self := HandState{}
	self.SetDefaults()
	return &self
}

func (t *HandState) Clone() *HandState {
	c := &HandState{}
	if t.MotorState != nil {
		c.MotorState = make([]MotorState, len(t.MotorState))
		CloneMotorStateSlice(c.MotorState, t.MotorState)
	}
	c.ImuState = *t.ImuState.Clone()
	if t.PressSensorState != nil {
		c.PressSensorState = make([]PressSensorState, len(t.PressSensorState))
		ClonePressSensorStateSlice(c.PressSensorState, t.PressSensorState)
	}
	c.PowerV = t.PowerV
	c.PowerA = t.PowerA
	c.Reserve = t.Reserve
	return c
}

func (t *HandState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *HandState) SetDefaults() {
	t.MotorState = nil
	t.ImuState.SetDefaults()
	t.PressSensorState = nil
	t.PowerV = 0
	t.PowerA = 0
	t.Reserve = [2]uint32{}
}

func (t *HandState) GetTypeSupport() humble.MessageTypeSupport {
	return HandStateTypeSupport
}

// HandStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type HandStatePublisher struct {
	*humble.Publisher
}

// NewHandStatePublisher creates and returns a new publisher for the
// HandState
func NewHandStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*HandStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, HandStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HandStatePublisher{pub}, nil
}

func (p *HandStatePublisher) Publish(msg *HandState) error {
	return p.Publisher.Publish(msg)
}

// HandStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type HandStateSubscription struct {
	*humble.Subscription
}

// HandStateSubscriptionCallback type is used to provide a subscription
// handler function for a HandStateSubscription.
type HandStateSubscriptionCallback func(msg *HandState, info *humble.MessageInfo, err error)

// NewHandStateSubscription creates and returns a new subscription for the
// HandState
func NewHandStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback HandStateSubscriptionCallback) (*HandStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg HandState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, HandStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HandStateSubscription{sub}, nil
}

func (s *HandStateSubscription) TakeMessage(out *HandState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHandStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHandStateSlice(dst, src []HandState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HandStateTypeSupport humble.MessageTypeSupport = _HandStateTypeSupport{}

type _HandStateTypeSupport struct{}

func (t _HandStateTypeSupport) New() humble.Message {
	return NewHandState()
}

func (t _HandStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_hg__msg__HandState
	return (unsafe.Pointer)(C.unitree_hg__msg__HandState__create())
}

func (t _HandStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_hg__msg__HandState__destroy((*C.unitree_hg__msg__HandState)(pointer_to_free))
}

func (t _HandStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*HandState)
	mem := (*C.unitree_hg__msg__HandState)(dst)
	MotorStateSequenceToC(&mem.motor_state, m.MotorState)
	IMUStateTypeSupport.AsCStruct(unsafe.Pointer(&mem.imu_state), &m.ImuState)
	PressSensorStateSequenceToC(&mem.press_sensor_state, m.PressSensorState)
	mem.power_v = C.float(m.PowerV)
	mem.power_a = C.float(m.PowerA)
	cSlice_reserve := mem.reserve[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_reserve)), m.Reserve[:])
}

func (t _HandStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HandState)
	mem := (*C.unitree_hg__msg__HandState)(ros2_message_buffer)
	MotorStateSequenceToGo(&m.MotorState, mem.motor_state)
	IMUStateTypeSupport.AsGoStruct(&m.ImuState, unsafe.Pointer(&mem.imu_state))
	PressSensorStateSequenceToGo(&m.PressSensorState, mem.press_sensor_state)
	m.PowerV = float32(mem.power_v)
	m.PowerA = float32(mem.power_a)
	cSlice_reserve := mem.reserve[:]
	humble.Uint32ArrayToGo(m.Reserve[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_reserve)))
}

func (t _HandStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_hg__msg__HandState())
}

type CHandState = C.unitree_hg__msg__HandState
type CHandStateSequence = C.unitree_hg__msg__HandState__Sequence

func HandStateSequenceToGo(goSlice *[]HandState, cSlice CHandStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HandState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HandStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func HandStateSequenceToC(cSlice *CHandStateSequence, goSlice []HandState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_hg__msg__HandState)(C.malloc(C.sizeof_struct_unitree_hg__msg__HandState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HandStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func HandStateArrayToGo(goSlice []HandState, cSlice []CHandState) {
	for i := 0; i < len(cSlice); i++ {
		HandStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func HandStateArrayToC(cSlice []CHandState, goSlice []HandState) {
	for i := 0; i < len(goSlice); i++ {
		HandStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

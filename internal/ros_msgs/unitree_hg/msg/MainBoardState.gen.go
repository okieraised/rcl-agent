// Code generated by ros2gen. DO NOT EDIT.

package unitree_hg_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_hg/msg/main_board_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_hg/MainBoardState", MainBoardStateTypeSupport)
	humble.RegisterMessage("unitree_hg/msg/MainBoardState", MainBoardStateTypeSupport)
}

type MainBoardState struct {
	FanState    [6]uint16  `yaml:"fan_state"`
	Temperature [6]int16   `yaml:"temperature"`
	Value       [6]float32 `yaml:"value"`
	State       [6]uint32  `yaml:"state"`
}

// NewMainBoardState creates a new MainBoardState with default values.
func NewMainBoardState() *MainBoardState {
	self := MainBoardState{}
	self.SetDefaults()
	return &self
}

func (t *MainBoardState) Clone() *MainBoardState {
	c := &MainBoardState{}
	c.FanState = t.FanState
	c.Temperature = t.Temperature
	c.Value = t.Value
	c.State = t.State
	return c
}

func (t *MainBoardState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MainBoardState) SetDefaults() {
	t.FanState = [6]uint16{}
	t.Temperature = [6]int16{}
	t.Value = [6]float32{}
	t.State = [6]uint32{}
}

func (t *MainBoardState) GetTypeSupport() humble.MessageTypeSupport {
	return MainBoardStateTypeSupport
}

// MainBoardStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type MainBoardStatePublisher struct {
	*humble.Publisher
}

// NewMainBoardStatePublisher creates and returns a new publisher for the
// MainBoardState
func NewMainBoardStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MainBoardStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, MainBoardStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MainBoardStatePublisher{pub}, nil
}

func (p *MainBoardStatePublisher) Publish(msg *MainBoardState) error {
	return p.Publisher.Publish(msg)
}

// MainBoardStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type MainBoardStateSubscription struct {
	*humble.Subscription
}

// MainBoardStateSubscriptionCallback type is used to provide a subscription
// handler function for a MainBoardStateSubscription.
type MainBoardStateSubscriptionCallback func(msg *MainBoardState, info *humble.MessageInfo, err error)

// NewMainBoardStateSubscription creates and returns a new subscription for the
// MainBoardState
func NewMainBoardStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MainBoardStateSubscriptionCallback) (*MainBoardStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MainBoardState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MainBoardStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MainBoardStateSubscription{sub}, nil
}

func (s *MainBoardStateSubscription) TakeMessage(out *MainBoardState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMainBoardStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMainBoardStateSlice(dst, src []MainBoardState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MainBoardStateTypeSupport humble.MessageTypeSupport = _MainBoardStateTypeSupport{}

type _MainBoardStateTypeSupport struct{}

func (t _MainBoardStateTypeSupport) New() humble.Message {
	return NewMainBoardState()
}

func (t _MainBoardStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_hg__msg__MainBoardState
	return (unsafe.Pointer)(C.unitree_hg__msg__MainBoardState__create())
}

func (t _MainBoardStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_hg__msg__MainBoardState__destroy((*C.unitree_hg__msg__MainBoardState)(pointer_to_free))
}

func (t _MainBoardStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MainBoardState)
	mem := (*C.unitree_hg__msg__MainBoardState)(dst)
	cSlice_fan_state := mem.fan_state[:]
	humble.Uint16ArrayToC(*(*[]humble.CUint16)(unsafe.Pointer(&cSlice_fan_state)), m.FanState[:])
	cSlice_temperature := mem.temperature[:]
	humble.Int16ArrayToC(*(*[]humble.CInt16)(unsafe.Pointer(&cSlice_temperature)), m.Temperature[:])
	cSlice_value := mem.value[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_value)), m.Value[:])
	cSlice_state := mem.state[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_state)), m.State[:])
}

func (t _MainBoardStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MainBoardState)
	mem := (*C.unitree_hg__msg__MainBoardState)(ros2_message_buffer)
	cSlice_fan_state := mem.fan_state[:]
	humble.Uint16ArrayToGo(m.FanState[:], *(*[]humble.CUint16)(unsafe.Pointer(&cSlice_fan_state)))
	cSlice_temperature := mem.temperature[:]
	humble.Int16ArrayToGo(m.Temperature[:], *(*[]humble.CInt16)(unsafe.Pointer(&cSlice_temperature)))
	cSlice_value := mem.value[:]
	humble.Float32ArrayToGo(m.Value[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_value)))
	cSlice_state := mem.state[:]
	humble.Uint32ArrayToGo(m.State[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_state)))
}

func (t _MainBoardStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_hg__msg__MainBoardState())
}

type CMainBoardState = C.unitree_hg__msg__MainBoardState
type CMainBoardStateSequence = C.unitree_hg__msg__MainBoardState__Sequence

func MainBoardStateSequenceToGo(goSlice *[]MainBoardState, cSlice CMainBoardStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MainBoardState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MainBoardStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MainBoardStateSequenceToC(cSlice *CMainBoardStateSequence, goSlice []MainBoardState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_hg__msg__MainBoardState)(C.malloc(C.sizeof_struct_unitree_hg__msg__MainBoardState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MainBoardStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MainBoardStateArrayToGo(goSlice []MainBoardState, cSlice []CMainBoardState) {
	for i := 0; i < len(cSlice); i++ {
		MainBoardStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MainBoardStateArrayToC(cSlice []CMainBoardState, goSlice []MainBoardState) {
	for i := 0; i < len(goSlice); i++ {
		MainBoardStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package nav_msgs_srv

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	nav_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/nav_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/srv/set_map.h>

*/
import "C"

func init() {
	humble.RegisterMessage("nav_msgs/SetMap_Request", SetMap_RequestTypeSupport)
	humble.RegisterMessage("nav_msgs/srv/SetMap_Request", SetMap_RequestTypeSupport)
}

type SetMap_Request struct {
	Map         nav_msgs_msg.OccupancyGrid                  `yaml:"map"`          // Requested 2D map to be set.
	InitialPose geometry_msgs_msg.PoseWithCovarianceStamped `yaml:"initial_pose"` // Estimated initial pose when setting new map.
}

// NewSetMap_Request creates a new SetMap_Request with default values.
func NewSetMap_Request() *SetMap_Request {
	self := SetMap_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetMap_Request) Clone() *SetMap_Request {
	c := &SetMap_Request{}
	c.Map = *t.Map.Clone()
	c.InitialPose = *t.InitialPose.Clone()
	return c
}

func (t *SetMap_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetMap_Request) SetDefaults() {
	t.Map.SetDefaults()
	t.InitialPose.SetDefaults()
}

func (t *SetMap_Request) GetTypeSupport() humble.MessageTypeSupport {
	return SetMap_RequestTypeSupport
}

// SetMap_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type SetMap_RequestPublisher struct {
	*humble.Publisher
}

// NewSetMap_RequestPublisher creates and returns a new publisher for the
// SetMap_Request
func NewSetMap_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetMap_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, SetMap_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetMap_RequestPublisher{pub}, nil
}

func (p *SetMap_RequestPublisher) Publish(msg *SetMap_Request) error {
	return p.Publisher.Publish(msg)
}

// SetMap_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetMap_RequestSubscription struct {
	*humble.Subscription
}

// SetMap_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SetMap_RequestSubscription.
type SetMap_RequestSubscriptionCallback func(msg *SetMap_Request, info *humble.MessageInfo, err error)

// NewSetMap_RequestSubscription creates and returns a new subscription for the
// SetMap_Request
func NewSetMap_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetMap_RequestSubscriptionCallback) (*SetMap_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetMap_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetMap_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetMap_RequestSubscription{sub}, nil
}

func (s *SetMap_RequestSubscription) TakeMessage(out *SetMap_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetMap_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetMap_RequestSlice(dst, src []SetMap_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetMap_RequestTypeSupport humble.MessageTypeSupport = _SetMap_RequestTypeSupport{}

type _SetMap_RequestTypeSupport struct{}

func (t _SetMap_RequestTypeSupport) New() humble.Message {
	return NewSetMap_Request()
}

func (t _SetMap_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__srv__SetMap_Request
	return (unsafe.Pointer)(C.nav_msgs__srv__SetMap_Request__create())
}

func (t _SetMap_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__srv__SetMap_Request__destroy((*C.nav_msgs__srv__SetMap_Request)(pointer_to_free))
}

func (t _SetMap_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SetMap_Request)
	mem := (*C.nav_msgs__srv__SetMap_Request)(dst)
	nav_msgs_msg.OccupancyGridTypeSupport.AsCStruct(unsafe.Pointer(&mem._map), &m.Map)
	geometry_msgs_msg.PoseWithCovarianceStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.initial_pose), &m.InitialPose)
}

func (t _SetMap_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetMap_Request)
	mem := (*C.nav_msgs__srv__SetMap_Request)(ros2_message_buffer)
	nav_msgs_msg.OccupancyGridTypeSupport.AsGoStruct(&m.Map, unsafe.Pointer(&mem._map))
	geometry_msgs_msg.PoseWithCovarianceStampedTypeSupport.AsGoStruct(&m.InitialPose, unsafe.Pointer(&mem.initial_pose))
}

func (t _SetMap_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__SetMap_Request())
}

type CSetMap_Request = C.nav_msgs__srv__SetMap_Request
type CSetMap_RequestSequence = C.nav_msgs__srv__SetMap_Request__Sequence

func SetMap_RequestSequenceToGo(goSlice *[]SetMap_Request, cSlice CSetMap_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetMap_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetMap_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetMap_RequestSequenceToC(cSlice *CSetMap_RequestSequence, goSlice []SetMap_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.nav_msgs__srv__SetMap_Request)(C.malloc(C.sizeof_struct_nav_msgs__srv__SetMap_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetMap_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetMap_RequestArrayToGo(goSlice []SetMap_Request, cSlice []CSetMap_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetMap_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetMap_RequestArrayToC(cSlice []CSetMap_Request, goSlice []SetMap_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetMap_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

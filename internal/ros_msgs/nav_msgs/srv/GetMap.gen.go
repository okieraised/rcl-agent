// Code generated by ros2gen. DO NOT EDIT.

package nav_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <nav_msgs/srv/get_map.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("nav_msgs/GetMap", GetMapTypeSupport)
	humble.RegisterService("nav_msgs/srv/GetMap", GetMapTypeSupport)
}

type _GetMapTypeSupport struct{}

func (s _GetMapTypeSupport) Request() humble.MessageTypeSupport {
	return GetMap_RequestTypeSupport
}

func (s _GetMapTypeSupport) Response() humble.MessageTypeSupport {
	return GetMap_ResponseTypeSupport
}

func (s _GetMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__GetMap())
}

// Modifying this variable is undefined behavior.
var GetMapTypeSupport humble.ServiceTypeSupport = _GetMapTypeSupport{}

// GetMapClient wraps humble.Client to provide type safe helper
// functions
type GetMapClient struct {
	*humble.Client
}

// NewGetMapClient creates and returns a new client for the
// GetMap
func NewGetMapClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*GetMapClient, error) {
	client, err := node.NewClient(serviceName, GetMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetMapClient{client}, nil
}

func (s *GetMapClient) Send(ctx context.Context, req *GetMap_Request) (*GetMap_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetMap_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetMapServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s GetMapServiceResponseSender) SendResponse(resp *GetMap_Response) error {
	return s.sender.SendResponse(resp)
}

type GetMapServiceRequestHandler func(*humble.ServiceInfo, *GetMap_Request, GetMapServiceResponseSender)

// GetMapService wraps humble.Service to provide type safe helper
// functions
type GetMapService struct {
	*humble.Service
}

// NewGetMapService creates and returns a new service for the
// GetMap
func NewGetMapService(node *humble.Node, name string, options *humble.ServiceOptions, handler GetMapServiceRequestHandler) (*GetMapService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*GetMap_Request)
		responseSender := GetMapServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetMapTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetMapService{service}, nil
}

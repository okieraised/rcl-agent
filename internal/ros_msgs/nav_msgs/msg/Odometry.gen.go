// Code generated by ros2gen. DO NOT EDIT.

package nav_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/msg/odometry.h>

*/
import "C"

func init() {
	humble.RegisterMessage("nav_msgs/Odometry", OdometryTypeSupport)
	humble.RegisterMessage("nav_msgs/msg/Odometry", OdometryTypeSupport)
}

type Odometry struct {
	Header       std_msgs_msg.Header                   `yaml:"header"`         // Includes the frame id of the pose parent.
	ChildFrameId string                                `yaml:"child_frame_id"` // Frame id the pose points to. The twist is in this coordinate frame.
	Pose         geometry_msgs_msg.PoseWithCovariance  `yaml:"pose"`           // Estimated pose that is typically relative to a fixed world frame.
	Twist        geometry_msgs_msg.TwistWithCovariance `yaml:"twist"`          // Estimated linear and angular velocity relative to child_frame_id.
}

// NewOdometry creates a new Odometry with default values.
func NewOdometry() *Odometry {
	self := Odometry{}
	self.SetDefaults()
	return &self
}

func (t *Odometry) Clone() *Odometry {
	c := &Odometry{}
	c.Header = *t.Header.Clone()
	c.ChildFrameId = t.ChildFrameId
	c.Pose = *t.Pose.Clone()
	c.Twist = *t.Twist.Clone()
	return c
}

func (t *Odometry) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Odometry) SetDefaults() {
	t.Header.SetDefaults()
	t.ChildFrameId = ""
	t.Pose.SetDefaults()
	t.Twist.SetDefaults()
}

func (t *Odometry) GetTypeSupport() humble.MessageTypeSupport {
	return OdometryTypeSupport
}

// OdometryPublisher wraps humble.Publisher to provide type safe helper
// functions
type OdometryPublisher struct {
	*humble.Publisher
}

// NewOdometryPublisher creates and returns a new publisher for the
// Odometry
func NewOdometryPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*OdometryPublisher, error) {
	pub, err := node.NewPublisher(topicName, OdometryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OdometryPublisher{pub}, nil
}

func (p *OdometryPublisher) Publish(msg *Odometry) error {
	return p.Publisher.Publish(msg)
}

// OdometrySubscription wraps humble.Subscription to provide type safe helper
// functions
type OdometrySubscription struct {
	*humble.Subscription
}

// OdometrySubscriptionCallback type is used to provide a subscription
// handler function for a OdometrySubscription.
type OdometrySubscriptionCallback func(msg *Odometry, info *humble.MessageInfo, err error)

// NewOdometrySubscription creates and returns a new subscription for the
// Odometry
func NewOdometrySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback OdometrySubscriptionCallback) (*OdometrySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Odometry
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, OdometryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OdometrySubscription{sub}, nil
}

func (s *OdometrySubscription) TakeMessage(out *Odometry) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOdometrySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOdometrySlice(dst, src []Odometry) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OdometryTypeSupport humble.MessageTypeSupport = _OdometryTypeSupport{}

type _OdometryTypeSupport struct{}

func (t _OdometryTypeSupport) New() humble.Message {
	return NewOdometry()
}

func (t _OdometryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__msg__Odometry
	return (unsafe.Pointer)(C.nav_msgs__msg__Odometry__create())
}

func (t _OdometryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__msg__Odometry__destroy((*C.nav_msgs__msg__Odometry)(pointer_to_free))
}

func (t _OdometryTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Odometry)
	mem := (*C.nav_msgs__msg__Odometry)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	humble.StringAsCStruct(unsafe.Pointer(&mem.child_frame_id), m.ChildFrameId)
	geometry_msgs_msg.PoseWithCovarianceTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	geometry_msgs_msg.TwistWithCovarianceTypeSupport.AsCStruct(unsafe.Pointer(&mem.twist), &m.Twist)
}

func (t _OdometryTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Odometry)
	mem := (*C.nav_msgs__msg__Odometry)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	humble.StringAsGoStruct(&m.ChildFrameId, unsafe.Pointer(&mem.child_frame_id))
	geometry_msgs_msg.PoseWithCovarianceTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	geometry_msgs_msg.TwistWithCovarianceTypeSupport.AsGoStruct(&m.Twist, unsafe.Pointer(&mem.twist))
}

func (t _OdometryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry())
}

type COdometry = C.nav_msgs__msg__Odometry
type COdometrySequence = C.nav_msgs__msg__Odometry__Sequence

func OdometrySequenceToGo(goSlice *[]Odometry, cSlice COdometrySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Odometry, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OdometryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func OdometrySequenceToC(cSlice *COdometrySequence, goSlice []Odometry) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.nav_msgs__msg__Odometry)(C.malloc(C.sizeof_struct_nav_msgs__msg__Odometry * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OdometryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func OdometryArrayToGo(goSlice []Odometry, cSlice []COdometry) {
	for i := 0; i < len(cSlice); i++ {
		OdometryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func OdometryArrayToC(cSlice []COdometry, goSlice []Odometry) {
	for i := 0; i < len(goSlice); i++ {
		OdometryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

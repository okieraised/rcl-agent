// Code generated by ros2gen. DO NOT EDIT.

package actionlib_msgs_msg

import (
	"unsafe"

	builtin_interfaces_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/builtin_interfaces/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actionlib_msgs/msg/goal_id.h>

*/
import "C"

func init() {
	humble.RegisterMessage("actionlib_msgs/GoalID", GoalIDTypeSupport)
	humble.RegisterMessage("actionlib_msgs/msg/GoalID", GoalIDTypeSupport)
}

type GoalID struct {
	Stamp builtin_interfaces_msg.Time `yaml:"stamp"` // The stamp should store the time at which this goal was requested.It is used by an action server when it tries to preempt allgoals that were requested before a certain time
	Id    string                      `yaml:"id"`    // The id provides a way to associate feedback andresult message with specific goal requests. The idspecified must be unique.
}

// NewGoalID creates a new GoalID with default values.
func NewGoalID() *GoalID {
	self := GoalID{}
	self.SetDefaults()
	return &self
}

func (t *GoalID) Clone() *GoalID {
	c := &GoalID{}
	c.Stamp = *t.Stamp.Clone()
	c.Id = t.Id
	return c
}

func (t *GoalID) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GoalID) SetDefaults() {
	t.Stamp.SetDefaults()
	t.Id = ""
}

func (t *GoalID) GetTypeSupport() humble.MessageTypeSupport {
	return GoalIDTypeSupport
}

// GoalIDPublisher wraps humble.Publisher to provide type safe helper
// functions
type GoalIDPublisher struct {
	*humble.Publisher
}

// NewGoalIDPublisher creates and returns a new publisher for the
// GoalID
func NewGoalIDPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GoalIDPublisher, error) {
	pub, err := node.NewPublisher(topicName, GoalIDTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GoalIDPublisher{pub}, nil
}

func (p *GoalIDPublisher) Publish(msg *GoalID) error {
	return p.Publisher.Publish(msg)
}

// GoalIDSubscription wraps humble.Subscription to provide type safe helper
// functions
type GoalIDSubscription struct {
	*humble.Subscription
}

// GoalIDSubscriptionCallback type is used to provide a subscription
// handler function for a GoalIDSubscription.
type GoalIDSubscriptionCallback func(msg *GoalID, info *humble.MessageInfo, err error)

// NewGoalIDSubscription creates and returns a new subscription for the
// GoalID
func NewGoalIDSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GoalIDSubscriptionCallback) (*GoalIDSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GoalID
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GoalIDTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GoalIDSubscription{sub}, nil
}

func (s *GoalIDSubscription) TakeMessage(out *GoalID) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGoalIDSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGoalIDSlice(dst, src []GoalID) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GoalIDTypeSupport humble.MessageTypeSupport = _GoalIDTypeSupport{}

type _GoalIDTypeSupport struct{}

func (t _GoalIDTypeSupport) New() humble.Message {
	return NewGoalID()
}

func (t _GoalIDTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actionlib_msgs__msg__GoalID
	return (unsafe.Pointer)(C.actionlib_msgs__msg__GoalID__create())
}

func (t _GoalIDTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actionlib_msgs__msg__GoalID__destroy((*C.actionlib_msgs__msg__GoalID)(pointer_to_free))
}

func (t _GoalIDTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GoalID)
	mem := (*C.actionlib_msgs__msg__GoalID)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.stamp), &m.Stamp)
	humble.StringAsCStruct(unsafe.Pointer(&mem.id), m.Id)
}

func (t _GoalIDTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GoalID)
	mem := (*C.actionlib_msgs__msg__GoalID)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Stamp, unsafe.Pointer(&mem.stamp))
	humble.StringAsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
}

func (t _GoalIDTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actionlib_msgs__msg__GoalID())
}

type CGoalID = C.actionlib_msgs__msg__GoalID
type CGoalIDSequence = C.actionlib_msgs__msg__GoalID__Sequence

func GoalIDSequenceToGo(goSlice *[]GoalID, cSlice CGoalIDSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GoalID, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GoalIDTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GoalIDSequenceToC(cSlice *CGoalIDSequence, goSlice []GoalID) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actionlib_msgs__msg__GoalID)(C.malloc(C.sizeof_struct_actionlib_msgs__msg__GoalID * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GoalIDTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GoalIDArrayToGo(goSlice []GoalID, cSlice []CGoalID) {
	for i := 0; i < len(cSlice); i++ {
		GoalIDTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GoalIDArrayToC(cSlice []CGoalID, goSlice []GoalID) {
	for i := 0; i < len(goSlice); i++ {
		GoalIDTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

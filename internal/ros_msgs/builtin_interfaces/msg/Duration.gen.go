// Code generated by ros2gen. DO NOT EDIT.

package builtin_interfaces_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <builtin_interfaces/msg/duration.h>

*/
import "C"

func init() {
	humble.RegisterMessage("builtin_interfaces/Duration", DurationTypeSupport)
	humble.RegisterMessage("builtin_interfaces/msg/Duration", DurationTypeSupport)
}

type Duration struct {
	Sec     int32  `yaml:"sec"`     // The seconds component, valid over all int32 values.
	Nanosec uint32 `yaml:"nanosec"` // The nanoseconds component, valid in the range [0, 1e9), to be added to the seconds component.e.g.The duration -1.7 seconds is represented as {sec: -2, nanosec: 3e8}The duration 1.7 seconds is represented as {sec: 1, nanosec: 7e8}
}

// NewDuration creates a new Duration with default values.
func NewDuration() *Duration {
	self := Duration{}
	self.SetDefaults()
	return &self
}

func (t *Duration) Clone() *Duration {
	c := &Duration{}
	c.Sec = t.Sec
	c.Nanosec = t.Nanosec
	return c
}

func (t *Duration) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Duration) SetDefaults() {
	t.Sec = 0
	t.Nanosec = 0
}

func (t *Duration) GetTypeSupport() humble.MessageTypeSupport {
	return DurationTypeSupport
}

// DurationPublisher wraps humble.Publisher to provide type safe helper
// functions
type DurationPublisher struct {
	*humble.Publisher
}

// NewDurationPublisher creates and returns a new publisher for the
// Duration
func NewDurationPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*DurationPublisher, error) {
	pub, err := node.NewPublisher(topicName, DurationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DurationPublisher{pub}, nil
}

func (p *DurationPublisher) Publish(msg *Duration) error {
	return p.Publisher.Publish(msg)
}

// DurationSubscription wraps humble.Subscription to provide type safe helper
// functions
type DurationSubscription struct {
	*humble.Subscription
}

// DurationSubscriptionCallback type is used to provide a subscription
// handler function for a DurationSubscription.
type DurationSubscriptionCallback func(msg *Duration, info *humble.MessageInfo, err error)

// NewDurationSubscription creates and returns a new subscription for the
// Duration
func NewDurationSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback DurationSubscriptionCallback) (*DurationSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Duration
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, DurationTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DurationSubscription{sub}, nil
}

func (s *DurationSubscription) TakeMessage(out *Duration) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDurationSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDurationSlice(dst, src []Duration) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DurationTypeSupport humble.MessageTypeSupport = _DurationTypeSupport{}

type _DurationTypeSupport struct{}

func (t _DurationTypeSupport) New() humble.Message {
	return NewDuration()
}

func (t _DurationTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.builtin_interfaces__msg__Duration
	return (unsafe.Pointer)(C.builtin_interfaces__msg__Duration__create())
}

func (t _DurationTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.builtin_interfaces__msg__Duration__destroy((*C.builtin_interfaces__msg__Duration)(pointer_to_free))
}

func (t _DurationTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Duration)
	mem := (*C.builtin_interfaces__msg__Duration)(dst)
	mem.sec = C.int32_t(m.Sec)
	mem.nanosec = C.uint32_t(m.Nanosec)
}

func (t _DurationTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Duration)
	mem := (*C.builtin_interfaces__msg__Duration)(ros2_message_buffer)
	m.Sec = int32(mem.sec)
	m.Nanosec = uint32(mem.nanosec)
}

func (t _DurationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__builtin_interfaces__msg__Duration())
}

type CDuration = C.builtin_interfaces__msg__Duration
type CDurationSequence = C.builtin_interfaces__msg__Duration__Sequence

func DurationSequenceToGo(goSlice *[]Duration, cSlice CDurationSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Duration, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DurationTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func DurationSequenceToC(cSlice *CDurationSequence, goSlice []Duration) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.builtin_interfaces__msg__Duration)(C.malloc(C.sizeof_struct_builtin_interfaces__msg__Duration * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DurationTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func DurationArrayToGo(goSlice []Duration, cSlice []CDuration) {
	for i := 0; i < len(cSlice); i++ {
		DurationTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func DurationArrayToC(cSlice []CDuration, goSlice []Duration) {
	for i := 0; i < len(goSlice); i++ {
		DurationTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package builtin_interfaces_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <builtin_interfaces/msg/time.h>

*/
import "C"

func init() {
	humble.RegisterMessage("builtin_interfaces/Time", TimeTypeSupport)
	humble.RegisterMessage("builtin_interfaces/msg/Time", TimeTypeSupport)
}

type Time struct {
	Sec     int32  `yaml:"sec"`     // The seconds component, valid over all int32 values.
	Nanosec uint32 `yaml:"nanosec"` // The nanoseconds component, valid in the range [0, 1e9), to be added to the seconds component.e.g.The time -1.7 seconds is represented as {sec: -2, nanosec: 3e8}The time 1.7 seconds is represented as {sec: 1, nanosec: 7e8}
}

// NewTime creates a new Time with default values.
func NewTime() *Time {
	self := Time{}
	self.SetDefaults()
	return &self
}

func (t *Time) Clone() *Time {
	c := &Time{}
	c.Sec = t.Sec
	c.Nanosec = t.Nanosec
	return c
}

func (t *Time) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Time) SetDefaults() {
	t.Sec = 0
	t.Nanosec = 0
}

func (t *Time) GetTypeSupport() humble.MessageTypeSupport {
	return TimeTypeSupport
}

// TimePublisher wraps humble.Publisher to provide type safe helper
// functions
type TimePublisher struct {
	*humble.Publisher
}

// NewTimePublisher creates and returns a new publisher for the
// Time
func NewTimePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TimePublisher, error) {
	pub, err := node.NewPublisher(topicName, TimeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TimePublisher{pub}, nil
}

func (p *TimePublisher) Publish(msg *Time) error {
	return p.Publisher.Publish(msg)
}

// TimeSubscription wraps humble.Subscription to provide type safe helper
// functions
type TimeSubscription struct {
	*humble.Subscription
}

// TimeSubscriptionCallback type is used to provide a subscription
// handler function for a TimeSubscription.
type TimeSubscriptionCallback func(msg *Time, info *humble.MessageInfo, err error)

// NewTimeSubscription creates and returns a new subscription for the
// Time
func NewTimeSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TimeSubscriptionCallback) (*TimeSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Time
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TimeTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TimeSubscription{sub}, nil
}

func (s *TimeSubscription) TakeMessage(out *Time) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTimeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTimeSlice(dst, src []Time) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TimeTypeSupport humble.MessageTypeSupport = _TimeTypeSupport{}

type _TimeTypeSupport struct{}

func (t _TimeTypeSupport) New() humble.Message {
	return NewTime()
}

func (t _TimeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.builtin_interfaces__msg__Time
	return (unsafe.Pointer)(C.builtin_interfaces__msg__Time__create())
}

func (t _TimeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.builtin_interfaces__msg__Time__destroy((*C.builtin_interfaces__msg__Time)(pointer_to_free))
}

func (t _TimeTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Time)
	mem := (*C.builtin_interfaces__msg__Time)(dst)
	mem.sec = C.int32_t(m.Sec)
	mem.nanosec = C.uint32_t(m.Nanosec)
}

func (t _TimeTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Time)
	mem := (*C.builtin_interfaces__msg__Time)(ros2_message_buffer)
	m.Sec = int32(mem.sec)
	m.Nanosec = uint32(mem.nanosec)
}

func (t _TimeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__builtin_interfaces__msg__Time())
}

type CTime = C.builtin_interfaces__msg__Time
type CTimeSequence = C.builtin_interfaces__msg__Time__Sequence

func TimeSequenceToGo(goSlice *[]Time, cSlice CTimeSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Time, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TimeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TimeSequenceToC(cSlice *CTimeSequence, goSlice []Time) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.builtin_interfaces__msg__Time)(C.malloc(C.sizeof_struct_builtin_interfaces__msg__Time * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TimeTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TimeArrayToGo(goSlice []Time, cSlice []CTime) {
	for i := 0; i < len(cSlice); i++ {
		TimeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TimeArrayToC(cSlice []CTime, goSlice []Time) {
	for i := 0; i < len(goSlice); i++ {
		TimeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

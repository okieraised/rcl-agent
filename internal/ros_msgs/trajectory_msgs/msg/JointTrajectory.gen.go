// Code generated by ros2gen. DO NOT EDIT.

package trajectory_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <trajectory_msgs/msg/joint_trajectory.h>

*/
import "C"

func init() {
	humble.RegisterMessage("trajectory_msgs/JointTrajectory", JointTrajectoryTypeSupport)
	humble.RegisterMessage("trajectory_msgs/msg/JointTrajectory", JointTrajectoryTypeSupport)
}

type JointTrajectory struct {
	Header     std_msgs_msg.Header    `yaml:"header"`      // The header is used to specify the coordinate frame and the reference time forthe trajectory durations
	JointNames []string               `yaml:"joint_names"` // The names of the active joints in each trajectory point. These names areordered and must correspond to the values in each trajectory point.
	Points     []JointTrajectoryPoint `yaml:"points"`      // Array of trajectory points, which describe the positions, velocities,accelerations and/or efforts of the joints at each time point.
}

// NewJointTrajectory creates a new JointTrajectory with default values.
func NewJointTrajectory() *JointTrajectory {
	self := JointTrajectory{}
	self.SetDefaults()
	return &self
}

func (t *JointTrajectory) Clone() *JointTrajectory {
	c := &JointTrajectory{}
	c.Header = *t.Header.Clone()
	if t.JointNames != nil {
		c.JointNames = make([]string, len(t.JointNames))
		copy(c.JointNames, t.JointNames)
	}
	if t.Points != nil {
		c.Points = make([]JointTrajectoryPoint, len(t.Points))
		CloneJointTrajectoryPointSlice(c.Points, t.Points)
	}
	return c
}

func (t *JointTrajectory) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *JointTrajectory) SetDefaults() {
	t.Header.SetDefaults()
	t.JointNames = nil
	t.Points = nil
}

func (t *JointTrajectory) GetTypeSupport() humble.MessageTypeSupport {
	return JointTrajectoryTypeSupport
}

// JointTrajectoryPublisher wraps humble.Publisher to provide type safe helper
// functions
type JointTrajectoryPublisher struct {
	*humble.Publisher
}

// NewJointTrajectoryPublisher creates and returns a new publisher for the
// JointTrajectory
func NewJointTrajectoryPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*JointTrajectoryPublisher, error) {
	pub, err := node.NewPublisher(topicName, JointTrajectoryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointTrajectoryPublisher{pub}, nil
}

func (p *JointTrajectoryPublisher) Publish(msg *JointTrajectory) error {
	return p.Publisher.Publish(msg)
}

// JointTrajectorySubscription wraps humble.Subscription to provide type safe helper
// functions
type JointTrajectorySubscription struct {
	*humble.Subscription
}

// JointTrajectorySubscriptionCallback type is used to provide a subscription
// handler function for a JointTrajectorySubscription.
type JointTrajectorySubscriptionCallback func(msg *JointTrajectory, info *humble.MessageInfo, err error)

// NewJointTrajectorySubscription creates and returns a new subscription for the
// JointTrajectory
func NewJointTrajectorySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback JointTrajectorySubscriptionCallback) (*JointTrajectorySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg JointTrajectory
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, JointTrajectoryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointTrajectorySubscription{sub}, nil
}

func (s *JointTrajectorySubscription) TakeMessage(out *JointTrajectory) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointTrajectorySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointTrajectorySlice(dst, src []JointTrajectory) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointTrajectoryTypeSupport humble.MessageTypeSupport = _JointTrajectoryTypeSupport{}

type _JointTrajectoryTypeSupport struct{}

func (t _JointTrajectoryTypeSupport) New() humble.Message {
	return NewJointTrajectory()
}

func (t _JointTrajectoryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.trajectory_msgs__msg__JointTrajectory
	return (unsafe.Pointer)(C.trajectory_msgs__msg__JointTrajectory__create())
}

func (t _JointTrajectoryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.trajectory_msgs__msg__JointTrajectory__destroy((*C.trajectory_msgs__msg__JointTrajectory)(pointer_to_free))
}

func (t _JointTrajectoryTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*JointTrajectory)
	mem := (*C.trajectory_msgs__msg__JointTrajectory)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	humble.StringSequenceToC((*humble.CStringSequence)(unsafe.Pointer(&mem.joint_names)), m.JointNames)
	JointTrajectoryPointSequenceToC(&mem.points, m.Points)
}

func (t _JointTrajectoryTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointTrajectory)
	mem := (*C.trajectory_msgs__msg__JointTrajectory)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	humble.StringSequenceToGo(&m.JointNames, *(*humble.CStringSequence)(unsafe.Pointer(&mem.joint_names)))
	JointTrajectoryPointSequenceToGo(&m.Points, mem.points)
}

func (t _JointTrajectoryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectory())
}

type CJointTrajectory = C.trajectory_msgs__msg__JointTrajectory
type CJointTrajectorySequence = C.trajectory_msgs__msg__JointTrajectory__Sequence

func JointTrajectorySequenceToGo(goSlice *[]JointTrajectory, cSlice CJointTrajectorySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointTrajectory, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointTrajectoryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func JointTrajectorySequenceToC(cSlice *CJointTrajectorySequence, goSlice []JointTrajectory) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.trajectory_msgs__msg__JointTrajectory)(C.malloc(C.sizeof_struct_trajectory_msgs__msg__JointTrajectory * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointTrajectoryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func JointTrajectoryArrayToGo(goSlice []JointTrajectory, cSlice []CJointTrajectory) {
	for i := 0; i < len(cSlice); i++ {
		JointTrajectoryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func JointTrajectoryArrayToC(cSlice []CJointTrajectory, goSlice []JointTrajectory) {
	for i := 0; i < len(goSlice); i++ {
		JointTrajectoryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package shape_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <shape_msgs/msg/plane.h>

*/
import "C"

func init() {
	humble.RegisterMessage("shape_msgs/Plane", PlaneTypeSupport)
	humble.RegisterMessage("shape_msgs/msg/Plane", PlaneTypeSupport)
}

type Plane struct {
	Coef [4]float64 `yaml:"coef"` // Representation of a plane, using the plane equation ax + by + cz + d = 0.a := coef[0]b := coef[1]c := coef[2]d := coef[3]
}

// NewPlane creates a new Plane with default values.
func NewPlane() *Plane {
	self := Plane{}
	self.SetDefaults()
	return &self
}

func (t *Plane) Clone() *Plane {
	c := &Plane{}
	c.Coef = t.Coef
	return c
}

func (t *Plane) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Plane) SetDefaults() {
	t.Coef = [4]float64{}
}

func (t *Plane) GetTypeSupport() humble.MessageTypeSupport {
	return PlaneTypeSupport
}

// PlanePublisher wraps humble.Publisher to provide type safe helper
// functions
type PlanePublisher struct {
	*humble.Publisher
}

// NewPlanePublisher creates and returns a new publisher for the
// Plane
func NewPlanePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PlanePublisher, error) {
	pub, err := node.NewPublisher(topicName, PlaneTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PlanePublisher{pub}, nil
}

func (p *PlanePublisher) Publish(msg *Plane) error {
	return p.Publisher.Publish(msg)
}

// PlaneSubscription wraps humble.Subscription to provide type safe helper
// functions
type PlaneSubscription struct {
	*humble.Subscription
}

// PlaneSubscriptionCallback type is used to provide a subscription
// handler function for a PlaneSubscription.
type PlaneSubscriptionCallback func(msg *Plane, info *humble.MessageInfo, err error)

// NewPlaneSubscription creates and returns a new subscription for the
// Plane
func NewPlaneSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PlaneSubscriptionCallback) (*PlaneSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Plane
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PlaneTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PlaneSubscription{sub}, nil
}

func (s *PlaneSubscription) TakeMessage(out *Plane) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePlaneSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePlaneSlice(dst, src []Plane) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PlaneTypeSupport humble.MessageTypeSupport = _PlaneTypeSupport{}

type _PlaneTypeSupport struct{}

func (t _PlaneTypeSupport) New() humble.Message {
	return NewPlane()
}

func (t _PlaneTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.shape_msgs__msg__Plane
	return (unsafe.Pointer)(C.shape_msgs__msg__Plane__create())
}

func (t _PlaneTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.shape_msgs__msg__Plane__destroy((*C.shape_msgs__msg__Plane)(pointer_to_free))
}

func (t _PlaneTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Plane)
	mem := (*C.shape_msgs__msg__Plane)(dst)
	cSlice_coef := mem.coef[:]
	humble.Float64ArrayToC(*(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_coef)), m.Coef[:])
}

func (t _PlaneTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Plane)
	mem := (*C.shape_msgs__msg__Plane)(ros2_message_buffer)
	cSlice_coef := mem.coef[:]
	humble.Float64ArrayToGo(m.Coef[:], *(*[]humble.CFloat64)(unsafe.Pointer(&cSlice_coef)))
}

func (t _PlaneTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__shape_msgs__msg__Plane())
}

type CPlane = C.shape_msgs__msg__Plane
type CPlaneSequence = C.shape_msgs__msg__Plane__Sequence

func PlaneSequenceToGo(goSlice *[]Plane, cSlice CPlaneSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Plane, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PlaneTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PlaneSequenceToC(cSlice *CPlaneSequence, goSlice []Plane) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.shape_msgs__msg__Plane)(C.malloc(C.sizeof_struct_shape_msgs__msg__Plane * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PlaneTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PlaneArrayToGo(goSlice []Plane, cSlice []CPlane) {
	for i := 0; i < len(cSlice); i++ {
		PlaneTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PlaneArrayToC(cSlice []CPlane, goSlice []Plane) {
	for i := 0; i < len(goSlice); i++ {
		PlaneTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package shape_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <shape_msgs/msg/mesh_triangle.h>

*/
import "C"

func init() {
	humble.RegisterMessage("shape_msgs/MeshTriangle", MeshTriangleTypeSupport)
	humble.RegisterMessage("shape_msgs/msg/MeshTriangle", MeshTriangleTypeSupport)
}

type MeshTriangle struct {
	VertexIndices [3]uint32 `yaml:"vertex_indices"`
}

// NewMeshTriangle creates a new MeshTriangle with default values.
func NewMeshTriangle() *MeshTriangle {
	self := MeshTriangle{}
	self.SetDefaults()
	return &self
}

func (t *MeshTriangle) Clone() *MeshTriangle {
	c := &MeshTriangle{}
	c.VertexIndices = t.VertexIndices
	return c
}

func (t *MeshTriangle) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MeshTriangle) SetDefaults() {
	t.VertexIndices = [3]uint32{}
}

func (t *MeshTriangle) GetTypeSupport() humble.MessageTypeSupport {
	return MeshTriangleTypeSupport
}

// MeshTrianglePublisher wraps humble.Publisher to provide type safe helper
// functions
type MeshTrianglePublisher struct {
	*humble.Publisher
}

// NewMeshTrianglePublisher creates and returns a new publisher for the
// MeshTriangle
func NewMeshTrianglePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MeshTrianglePublisher, error) {
	pub, err := node.NewPublisher(topicName, MeshTriangleTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MeshTrianglePublisher{pub}, nil
}

func (p *MeshTrianglePublisher) Publish(msg *MeshTriangle) error {
	return p.Publisher.Publish(msg)
}

// MeshTriangleSubscription wraps humble.Subscription to provide type safe helper
// functions
type MeshTriangleSubscription struct {
	*humble.Subscription
}

// MeshTriangleSubscriptionCallback type is used to provide a subscription
// handler function for a MeshTriangleSubscription.
type MeshTriangleSubscriptionCallback func(msg *MeshTriangle, info *humble.MessageInfo, err error)

// NewMeshTriangleSubscription creates and returns a new subscription for the
// MeshTriangle
func NewMeshTriangleSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MeshTriangleSubscriptionCallback) (*MeshTriangleSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MeshTriangle
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MeshTriangleTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MeshTriangleSubscription{sub}, nil
}

func (s *MeshTriangleSubscription) TakeMessage(out *MeshTriangle) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMeshTriangleSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMeshTriangleSlice(dst, src []MeshTriangle) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MeshTriangleTypeSupport humble.MessageTypeSupport = _MeshTriangleTypeSupport{}

type _MeshTriangleTypeSupport struct{}

func (t _MeshTriangleTypeSupport) New() humble.Message {
	return NewMeshTriangle()
}

func (t _MeshTriangleTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.shape_msgs__msg__MeshTriangle
	return (unsafe.Pointer)(C.shape_msgs__msg__MeshTriangle__create())
}

func (t _MeshTriangleTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.shape_msgs__msg__MeshTriangle__destroy((*C.shape_msgs__msg__MeshTriangle)(pointer_to_free))
}

func (t _MeshTriangleTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MeshTriangle)
	mem := (*C.shape_msgs__msg__MeshTriangle)(dst)
	cSlice_vertex_indices := mem.vertex_indices[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_vertex_indices)), m.VertexIndices[:])
}

func (t _MeshTriangleTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MeshTriangle)
	mem := (*C.shape_msgs__msg__MeshTriangle)(ros2_message_buffer)
	cSlice_vertex_indices := mem.vertex_indices[:]
	humble.Uint32ArrayToGo(m.VertexIndices[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_vertex_indices)))
}

func (t _MeshTriangleTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__shape_msgs__msg__MeshTriangle())
}

type CMeshTriangle = C.shape_msgs__msg__MeshTriangle
type CMeshTriangleSequence = C.shape_msgs__msg__MeshTriangle__Sequence

func MeshTriangleSequenceToGo(goSlice *[]MeshTriangle, cSlice CMeshTriangleSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MeshTriangle, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MeshTriangleTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MeshTriangleSequenceToC(cSlice *CMeshTriangleSequence, goSlice []MeshTriangle) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.shape_msgs__msg__MeshTriangle)(C.malloc(C.sizeof_struct_shape_msgs__msg__MeshTriangle * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MeshTriangleTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MeshTriangleArrayToGo(goSlice []MeshTriangle, cSlice []CMeshTriangle) {
	for i := 0; i < len(cSlice); i++ {
		MeshTriangleTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MeshTriangleArrayToC(cSlice []CMeshTriangle, goSlice []MeshTriangle) {
	for i := 0; i < len(goSlice); i++ {
		MeshTriangleTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

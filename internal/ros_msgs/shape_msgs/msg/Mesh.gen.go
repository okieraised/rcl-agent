// Code generated by ros2gen. DO NOT EDIT.

package shape_msgs_msg

import (
	"unsafe"

	geometry_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geometry_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <shape_msgs/msg/mesh.h>

*/
import "C"

func init() {
	humble.RegisterMessage("shape_msgs/Mesh", MeshTypeSupport)
	humble.RegisterMessage("shape_msgs/msg/Mesh", MeshTypeSupport)
}

type Mesh struct {
	Triangles []MeshTriangle            `yaml:"triangles"` // List of triangles; the index values refer to positions in vertices[].
	Vertices  []geometry_msgs_msg.Point `yaml:"vertices"`  // The actual vertices that make up the mesh.
}

// NewMesh creates a new Mesh with default values.
func NewMesh() *Mesh {
	self := Mesh{}
	self.SetDefaults()
	return &self
}

func (t *Mesh) Clone() *Mesh {
	c := &Mesh{}
	if t.Triangles != nil {
		c.Triangles = make([]MeshTriangle, len(t.Triangles))
		CloneMeshTriangleSlice(c.Triangles, t.Triangles)
	}
	if t.Vertices != nil {
		c.Vertices = make([]geometry_msgs_msg.Point, len(t.Vertices))
		geometry_msgs_msg.ClonePointSlice(c.Vertices, t.Vertices)
	}
	return c
}

func (t *Mesh) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Mesh) SetDefaults() {
	t.Triangles = nil
	t.Vertices = nil
}

func (t *Mesh) GetTypeSupport() humble.MessageTypeSupport {
	return MeshTypeSupport
}

// MeshPublisher wraps humble.Publisher to provide type safe helper
// functions
type MeshPublisher struct {
	*humble.Publisher
}

// NewMeshPublisher creates and returns a new publisher for the
// Mesh
func NewMeshPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MeshPublisher, error) {
	pub, err := node.NewPublisher(topicName, MeshTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MeshPublisher{pub}, nil
}

func (p *MeshPublisher) Publish(msg *Mesh) error {
	return p.Publisher.Publish(msg)
}

// MeshSubscription wraps humble.Subscription to provide type safe helper
// functions
type MeshSubscription struct {
	*humble.Subscription
}

// MeshSubscriptionCallback type is used to provide a subscription
// handler function for a MeshSubscription.
type MeshSubscriptionCallback func(msg *Mesh, info *humble.MessageInfo, err error)

// NewMeshSubscription creates and returns a new subscription for the
// Mesh
func NewMeshSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MeshSubscriptionCallback) (*MeshSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Mesh
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MeshTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MeshSubscription{sub}, nil
}

func (s *MeshSubscription) TakeMessage(out *Mesh) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMeshSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMeshSlice(dst, src []Mesh) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MeshTypeSupport humble.MessageTypeSupport = _MeshTypeSupport{}

type _MeshTypeSupport struct{}

func (t _MeshTypeSupport) New() humble.Message {
	return NewMesh()
}

func (t _MeshTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.shape_msgs__msg__Mesh
	return (unsafe.Pointer)(C.shape_msgs__msg__Mesh__create())
}

func (t _MeshTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.shape_msgs__msg__Mesh__destroy((*C.shape_msgs__msg__Mesh)(pointer_to_free))
}

func (t _MeshTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Mesh)
	mem := (*C.shape_msgs__msg__Mesh)(dst)
	MeshTriangleSequenceToC(&mem.triangles, m.Triangles)
	geometry_msgs_msg.PointSequenceToC((*geometry_msgs_msg.CPointSequence)(unsafe.Pointer(&mem.vertices)), m.Vertices)
}

func (t _MeshTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Mesh)
	mem := (*C.shape_msgs__msg__Mesh)(ros2_message_buffer)
	MeshTriangleSequenceToGo(&m.Triangles, mem.triangles)
	geometry_msgs_msg.PointSequenceToGo(&m.Vertices, *(*geometry_msgs_msg.CPointSequence)(unsafe.Pointer(&mem.vertices)))
}

func (t _MeshTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__shape_msgs__msg__Mesh())
}

type CMesh = C.shape_msgs__msg__Mesh
type CMeshSequence = C.shape_msgs__msg__Mesh__Sequence

func MeshSequenceToGo(goSlice *[]Mesh, cSlice CMeshSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Mesh, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MeshTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MeshSequenceToC(cSlice *CMeshSequence, goSlice []Mesh) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.shape_msgs__msg__Mesh)(C.malloc(C.sizeof_struct_shape_msgs__msg__Mesh * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MeshTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MeshArrayToGo(goSlice []Mesh, cSlice []CMesh) {
	for i := 0; i < len(cSlice); i++ {
		MeshTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MeshArrayToC(cSlice []CMesh, goSlice []Mesh) {
	for i := 0; i < len(goSlice); i++ {
		MeshTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

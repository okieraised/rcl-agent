// Code generated by ros2gen. DO NOT EDIT.

package geographic_msgs_srv

import (
	"unsafe"

	geographic_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geographic_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/srv/get_geographic_map.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geographic_msgs/GetGeographicMap_Request", GetGeographicMap_RequestTypeSupport)
	humble.RegisterMessage("geographic_msgs/srv/GetGeographicMap_Request", GetGeographicMap_RequestTypeSupport)
}

type GetGeographicMap_Request struct {
	Url    string                          `yaml:"url"`    // where to read map data
	Bounds geographic_msgs_msg.BoundingBox `yaml:"bounds"` // Bounding box for the desired map.  If all zeros, provide all dataavailable from the specified URL.
}

// NewGetGeographicMap_Request creates a new GetGeographicMap_Request with default values.
func NewGetGeographicMap_Request() *GetGeographicMap_Request {
	self := GetGeographicMap_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetGeographicMap_Request) Clone() *GetGeographicMap_Request {
	c := &GetGeographicMap_Request{}
	c.Url = t.Url
	c.Bounds = *t.Bounds.Clone()
	return c
}

func (t *GetGeographicMap_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GetGeographicMap_Request) SetDefaults() {
	t.Url = ""
	t.Bounds.SetDefaults()
}

func (t *GetGeographicMap_Request) GetTypeSupport() humble.MessageTypeSupport {
	return GetGeographicMap_RequestTypeSupport
}

// GetGeographicMap_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type GetGeographicMap_RequestPublisher struct {
	*humble.Publisher
}

// NewGetGeographicMap_RequestPublisher creates and returns a new publisher for the
// GetGeographicMap_Request
func NewGetGeographicMap_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GetGeographicMap_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, GetGeographicMap_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetGeographicMap_RequestPublisher{pub}, nil
}

func (p *GetGeographicMap_RequestPublisher) Publish(msg *GetGeographicMap_Request) error {
	return p.Publisher.Publish(msg)
}

// GetGeographicMap_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type GetGeographicMap_RequestSubscription struct {
	*humble.Subscription
}

// GetGeographicMap_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetGeographicMap_RequestSubscription.
type GetGeographicMap_RequestSubscriptionCallback func(msg *GetGeographicMap_Request, info *humble.MessageInfo, err error)

// NewGetGeographicMap_RequestSubscription creates and returns a new subscription for the
// GetGeographicMap_Request
func NewGetGeographicMap_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GetGeographicMap_RequestSubscriptionCallback) (*GetGeographicMap_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GetGeographicMap_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetGeographicMap_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetGeographicMap_RequestSubscription{sub}, nil
}

func (s *GetGeographicMap_RequestSubscription) TakeMessage(out *GetGeographicMap_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetGeographicMap_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetGeographicMap_RequestSlice(dst, src []GetGeographicMap_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetGeographicMap_RequestTypeSupport humble.MessageTypeSupport = _GetGeographicMap_RequestTypeSupport{}

type _GetGeographicMap_RequestTypeSupport struct{}

func (t _GetGeographicMap_RequestTypeSupport) New() humble.Message {
	return NewGetGeographicMap_Request()
}

func (t _GetGeographicMap_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__srv__GetGeographicMap_Request
	return (unsafe.Pointer)(C.geographic_msgs__srv__GetGeographicMap_Request__create())
}

func (t _GetGeographicMap_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__srv__GetGeographicMap_Request__destroy((*C.geographic_msgs__srv__GetGeographicMap_Request)(pointer_to_free))
}

func (t _GetGeographicMap_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GetGeographicMap_Request)
	mem := (*C.geographic_msgs__srv__GetGeographicMap_Request)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.url), m.Url)
	geographic_msgs_msg.BoundingBoxTypeSupport.AsCStruct(unsafe.Pointer(&mem.bounds), &m.Bounds)
}

func (t _GetGeographicMap_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetGeographicMap_Request)
	mem := (*C.geographic_msgs__srv__GetGeographicMap_Request)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Url, unsafe.Pointer(&mem.url))
	geographic_msgs_msg.BoundingBoxTypeSupport.AsGoStruct(&m.Bounds, unsafe.Pointer(&mem.bounds))
}

func (t _GetGeographicMap_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__srv__GetGeographicMap_Request())
}

type CGetGeographicMap_Request = C.geographic_msgs__srv__GetGeographicMap_Request
type CGetGeographicMap_RequestSequence = C.geographic_msgs__srv__GetGeographicMap_Request__Sequence

func GetGeographicMap_RequestSequenceToGo(goSlice *[]GetGeographicMap_Request, cSlice CGetGeographicMap_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetGeographicMap_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetGeographicMap_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetGeographicMap_RequestSequenceToC(cSlice *CGetGeographicMap_RequestSequence, goSlice []GetGeographicMap_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__srv__GetGeographicMap_Request)(C.malloc(C.sizeof_struct_geographic_msgs__srv__GetGeographicMap_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetGeographicMap_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetGeographicMap_RequestArrayToGo(goSlice []GetGeographicMap_Request, cSlice []CGetGeographicMap_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetGeographicMap_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetGeographicMap_RequestArrayToC(cSlice []CGetGeographicMap_Request, goSlice []GetGeographicMap_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetGeographicMap_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

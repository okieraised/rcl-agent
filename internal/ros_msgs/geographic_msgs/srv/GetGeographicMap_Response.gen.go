// Code generated by ros2gen. DO NOT EDIT.

package geographic_msgs_srv

import (
	"unsafe"

	geographic_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/geographic_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/srv/get_geographic_map.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geographic_msgs/GetGeographicMap_Response", GetGeographicMap_ResponseTypeSupport)
	humble.RegisterMessage("geographic_msgs/srv/GetGeographicMap_Response", GetGeographicMap_ResponseTypeSupport)
}

type GetGeographicMap_Response struct {
	Success bool                              `yaml:"success"` // true if the call succeeded
	Status  string                            `yaml:"status"`  // more details
	Map     geographic_msgs_msg.GeographicMap `yaml:"map"`     // The requested map, its bounds may differ from the requested bounds.
}

// NewGetGeographicMap_Response creates a new GetGeographicMap_Response with default values.
func NewGetGeographicMap_Response() *GetGeographicMap_Response {
	self := GetGeographicMap_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetGeographicMap_Response) Clone() *GetGeographicMap_Response {
	c := &GetGeographicMap_Response{}
	c.Success = t.Success
	c.Status = t.Status
	c.Map = *t.Map.Clone()
	return c
}

func (t *GetGeographicMap_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GetGeographicMap_Response) SetDefaults() {
	t.Success = false
	t.Status = ""
	t.Map.SetDefaults()
}

func (t *GetGeographicMap_Response) GetTypeSupport() humble.MessageTypeSupport {
	return GetGeographicMap_ResponseTypeSupport
}

// GetGeographicMap_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type GetGeographicMap_ResponsePublisher struct {
	*humble.Publisher
}

// NewGetGeographicMap_ResponsePublisher creates and returns a new publisher for the
// GetGeographicMap_Response
func NewGetGeographicMap_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GetGeographicMap_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, GetGeographicMap_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetGeographicMap_ResponsePublisher{pub}, nil
}

func (p *GetGeographicMap_ResponsePublisher) Publish(msg *GetGeographicMap_Response) error {
	return p.Publisher.Publish(msg)
}

// GetGeographicMap_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type GetGeographicMap_ResponseSubscription struct {
	*humble.Subscription
}

// GetGeographicMap_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetGeographicMap_ResponseSubscription.
type GetGeographicMap_ResponseSubscriptionCallback func(msg *GetGeographicMap_Response, info *humble.MessageInfo, err error)

// NewGetGeographicMap_ResponseSubscription creates and returns a new subscription for the
// GetGeographicMap_Response
func NewGetGeographicMap_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GetGeographicMap_ResponseSubscriptionCallback) (*GetGeographicMap_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GetGeographicMap_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetGeographicMap_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetGeographicMap_ResponseSubscription{sub}, nil
}

func (s *GetGeographicMap_ResponseSubscription) TakeMessage(out *GetGeographicMap_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetGeographicMap_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetGeographicMap_ResponseSlice(dst, src []GetGeographicMap_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetGeographicMap_ResponseTypeSupport humble.MessageTypeSupport = _GetGeographicMap_ResponseTypeSupport{}

type _GetGeographicMap_ResponseTypeSupport struct{}

func (t _GetGeographicMap_ResponseTypeSupport) New() humble.Message {
	return NewGetGeographicMap_Response()
}

func (t _GetGeographicMap_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__srv__GetGeographicMap_Response
	return (unsafe.Pointer)(C.geographic_msgs__srv__GetGeographicMap_Response__create())
}

func (t _GetGeographicMap_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__srv__GetGeographicMap_Response__destroy((*C.geographic_msgs__srv__GetGeographicMap_Response)(pointer_to_free))
}

func (t _GetGeographicMap_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GetGeographicMap_Response)
	mem := (*C.geographic_msgs__srv__GetGeographicMap_Response)(dst)
	mem.success = C.bool(m.Success)
	humble.StringAsCStruct(unsafe.Pointer(&mem.status), m.Status)
	geographic_msgs_msg.GeographicMapTypeSupport.AsCStruct(unsafe.Pointer(&mem._map), &m.Map)
}

func (t _GetGeographicMap_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetGeographicMap_Response)
	mem := (*C.geographic_msgs__srv__GetGeographicMap_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	humble.StringAsGoStruct(&m.Status, unsafe.Pointer(&mem.status))
	geographic_msgs_msg.GeographicMapTypeSupport.AsGoStruct(&m.Map, unsafe.Pointer(&mem._map))
}

func (t _GetGeographicMap_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__srv__GetGeographicMap_Response())
}

type CGetGeographicMap_Response = C.geographic_msgs__srv__GetGeographicMap_Response
type CGetGeographicMap_ResponseSequence = C.geographic_msgs__srv__GetGeographicMap_Response__Sequence

func GetGeographicMap_ResponseSequenceToGo(goSlice *[]GetGeographicMap_Response, cSlice CGetGeographicMap_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetGeographicMap_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetGeographicMap_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetGeographicMap_ResponseSequenceToC(cSlice *CGetGeographicMap_ResponseSequence, goSlice []GetGeographicMap_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__srv__GetGeographicMap_Response)(C.malloc(C.sizeof_struct_geographic_msgs__srv__GetGeographicMap_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetGeographicMap_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetGeographicMap_ResponseArrayToGo(goSlice []GetGeographicMap_Response, cSlice []CGetGeographicMap_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetGeographicMap_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetGeographicMap_ResponseArrayToC(cSlice []CGetGeographicMap_Response, goSlice []GetGeographicMap_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetGeographicMap_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

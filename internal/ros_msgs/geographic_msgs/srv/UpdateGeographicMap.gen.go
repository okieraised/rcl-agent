// Code generated by ros2gen. DO NOT EDIT.

package geographic_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <geographic_msgs/srv/update_geographic_map.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("geographic_msgs/UpdateGeographicMap", UpdateGeographicMapTypeSupport)
	humble.RegisterService("geographic_msgs/srv/UpdateGeographicMap", UpdateGeographicMapTypeSupport)
}

type _UpdateGeographicMapTypeSupport struct{}

func (s _UpdateGeographicMapTypeSupport) Request() humble.MessageTypeSupport {
	return UpdateGeographicMap_RequestTypeSupport
}

func (s _UpdateGeographicMapTypeSupport) Response() humble.MessageTypeSupport {
	return UpdateGeographicMap_ResponseTypeSupport
}

func (s _UpdateGeographicMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__geographic_msgs__srv__UpdateGeographicMap())
}

// Modifying this variable is undefined behavior.
var UpdateGeographicMapTypeSupport humble.ServiceTypeSupport = _UpdateGeographicMapTypeSupport{}

// UpdateGeographicMapClient wraps humble.Client to provide type safe helper
// functions
type UpdateGeographicMapClient struct {
	*humble.Client
}

// NewUpdateGeographicMapClient creates and returns a new client for the
// UpdateGeographicMap
func NewUpdateGeographicMapClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*UpdateGeographicMapClient, error) {
	client, err := node.NewClient(serviceName, UpdateGeographicMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UpdateGeographicMapClient{client}, nil
}

func (s *UpdateGeographicMapClient) Send(ctx context.Context, req *UpdateGeographicMap_Request) (*UpdateGeographicMap_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*UpdateGeographicMap_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type UpdateGeographicMapServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s UpdateGeographicMapServiceResponseSender) SendResponse(resp *UpdateGeographicMap_Response) error {
	return s.sender.SendResponse(resp)
}

type UpdateGeographicMapServiceRequestHandler func(*humble.ServiceInfo, *UpdateGeographicMap_Request, UpdateGeographicMapServiceResponseSender)

// UpdateGeographicMapService wraps humble.Service to provide type safe helper
// functions
type UpdateGeographicMapService struct {
	*humble.Service
}

// NewUpdateGeographicMapService creates and returns a new service for the
// UpdateGeographicMap
func NewUpdateGeographicMapService(node *humble.Node, name string, options *humble.ServiceOptions, handler UpdateGeographicMapServiceRequestHandler) (*UpdateGeographicMapService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*UpdateGeographicMap_Request)
		responseSender := UpdateGeographicMapServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, UpdateGeographicMapTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &UpdateGeographicMapService{service}, nil
}

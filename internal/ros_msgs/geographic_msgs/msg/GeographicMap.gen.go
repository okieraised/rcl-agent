// Code generated by ros2gen. DO NOT EDIT.

package geographic_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	unique_identifier_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/unique_identifier_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/geographic_map.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geographic_msgs/GeographicMap", GeographicMapTypeSupport)
	humble.RegisterMessage("geographic_msgs/msg/GeographicMap", GeographicMapTypeSupport)
}

type GeographicMap struct {
	Header   std_msgs_msg.Header             `yaml:"header"`   // stamp specifies time
	Id       unique_identifier_msgs_msg.UUID `yaml:"id"`       // identifier for this map
	Bounds   BoundingBox                     `yaml:"bounds"`   // 2D bounding box containing map
	Points   []WayPoint                      `yaml:"points"`   // way-points
	Features []MapFeature                    `yaml:"features"` // map features
	Props    []KeyValue                      `yaml:"props"`    // map properties
}

// NewGeographicMap creates a new GeographicMap with default values.
func NewGeographicMap() *GeographicMap {
	self := GeographicMap{}
	self.SetDefaults()
	return &self
}

func (t *GeographicMap) Clone() *GeographicMap {
	c := &GeographicMap{}
	c.Header = *t.Header.Clone()
	c.Id = *t.Id.Clone()
	c.Bounds = *t.Bounds.Clone()
	if t.Points != nil {
		c.Points = make([]WayPoint, len(t.Points))
		CloneWayPointSlice(c.Points, t.Points)
	}
	if t.Features != nil {
		c.Features = make([]MapFeature, len(t.Features))
		CloneMapFeatureSlice(c.Features, t.Features)
	}
	if t.Props != nil {
		c.Props = make([]KeyValue, len(t.Props))
		CloneKeyValueSlice(c.Props, t.Props)
	}
	return c
}

func (t *GeographicMap) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GeographicMap) SetDefaults() {
	t.Header.SetDefaults()
	t.Id.SetDefaults()
	t.Bounds.SetDefaults()
	t.Points = nil
	t.Features = nil
	t.Props = nil
}

func (t *GeographicMap) GetTypeSupport() humble.MessageTypeSupport {
	return GeographicMapTypeSupport
}

// GeographicMapPublisher wraps humble.Publisher to provide type safe helper
// functions
type GeographicMapPublisher struct {
	*humble.Publisher
}

// NewGeographicMapPublisher creates and returns a new publisher for the
// GeographicMap
func NewGeographicMapPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GeographicMapPublisher, error) {
	pub, err := node.NewPublisher(topicName, GeographicMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeographicMapPublisher{pub}, nil
}

func (p *GeographicMapPublisher) Publish(msg *GeographicMap) error {
	return p.Publisher.Publish(msg)
}

// GeographicMapSubscription wraps humble.Subscription to provide type safe helper
// functions
type GeographicMapSubscription struct {
	*humble.Subscription
}

// GeographicMapSubscriptionCallback type is used to provide a subscription
// handler function for a GeographicMapSubscription.
type GeographicMapSubscriptionCallback func(msg *GeographicMap, info *humble.MessageInfo, err error)

// NewGeographicMapSubscription creates and returns a new subscription for the
// GeographicMap
func NewGeographicMapSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GeographicMapSubscriptionCallback) (*GeographicMapSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GeographicMap
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GeographicMapTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeographicMapSubscription{sub}, nil
}

func (s *GeographicMapSubscription) TakeMessage(out *GeographicMap) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeographicMapSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeographicMapSlice(dst, src []GeographicMap) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeographicMapTypeSupport humble.MessageTypeSupport = _GeographicMapTypeSupport{}

type _GeographicMapTypeSupport struct{}

func (t _GeographicMapTypeSupport) New() humble.Message {
	return NewGeographicMap()
}

func (t _GeographicMapTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__GeographicMap
	return (unsafe.Pointer)(C.geographic_msgs__msg__GeographicMap__create())
}

func (t _GeographicMapTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__GeographicMap__destroy((*C.geographic_msgs__msg__GeographicMap)(pointer_to_free))
}

func (t _GeographicMapTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GeographicMap)
	mem := (*C.geographic_msgs__msg__GeographicMap)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.id), &m.Id)
	BoundingBoxTypeSupport.AsCStruct(unsafe.Pointer(&mem.bounds), &m.Bounds)
	WayPointSequenceToC(&mem.points, m.Points)
	MapFeatureSequenceToC(&mem.features, m.Features)
	KeyValueSequenceToC(&mem.props, m.Props)
}

func (t _GeographicMapTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeographicMap)
	mem := (*C.geographic_msgs__msg__GeographicMap)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
	BoundingBoxTypeSupport.AsGoStruct(&m.Bounds, unsafe.Pointer(&mem.bounds))
	WayPointSequenceToGo(&m.Points, mem.points)
	MapFeatureSequenceToGo(&m.Features, mem.features)
	KeyValueSequenceToGo(&m.Props, mem.props)
}

func (t _GeographicMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__GeographicMap())
}

type CGeographicMap = C.geographic_msgs__msg__GeographicMap
type CGeographicMapSequence = C.geographic_msgs__msg__GeographicMap__Sequence

func GeographicMapSequenceToGo(goSlice *[]GeographicMap, cSlice CGeographicMapSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeographicMap, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeographicMapTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GeographicMapSequenceToC(cSlice *CGeographicMapSequence, goSlice []GeographicMap) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__GeographicMap)(C.malloc(C.sizeof_struct_geographic_msgs__msg__GeographicMap * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeographicMapTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GeographicMapArrayToGo(goSlice []GeographicMap, cSlice []CGeographicMap) {
	for i := 0; i < len(cSlice); i++ {
		GeographicMapTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GeographicMapArrayToC(cSlice []CGeographicMap, goSlice []GeographicMap) {
	for i := 0; i < len(goSlice); i++ {
		GeographicMapTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package geographic_msgs_msg

import (
	"unsafe"

	unique_identifier_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/unique_identifier_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/map_feature.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geographic_msgs/MapFeature", MapFeatureTypeSupport)
	humble.RegisterMessage("geographic_msgs/msg/MapFeature", MapFeatureTypeSupport)
}

type MapFeature struct {
	Id         unique_identifier_msgs_msg.UUID   `yaml:"id"`         // Unique feature identifier
	Components []unique_identifier_msgs_msg.UUID `yaml:"components"` // Sequence of feature components
	Props      []KeyValue                        `yaml:"props"`      // Key/value properties for this feature
}

// NewMapFeature creates a new MapFeature with default values.
func NewMapFeature() *MapFeature {
	self := MapFeature{}
	self.SetDefaults()
	return &self
}

func (t *MapFeature) Clone() *MapFeature {
	c := &MapFeature{}
	c.Id = *t.Id.Clone()
	if t.Components != nil {
		c.Components = make([]unique_identifier_msgs_msg.UUID, len(t.Components))
		unique_identifier_msgs_msg.CloneUUIDSlice(c.Components, t.Components)
	}
	if t.Props != nil {
		c.Props = make([]KeyValue, len(t.Props))
		CloneKeyValueSlice(c.Props, t.Props)
	}
	return c
}

func (t *MapFeature) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MapFeature) SetDefaults() {
	t.Id.SetDefaults()
	t.Components = nil
	t.Props = nil
}

func (t *MapFeature) GetTypeSupport() humble.MessageTypeSupport {
	return MapFeatureTypeSupport
}

// MapFeaturePublisher wraps humble.Publisher to provide type safe helper
// functions
type MapFeaturePublisher struct {
	*humble.Publisher
}

// NewMapFeaturePublisher creates and returns a new publisher for the
// MapFeature
func NewMapFeaturePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MapFeaturePublisher, error) {
	pub, err := node.NewPublisher(topicName, MapFeatureTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MapFeaturePublisher{pub}, nil
}

func (p *MapFeaturePublisher) Publish(msg *MapFeature) error {
	return p.Publisher.Publish(msg)
}

// MapFeatureSubscription wraps humble.Subscription to provide type safe helper
// functions
type MapFeatureSubscription struct {
	*humble.Subscription
}

// MapFeatureSubscriptionCallback type is used to provide a subscription
// handler function for a MapFeatureSubscription.
type MapFeatureSubscriptionCallback func(msg *MapFeature, info *humble.MessageInfo, err error)

// NewMapFeatureSubscription creates and returns a new subscription for the
// MapFeature
func NewMapFeatureSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MapFeatureSubscriptionCallback) (*MapFeatureSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MapFeature
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MapFeatureTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MapFeatureSubscription{sub}, nil
}

func (s *MapFeatureSubscription) TakeMessage(out *MapFeature) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMapFeatureSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMapFeatureSlice(dst, src []MapFeature) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MapFeatureTypeSupport humble.MessageTypeSupport = _MapFeatureTypeSupport{}

type _MapFeatureTypeSupport struct{}

func (t _MapFeatureTypeSupport) New() humble.Message {
	return NewMapFeature()
}

func (t _MapFeatureTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__MapFeature
	return (unsafe.Pointer)(C.geographic_msgs__msg__MapFeature__create())
}

func (t _MapFeatureTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__MapFeature__destroy((*C.geographic_msgs__msg__MapFeature)(pointer_to_free))
}

func (t _MapFeatureTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MapFeature)
	mem := (*C.geographic_msgs__msg__MapFeature)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.id), &m.Id)
	unique_identifier_msgs_msg.UUIDSequenceToC((*unique_identifier_msgs_msg.CUUIDSequence)(unsafe.Pointer(&mem.components)), m.Components)
	KeyValueSequenceToC(&mem.props, m.Props)
}

func (t _MapFeatureTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MapFeature)
	mem := (*C.geographic_msgs__msg__MapFeature)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
	unique_identifier_msgs_msg.UUIDSequenceToGo(&m.Components, *(*unique_identifier_msgs_msg.CUUIDSequence)(unsafe.Pointer(&mem.components)))
	KeyValueSequenceToGo(&m.Props, mem.props)
}

func (t _MapFeatureTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__MapFeature())
}

type CMapFeature = C.geographic_msgs__msg__MapFeature
type CMapFeatureSequence = C.geographic_msgs__msg__MapFeature__Sequence

func MapFeatureSequenceToGo(goSlice *[]MapFeature, cSlice CMapFeatureSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MapFeature, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MapFeatureTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MapFeatureSequenceToC(cSlice *CMapFeatureSequence, goSlice []MapFeature) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__MapFeature)(C.malloc(C.sizeof_struct_geographic_msgs__msg__MapFeature * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MapFeatureTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MapFeatureArrayToGo(goSlice []MapFeature, cSlice []CMapFeature) {
	for i := 0; i < len(cSlice); i++ {
		MapFeatureTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MapFeatureArrayToC(cSlice []CMapFeature, goSlice []MapFeature) {
	for i := 0; i < len(goSlice); i++ {
		MapFeatureTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

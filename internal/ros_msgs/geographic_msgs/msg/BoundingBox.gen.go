// Code generated by ros2gen. DO NOT EDIT.

package geographic_msgs_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/bounding_box.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geographic_msgs/BoundingBox", BoundingBoxTypeSupport)
	humble.RegisterMessage("geographic_msgs/msg/BoundingBox", BoundingBoxTypeSupport)
}

type BoundingBox struct {
	MinPt GeoPoint `yaml:"min_pt"` // lowest and most Southwestern corner
	MaxPt GeoPoint `yaml:"max_pt"` // highest and most Northeastern corner
}

// NewBoundingBox creates a new BoundingBox with default values.
func NewBoundingBox() *BoundingBox {
	self := BoundingBox{}
	self.SetDefaults()
	return &self
}

func (t *BoundingBox) Clone() *BoundingBox {
	c := &BoundingBox{}
	c.MinPt = *t.MinPt.Clone()
	c.MaxPt = *t.MaxPt.Clone()
	return c
}

func (t *BoundingBox) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *BoundingBox) SetDefaults() {
	t.MinPt.SetDefaults()
	t.MaxPt.SetDefaults()
}

func (t *BoundingBox) GetTypeSupport() humble.MessageTypeSupport {
	return BoundingBoxTypeSupport
}

// BoundingBoxPublisher wraps humble.Publisher to provide type safe helper
// functions
type BoundingBoxPublisher struct {
	*humble.Publisher
}

// NewBoundingBoxPublisher creates and returns a new publisher for the
// BoundingBox
func NewBoundingBoxPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*BoundingBoxPublisher, error) {
	pub, err := node.NewPublisher(topicName, BoundingBoxTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &BoundingBoxPublisher{pub}, nil
}

func (p *BoundingBoxPublisher) Publish(msg *BoundingBox) error {
	return p.Publisher.Publish(msg)
}

// BoundingBoxSubscription wraps humble.Subscription to provide type safe helper
// functions
type BoundingBoxSubscription struct {
	*humble.Subscription
}

// BoundingBoxSubscriptionCallback type is used to provide a subscription
// handler function for a BoundingBoxSubscription.
type BoundingBoxSubscriptionCallback func(msg *BoundingBox, info *humble.MessageInfo, err error)

// NewBoundingBoxSubscription creates and returns a new subscription for the
// BoundingBox
func NewBoundingBoxSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback BoundingBoxSubscriptionCallback) (*BoundingBoxSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg BoundingBox
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, BoundingBoxTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &BoundingBoxSubscription{sub}, nil
}

func (s *BoundingBoxSubscription) TakeMessage(out *BoundingBox) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBoundingBoxSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBoundingBoxSlice(dst, src []BoundingBox) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var BoundingBoxTypeSupport humble.MessageTypeSupport = _BoundingBoxTypeSupport{}

type _BoundingBoxTypeSupport struct{}

func (t _BoundingBoxTypeSupport) New() humble.Message {
	return NewBoundingBox()
}

func (t _BoundingBoxTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__BoundingBox
	return (unsafe.Pointer)(C.geographic_msgs__msg__BoundingBox__create())
}

func (t _BoundingBoxTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__BoundingBox__destroy((*C.geographic_msgs__msg__BoundingBox)(pointer_to_free))
}

func (t _BoundingBoxTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*BoundingBox)
	mem := (*C.geographic_msgs__msg__BoundingBox)(dst)
	GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.min_pt), &m.MinPt)
	GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.max_pt), &m.MaxPt)
}

func (t _BoundingBoxTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*BoundingBox)
	mem := (*C.geographic_msgs__msg__BoundingBox)(ros2_message_buffer)
	GeoPointTypeSupport.AsGoStruct(&m.MinPt, unsafe.Pointer(&mem.min_pt))
	GeoPointTypeSupport.AsGoStruct(&m.MaxPt, unsafe.Pointer(&mem.max_pt))
}

func (t _BoundingBoxTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__BoundingBox())
}

type CBoundingBox = C.geographic_msgs__msg__BoundingBox
type CBoundingBoxSequence = C.geographic_msgs__msg__BoundingBox__Sequence

func BoundingBoxSequenceToGo(goSlice *[]BoundingBox, cSlice CBoundingBoxSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]BoundingBox, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		BoundingBoxTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func BoundingBoxSequenceToC(cSlice *CBoundingBoxSequence, goSlice []BoundingBox) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__BoundingBox)(C.malloc(C.sizeof_struct_geographic_msgs__msg__BoundingBox * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		BoundingBoxTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func BoundingBoxArrayToGo(goSlice []BoundingBox, cSlice []CBoundingBox) {
	for i := 0; i < len(cSlice); i++ {
		BoundingBoxTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func BoundingBoxArrayToC(cSlice []CBoundingBox, goSlice []BoundingBox) {
	for i := 0; i < len(goSlice); i++ {
		BoundingBoxTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

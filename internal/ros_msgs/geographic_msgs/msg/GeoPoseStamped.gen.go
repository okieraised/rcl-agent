// Code generated by ros2gen. DO NOT EDIT.

package geographic_msgs_msg

import (
	"unsafe"

	std_msgs_msg "github.com/okieraised/monitoring-agent/internal/ros_msgs/std_msgs/msg"
	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/geo_pose_stamped.h>

*/
import "C"

func init() {
	humble.RegisterMessage("geographic_msgs/GeoPoseStamped", GeoPoseStampedTypeSupport)
	humble.RegisterMessage("geographic_msgs/msg/GeoPoseStamped", GeoPoseStampedTypeSupport)
}

type GeoPoseStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Pose   GeoPose             `yaml:"pose"`
}

// NewGeoPoseStamped creates a new GeoPoseStamped with default values.
func NewGeoPoseStamped() *GeoPoseStamped {
	self := GeoPoseStamped{}
	self.SetDefaults()
	return &self
}

func (t *GeoPoseStamped) Clone() *GeoPoseStamped {
	c := &GeoPoseStamped{}
	c.Header = *t.Header.Clone()
	c.Pose = *t.Pose.Clone()
	return c
}

func (t *GeoPoseStamped) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GeoPoseStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.Pose.SetDefaults()
}

func (t *GeoPoseStamped) GetTypeSupport() humble.MessageTypeSupport {
	return GeoPoseStampedTypeSupport
}

// GeoPoseStampedPublisher wraps humble.Publisher to provide type safe helper
// functions
type GeoPoseStampedPublisher struct {
	*humble.Publisher
}

// NewGeoPoseStampedPublisher creates and returns a new publisher for the
// GeoPoseStamped
func NewGeoPoseStampedPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GeoPoseStampedPublisher, error) {
	pub, err := node.NewPublisher(topicName, GeoPoseStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeoPoseStampedPublisher{pub}, nil
}

func (p *GeoPoseStampedPublisher) Publish(msg *GeoPoseStamped) error {
	return p.Publisher.Publish(msg)
}

// GeoPoseStampedSubscription wraps humble.Subscription to provide type safe helper
// functions
type GeoPoseStampedSubscription struct {
	*humble.Subscription
}

// GeoPoseStampedSubscriptionCallback type is used to provide a subscription
// handler function for a GeoPoseStampedSubscription.
type GeoPoseStampedSubscriptionCallback func(msg *GeoPoseStamped, info *humble.MessageInfo, err error)

// NewGeoPoseStampedSubscription creates and returns a new subscription for the
// GeoPoseStamped
func NewGeoPoseStampedSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GeoPoseStampedSubscriptionCallback) (*GeoPoseStampedSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GeoPoseStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GeoPoseStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeoPoseStampedSubscription{sub}, nil
}

func (s *GeoPoseStampedSubscription) TakeMessage(out *GeoPoseStamped) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeoPoseStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeoPoseStampedSlice(dst, src []GeoPoseStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeoPoseStampedTypeSupport humble.MessageTypeSupport = _GeoPoseStampedTypeSupport{}

type _GeoPoseStampedTypeSupport struct{}

func (t _GeoPoseStampedTypeSupport) New() humble.Message {
	return NewGeoPoseStamped()
}

func (t _GeoPoseStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__GeoPoseStamped
	return (unsafe.Pointer)(C.geographic_msgs__msg__GeoPoseStamped__create())
}

func (t _GeoPoseStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__GeoPoseStamped__destroy((*C.geographic_msgs__msg__GeoPoseStamped)(pointer_to_free))
}

func (t _GeoPoseStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GeoPoseStamped)
	mem := (*C.geographic_msgs__msg__GeoPoseStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	GeoPoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
}

func (t _GeoPoseStampedTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeoPoseStamped)
	mem := (*C.geographic_msgs__msg__GeoPoseStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	GeoPoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
}

func (t _GeoPoseStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__GeoPoseStamped())
}

type CGeoPoseStamped = C.geographic_msgs__msg__GeoPoseStamped
type CGeoPoseStampedSequence = C.geographic_msgs__msg__GeoPoseStamped__Sequence

func GeoPoseStampedSequenceToGo(goSlice *[]GeoPoseStamped, cSlice CGeoPoseStampedSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeoPoseStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeoPoseStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GeoPoseStampedSequenceToC(cSlice *CGeoPoseStampedSequence, goSlice []GeoPoseStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__GeoPoseStamped)(C.malloc(C.sizeof_struct_geographic_msgs__msg__GeoPoseStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeoPoseStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GeoPoseStampedArrayToGo(goSlice []GeoPoseStamped, cSlice []CGeoPoseStamped) {
	for i := 0; i < len(cSlice); i++ {
		GeoPoseStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GeoPoseStampedArrayToC(cSlice []CGeoPoseStamped, goSlice []GeoPoseStamped) {
	for i := 0; i < len(goSlice); i++ {
		GeoPoseStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

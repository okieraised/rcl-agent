// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/srv/set_parameters.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("rcl_interfaces/SetParameters", SetParametersTypeSupport)
	humble.RegisterService("rcl_interfaces/srv/SetParameters", SetParametersTypeSupport)
}

type _SetParametersTypeSupport struct {}

func (s _SetParametersTypeSupport) Request() humble.MessageTypeSupport {
	return SetParameters_RequestTypeSupport
}

func (s _SetParametersTypeSupport) Response() humble.MessageTypeSupport {
	return SetParameters_ResponseTypeSupport
}

func (s _SetParametersTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters())
}

// Modifying this variable is undefined behavior.
var SetParametersTypeSupport humble.ServiceTypeSupport = _SetParametersTypeSupport{}

// SetParametersClient wraps humble.Client to provide type safe helper
// functions
type SetParametersClient struct {
	*humble.Client
}

// NewSetParametersClient creates and returns a new client for the
// SetParameters
func NewSetParametersClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*SetParametersClient, error) {
	client, err := node.NewClient(serviceName, SetParametersTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetParametersClient{client}, nil
}

func (s *SetParametersClient) Send(ctx context.Context, req *SetParameters_Request) (*SetParameters_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetParameters_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetParametersServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s SetParametersServiceResponseSender) SendResponse(resp *SetParameters_Response) error {
	return s.sender.SendResponse(resp)
}

type SetParametersServiceRequestHandler func(*humble.ServiceInfo, *SetParameters_Request, SetParametersServiceResponseSender)

// SetParametersService wraps humble.Service to provide type safe helper
// functions
type SetParametersService struct {
	*humble.Service
}

// NewSetParametersService creates and returns a new service for the
// SetParameters
func NewSetParametersService(node *humble.Node, name string, options *humble.ServiceOptions, handler SetParametersServiceRequestHandler) (*SetParametersService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*SetParameters_Request)
		responseSender := SetParametersServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetParametersTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetParametersService{service}, nil
}
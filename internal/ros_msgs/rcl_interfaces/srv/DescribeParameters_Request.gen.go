// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/describe_parameters.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rcl_interfaces/DescribeParameters_Request", DescribeParameters_RequestTypeSupport)
	humble.RegisterMessage("rcl_interfaces/srv/DescribeParameters_Request", DescribeParameters_RequestTypeSupport)
}

type DescribeParameters_Request struct {
	Names []string `yaml:"names"` // A list of parameters of which to get the descriptor.
}

// NewDescribeParameters_Request creates a new DescribeParameters_Request with default values.
func NewDescribeParameters_Request() *DescribeParameters_Request {
	self := DescribeParameters_Request{}
	self.SetDefaults()
	return &self
}

func (t *DescribeParameters_Request) Clone() *DescribeParameters_Request {
	c := &DescribeParameters_Request{}
	if t.Names != nil {
		c.Names = make([]string, len(t.Names))
		copy(c.Names, t.Names)
	}
	return c
}

func (t *DescribeParameters_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *DescribeParameters_Request) SetDefaults() {
	t.Names = nil
}

func (t *DescribeParameters_Request) GetTypeSupport() humble.MessageTypeSupport {
	return DescribeParameters_RequestTypeSupport
}

// DescribeParameters_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type DescribeParameters_RequestPublisher struct {
	*humble.Publisher
}

// NewDescribeParameters_RequestPublisher creates and returns a new publisher for the
// DescribeParameters_Request
func NewDescribeParameters_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*DescribeParameters_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, DescribeParameters_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DescribeParameters_RequestPublisher{pub}, nil
}

func (p *DescribeParameters_RequestPublisher) Publish(msg *DescribeParameters_Request) error {
	return p.Publisher.Publish(msg)
}

// DescribeParameters_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type DescribeParameters_RequestSubscription struct {
	*humble.Subscription
}

// DescribeParameters_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a DescribeParameters_RequestSubscription.
type DescribeParameters_RequestSubscriptionCallback func(msg *DescribeParameters_Request, info *humble.MessageInfo, err error)

// NewDescribeParameters_RequestSubscription creates and returns a new subscription for the
// DescribeParameters_Request
func NewDescribeParameters_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback DescribeParameters_RequestSubscriptionCallback) (*DescribeParameters_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg DescribeParameters_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, DescribeParameters_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DescribeParameters_RequestSubscription{sub}, nil
}

func (s *DescribeParameters_RequestSubscription) TakeMessage(out *DescribeParameters_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDescribeParameters_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDescribeParameters_RequestSlice(dst, src []DescribeParameters_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DescribeParameters_RequestTypeSupport humble.MessageTypeSupport = _DescribeParameters_RequestTypeSupport{}

type _DescribeParameters_RequestTypeSupport struct{}

func (t _DescribeParameters_RequestTypeSupport) New() humble.Message {
	return NewDescribeParameters_Request()
}

func (t _DescribeParameters_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__DescribeParameters_Request
	return (unsafe.Pointer)(C.rcl_interfaces__srv__DescribeParameters_Request__create())
}

func (t _DescribeParameters_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__DescribeParameters_Request__destroy((*C.rcl_interfaces__srv__DescribeParameters_Request)(pointer_to_free))
}

func (t _DescribeParameters_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*DescribeParameters_Request)
	mem := (*C.rcl_interfaces__srv__DescribeParameters_Request)(dst)
	humble.StringSequenceToC((*humble.CStringSequence)(unsafe.Pointer(&mem.names)), m.Names)
}

func (t _DescribeParameters_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DescribeParameters_Request)
	mem := (*C.rcl_interfaces__srv__DescribeParameters_Request)(ros2_message_buffer)
	humble.StringSequenceToGo(&m.Names, *(*humble.CStringSequence)(unsafe.Pointer(&mem.names)))
}

func (t _DescribeParameters_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request())
}

type CDescribeParameters_Request = C.rcl_interfaces__srv__DescribeParameters_Request
type CDescribeParameters_RequestSequence = C.rcl_interfaces__srv__DescribeParameters_Request__Sequence

func DescribeParameters_RequestSequenceToGo(goSlice *[]DescribeParameters_Request, cSlice CDescribeParameters_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DescribeParameters_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DescribeParameters_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func DescribeParameters_RequestSequenceToC(cSlice *CDescribeParameters_RequestSequence, goSlice []DescribeParameters_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__DescribeParameters_Request)(C.malloc(C.sizeof_struct_rcl_interfaces__srv__DescribeParameters_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DescribeParameters_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func DescribeParameters_RequestArrayToGo(goSlice []DescribeParameters_Request, cSlice []CDescribeParameters_Request) {
	for i := 0; i < len(cSlice); i++ {
		DescribeParameters_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func DescribeParameters_RequestArrayToC(cSlice []CDescribeParameters_Request, goSlice []DescribeParameters_Request) {
	for i := 0; i < len(goSlice); i++ {
		DescribeParameters_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

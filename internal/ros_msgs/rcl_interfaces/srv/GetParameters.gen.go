// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/srv/get_parameters.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("rcl_interfaces/GetParameters", GetParametersTypeSupport)
	humble.RegisterService("rcl_interfaces/srv/GetParameters", GetParametersTypeSupport)
}

type _GetParametersTypeSupport struct {}

func (s _GetParametersTypeSupport) Request() humble.MessageTypeSupport {
	return GetParameters_RequestTypeSupport
}

func (s _GetParametersTypeSupport) Response() humble.MessageTypeSupport {
	return GetParameters_ResponseTypeSupport
}

func (s _GetParametersTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters())
}

// Modifying this variable is undefined behavior.
var GetParametersTypeSupport humble.ServiceTypeSupport = _GetParametersTypeSupport{}

// GetParametersClient wraps humble.Client to provide type safe helper
// functions
type GetParametersClient struct {
	*humble.Client
}

// NewGetParametersClient creates and returns a new client for the
// GetParameters
func NewGetParametersClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*GetParametersClient, error) {
	client, err := node.NewClient(serviceName, GetParametersTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetParametersClient{client}, nil
}

func (s *GetParametersClient) Send(ctx context.Context, req *GetParameters_Request) (*GetParameters_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetParameters_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetParametersServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s GetParametersServiceResponseSender) SendResponse(resp *GetParameters_Response) error {
	return s.sender.SendResponse(resp)
}

type GetParametersServiceRequestHandler func(*humble.ServiceInfo, *GetParameters_Request, GetParametersServiceResponseSender)

// GetParametersService wraps humble.Service to provide type safe helper
// functions
type GetParametersService struct {
	*humble.Service
}

// NewGetParametersService creates and returns a new service for the
// GetParameters
func NewGetParametersService(node *humble.Node, name string, options *humble.ServiceOptions, handler GetParametersServiceRequestHandler) (*GetParametersService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*GetParameters_Request)
		responseSender := GetParametersServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetParametersTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetParametersService{service}, nil
}
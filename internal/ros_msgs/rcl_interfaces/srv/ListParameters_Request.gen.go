// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/list_parameters.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rcl_interfaces/ListParameters_Request", ListParameters_RequestTypeSupport)
	humble.RegisterMessage("rcl_interfaces/srv/ListParameters_Request", ListParameters_RequestTypeSupport)
}

const (
	ListParameters_Request_DEPTH_RECURSIVE uint64 = 0 // Recursively get parameters with unlimited depth.
)

type ListParameters_Request struct {
	Prefixes []string `yaml:"prefixes"` // The list of parameter prefixes to query.
	Depth    uint64   `yaml:"depth"`    // Relative depth from given prefixes to return.Use DEPTH_RECURSIVE to get the recursive parameters and prefixes for each prefix.
}

// NewListParameters_Request creates a new ListParameters_Request with default values.
func NewListParameters_Request() *ListParameters_Request {
	self := ListParameters_Request{}
	self.SetDefaults()
	return &self
}

func (t *ListParameters_Request) Clone() *ListParameters_Request {
	c := &ListParameters_Request{}
	if t.Prefixes != nil {
		c.Prefixes = make([]string, len(t.Prefixes))
		copy(c.Prefixes, t.Prefixes)
	}
	c.Depth = t.Depth
	return c
}

func (t *ListParameters_Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ListParameters_Request) SetDefaults() {
	t.Prefixes = nil
	t.Depth = 0
}

func (t *ListParameters_Request) GetTypeSupport() humble.MessageTypeSupport {
	return ListParameters_RequestTypeSupport
}

// ListParameters_RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type ListParameters_RequestPublisher struct {
	*humble.Publisher
}

// NewListParameters_RequestPublisher creates and returns a new publisher for the
// ListParameters_Request
func NewListParameters_RequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ListParameters_RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, ListParameters_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListParameters_RequestPublisher{pub}, nil
}

func (p *ListParameters_RequestPublisher) Publish(msg *ListParameters_Request) error {
	return p.Publisher.Publish(msg)
}

// ListParameters_RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type ListParameters_RequestSubscription struct {
	*humble.Subscription
}

// ListParameters_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a ListParameters_RequestSubscription.
type ListParameters_RequestSubscriptionCallback func(msg *ListParameters_Request, info *humble.MessageInfo, err error)

// NewListParameters_RequestSubscription creates and returns a new subscription for the
// ListParameters_Request
func NewListParameters_RequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ListParameters_RequestSubscriptionCallback) (*ListParameters_RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ListParameters_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ListParameters_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ListParameters_RequestSubscription{sub}, nil
}

func (s *ListParameters_RequestSubscription) TakeMessage(out *ListParameters_Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneListParameters_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneListParameters_RequestSlice(dst, src []ListParameters_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ListParameters_RequestTypeSupport humble.MessageTypeSupport = _ListParameters_RequestTypeSupport{}

type _ListParameters_RequestTypeSupport struct{}

func (t _ListParameters_RequestTypeSupport) New() humble.Message {
	return NewListParameters_Request()
}

func (t _ListParameters_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__ListParameters_Request
	return (unsafe.Pointer)(C.rcl_interfaces__srv__ListParameters_Request__create())
}

func (t _ListParameters_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__ListParameters_Request__destroy((*C.rcl_interfaces__srv__ListParameters_Request)(pointer_to_free))
}

func (t _ListParameters_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ListParameters_Request)
	mem := (*C.rcl_interfaces__srv__ListParameters_Request)(dst)
	humble.StringSequenceToC((*humble.CStringSequence)(unsafe.Pointer(&mem.prefixes)), m.Prefixes)
	mem.depth = C.uint64_t(m.Depth)
}

func (t _ListParameters_RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ListParameters_Request)
	mem := (*C.rcl_interfaces__srv__ListParameters_Request)(ros2_message_buffer)
	humble.StringSequenceToGo(&m.Prefixes, *(*humble.CStringSequence)(unsafe.Pointer(&mem.prefixes)))
	m.Depth = uint64(mem.depth)
}

func (t _ListParameters_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request())
}

type CListParameters_Request = C.rcl_interfaces__srv__ListParameters_Request
type CListParameters_RequestSequence = C.rcl_interfaces__srv__ListParameters_Request__Sequence

func ListParameters_RequestSequenceToGo(goSlice *[]ListParameters_Request, cSlice CListParameters_RequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ListParameters_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ListParameters_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ListParameters_RequestSequenceToC(cSlice *CListParameters_RequestSequence, goSlice []ListParameters_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__ListParameters_Request)(C.malloc(C.sizeof_struct_rcl_interfaces__srv__ListParameters_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ListParameters_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ListParameters_RequestArrayToGo(goSlice []ListParameters_Request, cSlice []CListParameters_Request) {
	for i := 0; i < len(cSlice); i++ {
		ListParameters_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ListParameters_RequestArrayToC(cSlice []CListParameters_Request, goSlice []ListParameters_Request) {
	for i := 0; i < len(goSlice); i++ {
		ListParameters_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

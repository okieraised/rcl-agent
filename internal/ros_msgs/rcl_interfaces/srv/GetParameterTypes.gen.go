// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/srv/get_parameter_types.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

func init() {
	humble.RegisterService("rcl_interfaces/GetParameterTypes", GetParameterTypesTypeSupport)
	humble.RegisterService("rcl_interfaces/srv/GetParameterTypes", GetParameterTypesTypeSupport)
}

type _GetParameterTypesTypeSupport struct {}

func (s _GetParameterTypesTypeSupport) Request() humble.MessageTypeSupport {
	return GetParameterTypes_RequestTypeSupport
}

func (s _GetParameterTypesTypeSupport) Response() humble.MessageTypeSupport {
	return GetParameterTypes_ResponseTypeSupport
}

func (s _GetParameterTypesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes())
}

// Modifying this variable is undefined behavior.
var GetParameterTypesTypeSupport humble.ServiceTypeSupport = _GetParameterTypesTypeSupport{}

// GetParameterTypesClient wraps humble.Client to provide type safe helper
// functions
type GetParameterTypesClient struct {
	*humble.Client
}

// NewGetParameterTypesClient creates and returns a new client for the
// GetParameterTypes
func NewGetParameterTypesClient(node *humble.Node, serviceName string, options *humble.ClientOptions) (*GetParameterTypesClient, error) {
	client, err := node.NewClient(serviceName, GetParameterTypesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetParameterTypesClient{client}, nil
}

func (s *GetParameterTypesClient) Send(ctx context.Context, req *GetParameterTypes_Request) (*GetParameterTypes_Response, *humble.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetParameterTypes_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetParameterTypesServiceResponseSender struct {
	sender humble.ServiceResponseSender
}

func (s GetParameterTypesServiceResponseSender) SendResponse(resp *GetParameterTypes_Response) error {
	return s.sender.SendResponse(resp)
}

type GetParameterTypesServiceRequestHandler func(*humble.ServiceInfo, *GetParameterTypes_Request, GetParameterTypesServiceResponseSender)

// GetParameterTypesService wraps humble.Service to provide type safe helper
// functions
type GetParameterTypesService struct {
	*humble.Service
}

// NewGetParameterTypesService creates and returns a new service for the
// GetParameterTypes
func NewGetParameterTypesService(node *humble.Node, name string, options *humble.ServiceOptions, handler GetParameterTypesServiceRequestHandler) (*GetParameterTypesService, error) {
	h := func(rmw *humble.ServiceInfo, msg humble.Message, rs humble.ServiceResponseSender) {
		m := msg.(*GetParameterTypes_Request)
		responseSender := GetParameterTypesServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetParameterTypesTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetParameterTypesService{service}, nil
}
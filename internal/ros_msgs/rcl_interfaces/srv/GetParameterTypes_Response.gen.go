// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_srv

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/get_parameter_types.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rcl_interfaces/GetParameterTypes_Response", GetParameterTypes_ResponseTypeSupport)
	humble.RegisterMessage("rcl_interfaces/srv/GetParameterTypes_Response", GetParameterTypes_ResponseTypeSupport)
}

type GetParameterTypes_Response struct {
	Types []uint8 `yaml:"types"` // List of types which is the same length and order as the provided names.The type enum is defined in ParameterType.msg. ParameterType.PARAMETER_NOT_SETindicates that the parameter is not currently set.
}

// NewGetParameterTypes_Response creates a new GetParameterTypes_Response with default values.
func NewGetParameterTypes_Response() *GetParameterTypes_Response {
	self := GetParameterTypes_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetParameterTypes_Response) Clone() *GetParameterTypes_Response {
	c := &GetParameterTypes_Response{}
	if t.Types != nil {
		c.Types = make([]uint8, len(t.Types))
		copy(c.Types, t.Types)
	}
	return c
}

func (t *GetParameterTypes_Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *GetParameterTypes_Response) SetDefaults() {
	t.Types = nil
}

func (t *GetParameterTypes_Response) GetTypeSupport() humble.MessageTypeSupport {
	return GetParameterTypes_ResponseTypeSupport
}

// GetParameterTypes_ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type GetParameterTypes_ResponsePublisher struct {
	*humble.Publisher
}

// NewGetParameterTypes_ResponsePublisher creates and returns a new publisher for the
// GetParameterTypes_Response
func NewGetParameterTypes_ResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*GetParameterTypes_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, GetParameterTypes_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetParameterTypes_ResponsePublisher{pub}, nil
}

func (p *GetParameterTypes_ResponsePublisher) Publish(msg *GetParameterTypes_Response) error {
	return p.Publisher.Publish(msg)
}

// GetParameterTypes_ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type GetParameterTypes_ResponseSubscription struct {
	*humble.Subscription
}

// GetParameterTypes_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetParameterTypes_ResponseSubscription.
type GetParameterTypes_ResponseSubscriptionCallback func(msg *GetParameterTypes_Response, info *humble.MessageInfo, err error)

// NewGetParameterTypes_ResponseSubscription creates and returns a new subscription for the
// GetParameterTypes_Response
func NewGetParameterTypes_ResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback GetParameterTypes_ResponseSubscriptionCallback) (*GetParameterTypes_ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg GetParameterTypes_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, GetParameterTypes_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetParameterTypes_ResponseSubscription{sub}, nil
}

func (s *GetParameterTypes_ResponseSubscription) TakeMessage(out *GetParameterTypes_Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetParameterTypes_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetParameterTypes_ResponseSlice(dst, src []GetParameterTypes_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetParameterTypes_ResponseTypeSupport humble.MessageTypeSupport = _GetParameterTypes_ResponseTypeSupport{}

type _GetParameterTypes_ResponseTypeSupport struct{}

func (t _GetParameterTypes_ResponseTypeSupport) New() humble.Message {
	return NewGetParameterTypes_Response()
}

func (t _GetParameterTypes_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__GetParameterTypes_Response
	return (unsafe.Pointer)(C.rcl_interfaces__srv__GetParameterTypes_Response__create())
}

func (t _GetParameterTypes_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__GetParameterTypes_Response__destroy((*C.rcl_interfaces__srv__GetParameterTypes_Response)(pointer_to_free))
}

func (t _GetParameterTypes_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*GetParameterTypes_Response)
	mem := (*C.rcl_interfaces__srv__GetParameterTypes_Response)(dst)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.types)), m.Types)
}

func (t _GetParameterTypes_ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetParameterTypes_Response)
	mem := (*C.rcl_interfaces__srv__GetParameterTypes_Response)(ros2_message_buffer)
	humble.Uint8SequenceToGo(&m.Types, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.types)))
}

func (t _GetParameterTypes_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response())
}

type CGetParameterTypes_Response = C.rcl_interfaces__srv__GetParameterTypes_Response
type CGetParameterTypes_ResponseSequence = C.rcl_interfaces__srv__GetParameterTypes_Response__Sequence

func GetParameterTypes_ResponseSequenceToGo(goSlice *[]GetParameterTypes_Response, cSlice CGetParameterTypes_ResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetParameterTypes_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetParameterTypes_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func GetParameterTypes_ResponseSequenceToC(cSlice *CGetParameterTypes_ResponseSequence, goSlice []GetParameterTypes_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__GetParameterTypes_Response)(C.malloc(C.sizeof_struct_rcl_interfaces__srv__GetParameterTypes_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetParameterTypes_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func GetParameterTypes_ResponseArrayToGo(goSlice []GetParameterTypes_Response, cSlice []CGetParameterTypes_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetParameterTypes_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func GetParameterTypes_ResponseArrayToC(cSlice []CGetParameterTypes_Response, goSlice []GetParameterTypes_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetParameterTypes_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/set_parameters_result.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rcl_interfaces/SetParametersResult", SetParametersResultTypeSupport)
	humble.RegisterMessage("rcl_interfaces/msg/SetParametersResult", SetParametersResultTypeSupport)
}

type SetParametersResult struct {
	Successful bool   `yaml:"successful"` // A true value of the same index indicates that the parameter was setsuccessfully. A false value indicates the change was rejected.
	Reason     string `yaml:"reason"`     // Reason why the setting was either successful or a failure. This should only beused for logging and user interfaces.
}

// NewSetParametersResult creates a new SetParametersResult with default values.
func NewSetParametersResult() *SetParametersResult {
	self := SetParametersResult{}
	self.SetDefaults()
	return &self
}

func (t *SetParametersResult) Clone() *SetParametersResult {
	c := &SetParametersResult{}
	c.Successful = t.Successful
	c.Reason = t.Reason
	return c
}

func (t *SetParametersResult) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SetParametersResult) SetDefaults() {
	t.Successful = false
	t.Reason = ""
}

func (t *SetParametersResult) GetTypeSupport() humble.MessageTypeSupport {
	return SetParametersResultTypeSupport
}

// SetParametersResultPublisher wraps humble.Publisher to provide type safe helper
// functions
type SetParametersResultPublisher struct {
	*humble.Publisher
}

// NewSetParametersResultPublisher creates and returns a new publisher for the
// SetParametersResult
func NewSetParametersResultPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SetParametersResultPublisher, error) {
	pub, err := node.NewPublisher(topicName, SetParametersResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetParametersResultPublisher{pub}, nil
}

func (p *SetParametersResultPublisher) Publish(msg *SetParametersResult) error {
	return p.Publisher.Publish(msg)
}

// SetParametersResultSubscription wraps humble.Subscription to provide type safe helper
// functions
type SetParametersResultSubscription struct {
	*humble.Subscription
}

// SetParametersResultSubscriptionCallback type is used to provide a subscription
// handler function for a SetParametersResultSubscription.
type SetParametersResultSubscriptionCallback func(msg *SetParametersResult, info *humble.MessageInfo, err error)

// NewSetParametersResultSubscription creates and returns a new subscription for the
// SetParametersResult
func NewSetParametersResultSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SetParametersResultSubscriptionCallback) (*SetParametersResultSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SetParametersResult
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SetParametersResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetParametersResultSubscription{sub}, nil
}

func (s *SetParametersResultSubscription) TakeMessage(out *SetParametersResult) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetParametersResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetParametersResultSlice(dst, src []SetParametersResult) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetParametersResultTypeSupport humble.MessageTypeSupport = _SetParametersResultTypeSupport{}

type _SetParametersResultTypeSupport struct{}

func (t _SetParametersResultTypeSupport) New() humble.Message {
	return NewSetParametersResult()
}

func (t _SetParametersResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__SetParametersResult
	return (unsafe.Pointer)(C.rcl_interfaces__msg__SetParametersResult__create())
}

func (t _SetParametersResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__SetParametersResult__destroy((*C.rcl_interfaces__msg__SetParametersResult)(pointer_to_free))
}

func (t _SetParametersResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SetParametersResult)
	mem := (*C.rcl_interfaces__msg__SetParametersResult)(dst)
	mem.successful = C.bool(m.Successful)
	humble.StringAsCStruct(unsafe.Pointer(&mem.reason), m.Reason)
}

func (t _SetParametersResultTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetParametersResult)
	mem := (*C.rcl_interfaces__msg__SetParametersResult)(ros2_message_buffer)
	m.Successful = bool(mem.successful)
	humble.StringAsGoStruct(&m.Reason, unsafe.Pointer(&mem.reason))
}

func (t _SetParametersResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult())
}

type CSetParametersResult = C.rcl_interfaces__msg__SetParametersResult
type CSetParametersResultSequence = C.rcl_interfaces__msg__SetParametersResult__Sequence

func SetParametersResultSequenceToGo(goSlice *[]SetParametersResult, cSlice CSetParametersResultSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetParametersResult, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetParametersResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SetParametersResultSequenceToC(cSlice *CSetParametersResultSequence, goSlice []SetParametersResult) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__SetParametersResult)(C.malloc(C.sizeof_struct_rcl_interfaces__msg__SetParametersResult * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetParametersResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SetParametersResultArrayToGo(goSlice []SetParametersResult, cSlice []CSetParametersResult) {
	for i := 0; i < len(cSlice); i++ {
		SetParametersResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SetParametersResultArrayToC(cSlice []CSetParametersResult, goSlice []SetParametersResult) {
	for i := 0; i < len(goSlice); i++ {
		SetParametersResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

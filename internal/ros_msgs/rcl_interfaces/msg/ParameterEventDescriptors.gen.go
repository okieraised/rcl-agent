// Code generated by ros2gen. DO NOT EDIT.

package rcl_interfaces_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/parameter_event_descriptors.h>

*/
import "C"

func init() {
	humble.RegisterMessage("rcl_interfaces/ParameterEventDescriptors", ParameterEventDescriptorsTypeSupport)
	humble.RegisterMessage("rcl_interfaces/msg/ParameterEventDescriptors", ParameterEventDescriptorsTypeSupport)
}

type ParameterEventDescriptors struct {
	NewParameters     []ParameterDescriptor `yaml:"new_parameters"`
	ChangedParameters []ParameterDescriptor `yaml:"changed_parameters"`
	DeletedParameters []ParameterDescriptor `yaml:"deleted_parameters"`
}

// NewParameterEventDescriptors creates a new ParameterEventDescriptors with default values.
func NewParameterEventDescriptors() *ParameterEventDescriptors {
	self := ParameterEventDescriptors{}
	self.SetDefaults()
	return &self
}

func (t *ParameterEventDescriptors) Clone() *ParameterEventDescriptors {
	c := &ParameterEventDescriptors{}
	if t.NewParameters != nil {
		c.NewParameters = make([]ParameterDescriptor, len(t.NewParameters))
		CloneParameterDescriptorSlice(c.NewParameters, t.NewParameters)
	}
	if t.ChangedParameters != nil {
		c.ChangedParameters = make([]ParameterDescriptor, len(t.ChangedParameters))
		CloneParameterDescriptorSlice(c.ChangedParameters, t.ChangedParameters)
	}
	if t.DeletedParameters != nil {
		c.DeletedParameters = make([]ParameterDescriptor, len(t.DeletedParameters))
		CloneParameterDescriptorSlice(c.DeletedParameters, t.DeletedParameters)
	}
	return c
}

func (t *ParameterEventDescriptors) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ParameterEventDescriptors) SetDefaults() {
	t.NewParameters = nil
	t.ChangedParameters = nil
	t.DeletedParameters = nil
}

func (t *ParameterEventDescriptors) GetTypeSupport() humble.MessageTypeSupport {
	return ParameterEventDescriptorsTypeSupport
}

// ParameterEventDescriptorsPublisher wraps humble.Publisher to provide type safe helper
// functions
type ParameterEventDescriptorsPublisher struct {
	*humble.Publisher
}

// NewParameterEventDescriptorsPublisher creates and returns a new publisher for the
// ParameterEventDescriptors
func NewParameterEventDescriptorsPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ParameterEventDescriptorsPublisher, error) {
	pub, err := node.NewPublisher(topicName, ParameterEventDescriptorsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParameterEventDescriptorsPublisher{pub}, nil
}

func (p *ParameterEventDescriptorsPublisher) Publish(msg *ParameterEventDescriptors) error {
	return p.Publisher.Publish(msg)
}

// ParameterEventDescriptorsSubscription wraps humble.Subscription to provide type safe helper
// functions
type ParameterEventDescriptorsSubscription struct {
	*humble.Subscription
}

// ParameterEventDescriptorsSubscriptionCallback type is used to provide a subscription
// handler function for a ParameterEventDescriptorsSubscription.
type ParameterEventDescriptorsSubscriptionCallback func(msg *ParameterEventDescriptors, info *humble.MessageInfo, err error)

// NewParameterEventDescriptorsSubscription creates and returns a new subscription for the
// ParameterEventDescriptors
func NewParameterEventDescriptorsSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ParameterEventDescriptorsSubscriptionCallback) (*ParameterEventDescriptorsSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ParameterEventDescriptors
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ParameterEventDescriptorsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParameterEventDescriptorsSubscription{sub}, nil
}

func (s *ParameterEventDescriptorsSubscription) TakeMessage(out *ParameterEventDescriptors) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParameterEventDescriptorsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParameterEventDescriptorsSlice(dst, src []ParameterEventDescriptors) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParameterEventDescriptorsTypeSupport humble.MessageTypeSupport = _ParameterEventDescriptorsTypeSupport{}

type _ParameterEventDescriptorsTypeSupport struct{}

func (t _ParameterEventDescriptorsTypeSupport) New() humble.Message {
	return NewParameterEventDescriptors()
}

func (t _ParameterEventDescriptorsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__ParameterEventDescriptors
	return (unsafe.Pointer)(C.rcl_interfaces__msg__ParameterEventDescriptors__create())
}

func (t _ParameterEventDescriptorsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__ParameterEventDescriptors__destroy((*C.rcl_interfaces__msg__ParameterEventDescriptors)(pointer_to_free))
}

func (t _ParameterEventDescriptorsTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ParameterEventDescriptors)
	mem := (*C.rcl_interfaces__msg__ParameterEventDescriptors)(dst)
	ParameterDescriptorSequenceToC(&mem.new_parameters, m.NewParameters)
	ParameterDescriptorSequenceToC(&mem.changed_parameters, m.ChangedParameters)
	ParameterDescriptorSequenceToC(&mem.deleted_parameters, m.DeletedParameters)
}

func (t _ParameterEventDescriptorsTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParameterEventDescriptors)
	mem := (*C.rcl_interfaces__msg__ParameterEventDescriptors)(ros2_message_buffer)
	ParameterDescriptorSequenceToGo(&m.NewParameters, mem.new_parameters)
	ParameterDescriptorSequenceToGo(&m.ChangedParameters, mem.changed_parameters)
	ParameterDescriptorSequenceToGo(&m.DeletedParameters, mem.deleted_parameters)
}

func (t _ParameterEventDescriptorsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEventDescriptors())
}

type CParameterEventDescriptors = C.rcl_interfaces__msg__ParameterEventDescriptors
type CParameterEventDescriptorsSequence = C.rcl_interfaces__msg__ParameterEventDescriptors__Sequence

func ParameterEventDescriptorsSequenceToGo(goSlice *[]ParameterEventDescriptors, cSlice CParameterEventDescriptorsSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParameterEventDescriptors, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParameterEventDescriptorsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ParameterEventDescriptorsSequenceToC(cSlice *CParameterEventDescriptorsSequence, goSlice []ParameterEventDescriptors) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__ParameterEventDescriptors)(C.malloc(C.sizeof_struct_rcl_interfaces__msg__ParameterEventDescriptors * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParameterEventDescriptorsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ParameterEventDescriptorsArrayToGo(goSlice []ParameterEventDescriptors, cSlice []CParameterEventDescriptors) {
	for i := 0; i < len(cSlice); i++ {
		ParameterEventDescriptorsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ParameterEventDescriptorsArrayToC(cSlice []CParameterEventDescriptors, goSlice []ParameterEventDescriptors) {
	for i := 0; i < len(goSlice); i++ {
		ParameterEventDescriptorsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

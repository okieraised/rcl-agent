// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/interface_config.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/InterfaceConfig", InterfaceConfigTypeSupport)
	humble.RegisterMessage("unitree_go/msg/InterfaceConfig", InterfaceConfigTypeSupport)
}

type InterfaceConfig struct {
	Mode    uint8    `yaml:"mode"`
	Value   uint8    `yaml:"value"`
	Reserve [2]uint8 `yaml:"reserve"`
}

// NewInterfaceConfig creates a new InterfaceConfig with default values.
func NewInterfaceConfig() *InterfaceConfig {
	self := InterfaceConfig{}
	self.SetDefaults()
	return &self
}

func (t *InterfaceConfig) Clone() *InterfaceConfig {
	c := &InterfaceConfig{}
	c.Mode = t.Mode
	c.Value = t.Value
	c.Reserve = t.Reserve
	return c
}

func (t *InterfaceConfig) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *InterfaceConfig) SetDefaults() {
	t.Mode = 0
	t.Value = 0
	t.Reserve = [2]uint8{}
}

func (t *InterfaceConfig) GetTypeSupport() humble.MessageTypeSupport {
	return InterfaceConfigTypeSupport
}

// InterfaceConfigPublisher wraps humble.Publisher to provide type safe helper
// functions
type InterfaceConfigPublisher struct {
	*humble.Publisher
}

// NewInterfaceConfigPublisher creates and returns a new publisher for the
// InterfaceConfig
func NewInterfaceConfigPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*InterfaceConfigPublisher, error) {
	pub, err := node.NewPublisher(topicName, InterfaceConfigTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &InterfaceConfigPublisher{pub}, nil
}

func (p *InterfaceConfigPublisher) Publish(msg *InterfaceConfig) error {
	return p.Publisher.Publish(msg)
}

// InterfaceConfigSubscription wraps humble.Subscription to provide type safe helper
// functions
type InterfaceConfigSubscription struct {
	*humble.Subscription
}

// InterfaceConfigSubscriptionCallback type is used to provide a subscription
// handler function for a InterfaceConfigSubscription.
type InterfaceConfigSubscriptionCallback func(msg *InterfaceConfig, info *humble.MessageInfo, err error)

// NewInterfaceConfigSubscription creates and returns a new subscription for the
// InterfaceConfig
func NewInterfaceConfigSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback InterfaceConfigSubscriptionCallback) (*InterfaceConfigSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg InterfaceConfig
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, InterfaceConfigTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &InterfaceConfigSubscription{sub}, nil
}

func (s *InterfaceConfigSubscription) TakeMessage(out *InterfaceConfig) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneInterfaceConfigSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneInterfaceConfigSlice(dst, src []InterfaceConfig) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var InterfaceConfigTypeSupport humble.MessageTypeSupport = _InterfaceConfigTypeSupport{}

type _InterfaceConfigTypeSupport struct{}

func (t _InterfaceConfigTypeSupport) New() humble.Message {
	return NewInterfaceConfig()
}

func (t _InterfaceConfigTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__InterfaceConfig
	return (unsafe.Pointer)(C.unitree_go__msg__InterfaceConfig__create())
}

func (t _InterfaceConfigTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__InterfaceConfig__destroy((*C.unitree_go__msg__InterfaceConfig)(pointer_to_free))
}

func (t _InterfaceConfigTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*InterfaceConfig)
	mem := (*C.unitree_go__msg__InterfaceConfig)(dst)
	mem.mode = C.uint8_t(m.Mode)
	mem.value = C.uint8_t(m.Value)
	cSlice_reserve := mem.reserve[:]
	humble.Uint8ArrayToC(*(*[]humble.CUint8)(unsafe.Pointer(&cSlice_reserve)), m.Reserve[:])
}

func (t _InterfaceConfigTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*InterfaceConfig)
	mem := (*C.unitree_go__msg__InterfaceConfig)(ros2_message_buffer)
	m.Mode = uint8(mem.mode)
	m.Value = uint8(mem.value)
	cSlice_reserve := mem.reserve[:]
	humble.Uint8ArrayToGo(m.Reserve[:], *(*[]humble.CUint8)(unsafe.Pointer(&cSlice_reserve)))
}

func (t _InterfaceConfigTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__InterfaceConfig())
}

type CInterfaceConfig = C.unitree_go__msg__InterfaceConfig
type CInterfaceConfigSequence = C.unitree_go__msg__InterfaceConfig__Sequence

func InterfaceConfigSequenceToGo(goSlice *[]InterfaceConfig, cSlice CInterfaceConfigSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]InterfaceConfig, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		InterfaceConfigTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func InterfaceConfigSequenceToC(cSlice *CInterfaceConfigSequence, goSlice []InterfaceConfig) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__InterfaceConfig)(C.malloc(C.sizeof_struct_unitree_go__msg__InterfaceConfig * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		InterfaceConfigTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func InterfaceConfigArrayToGo(goSlice []InterfaceConfig, cSlice []CInterfaceConfig) {
	for i := 0; i < len(cSlice); i++ {
		InterfaceConfigTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func InterfaceConfigArrayToC(cSlice []CInterfaceConfig, goSlice []InterfaceConfig) {
	for i := 0; i < len(goSlice); i++ {
		InterfaceConfigTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

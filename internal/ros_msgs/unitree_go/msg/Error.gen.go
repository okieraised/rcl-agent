// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/error.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/Error", ErrorTypeSupport)
	humble.RegisterMessage("unitree_go/msg/Error", ErrorTypeSupport)
}

type Error struct {
	Source uint32 `yaml:"source"`
	State  uint32 `yaml:"state"`
}

// NewError creates a new Error with default values.
func NewError() *Error {
	self := Error{}
	self.SetDefaults()
	return &self
}

func (t *Error) Clone() *Error {
	c := &Error{}
	c.Source = t.Source
	c.State = t.State
	return c
}

func (t *Error) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Error) SetDefaults() {
	t.Source = 0
	t.State = 0
}

func (t *Error) GetTypeSupport() humble.MessageTypeSupport {
	return ErrorTypeSupport
}

// ErrorPublisher wraps humble.Publisher to provide type safe helper
// functions
type ErrorPublisher struct {
	*humble.Publisher
}

// NewErrorPublisher creates and returns a new publisher for the
// Error
func NewErrorPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ErrorPublisher, error) {
	pub, err := node.NewPublisher(topicName, ErrorTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ErrorPublisher{pub}, nil
}

func (p *ErrorPublisher) Publish(msg *Error) error {
	return p.Publisher.Publish(msg)
}

// ErrorSubscription wraps humble.Subscription to provide type safe helper
// functions
type ErrorSubscription struct {
	*humble.Subscription
}

// ErrorSubscriptionCallback type is used to provide a subscription
// handler function for a ErrorSubscription.
type ErrorSubscriptionCallback func(msg *Error, info *humble.MessageInfo, err error)

// NewErrorSubscription creates and returns a new subscription for the
// Error
func NewErrorSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ErrorSubscriptionCallback) (*ErrorSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Error
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ErrorTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ErrorSubscription{sub}, nil
}

func (s *ErrorSubscription) TakeMessage(out *Error) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneErrorSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneErrorSlice(dst, src []Error) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ErrorTypeSupport humble.MessageTypeSupport = _ErrorTypeSupport{}

type _ErrorTypeSupport struct{}

func (t _ErrorTypeSupport) New() humble.Message {
	return NewError()
}

func (t _ErrorTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__Error
	return (unsafe.Pointer)(C.unitree_go__msg__Error__create())
}

func (t _ErrorTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__Error__destroy((*C.unitree_go__msg__Error)(pointer_to_free))
}

func (t _ErrorTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Error)
	mem := (*C.unitree_go__msg__Error)(dst)
	mem.source = C.uint32_t(m.Source)
	mem.state = C.uint32_t(m.State)
}

func (t _ErrorTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Error)
	mem := (*C.unitree_go__msg__Error)(ros2_message_buffer)
	m.Source = uint32(mem.source)
	m.State = uint32(mem.state)
}

func (t _ErrorTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__Error())
}

type CError = C.unitree_go__msg__Error
type CErrorSequence = C.unitree_go__msg__Error__Sequence

func ErrorSequenceToGo(goSlice *[]Error, cSlice CErrorSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Error, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ErrorTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ErrorSequenceToC(cSlice *CErrorSequence, goSlice []Error) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__Error)(C.malloc(C.sizeof_struct_unitree_go__msg__Error * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ErrorTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ErrorArrayToGo(goSlice []Error, cSlice []CError) {
	for i := 0; i < len(cSlice); i++ {
		ErrorTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ErrorArrayToC(cSlice []CError, goSlice []Error) {
	for i := 0; i < len(goSlice); i++ {
		ErrorTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

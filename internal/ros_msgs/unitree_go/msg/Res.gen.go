// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/res.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/Res", ResTypeSupport)
	humble.RegisterMessage("unitree_go/msg/Res", ResTypeSupport)
}

type Res struct {
	Uuid string  `yaml:"uuid"`
	Data []uint8 `yaml:"data"`
	Body string  `yaml:"body"`
}

// NewRes creates a new Res with default values.
func NewRes() *Res {
	self := Res{}
	self.SetDefaults()
	return &self
}

func (t *Res) Clone() *Res {
	c := &Res{}
	c.Uuid = t.Uuid
	if t.Data != nil {
		c.Data = make([]uint8, len(t.Data))
		copy(c.Data, t.Data)
	}
	c.Body = t.Body
	return c
}

func (t *Res) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Res) SetDefaults() {
	t.Uuid = ""
	t.Data = nil
	t.Body = ""
}

func (t *Res) GetTypeSupport() humble.MessageTypeSupport {
	return ResTypeSupport
}

// ResPublisher wraps humble.Publisher to provide type safe helper
// functions
type ResPublisher struct {
	*humble.Publisher
}

// NewResPublisher creates and returns a new publisher for the
// Res
func NewResPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ResPublisher, error) {
	pub, err := node.NewPublisher(topicName, ResTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ResPublisher{pub}, nil
}

func (p *ResPublisher) Publish(msg *Res) error {
	return p.Publisher.Publish(msg)
}

// ResSubscription wraps humble.Subscription to provide type safe helper
// functions
type ResSubscription struct {
	*humble.Subscription
}

// ResSubscriptionCallback type is used to provide a subscription
// handler function for a ResSubscription.
type ResSubscriptionCallback func(msg *Res, info *humble.MessageInfo, err error)

// NewResSubscription creates and returns a new subscription for the
// Res
func NewResSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ResSubscriptionCallback) (*ResSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Res
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ResTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ResSubscription{sub}, nil
}

func (s *ResSubscription) TakeMessage(out *Res) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneResSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneResSlice(dst, src []Res) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ResTypeSupport humble.MessageTypeSupport = _ResTypeSupport{}

type _ResTypeSupport struct{}

func (t _ResTypeSupport) New() humble.Message {
	return NewRes()
}

func (t _ResTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__Res
	return (unsafe.Pointer)(C.unitree_go__msg__Res__create())
}

func (t _ResTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__Res__destroy((*C.unitree_go__msg__Res)(pointer_to_free))
}

func (t _ResTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Res)
	mem := (*C.unitree_go__msg__Res)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.uuid), m.Uuid)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.data)), m.Data)
	humble.StringAsCStruct(unsafe.Pointer(&mem.body), m.Body)
}

func (t _ResTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Res)
	mem := (*C.unitree_go__msg__Res)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Uuid, unsafe.Pointer(&mem.uuid))
	humble.Uint8SequenceToGo(&m.Data, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.data)))
	humble.StringAsGoStruct(&m.Body, unsafe.Pointer(&mem.body))
}

func (t _ResTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__Res())
}

type CRes = C.unitree_go__msg__Res
type CResSequence = C.unitree_go__msg__Res__Sequence

func ResSequenceToGo(goSlice *[]Res, cSlice CResSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Res, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ResTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ResSequenceToC(cSlice *CResSequence, goSlice []Res) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__Res)(C.malloc(C.sizeof_struct_unitree_go__msg__Res * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ResTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ResArrayToGo(goSlice []Res, cSlice []CRes) {
	for i := 0; i < len(cSlice); i++ {
		ResTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ResArrayToC(cSlice []CRes, goSlice []Res) {
	for i := 0; i < len(goSlice); i++ {
		ResTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

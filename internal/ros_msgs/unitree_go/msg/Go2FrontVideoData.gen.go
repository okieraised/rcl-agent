// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/go2_front_video_data.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/Go2FrontVideoData", Go2FrontVideoDataTypeSupport)
	humble.RegisterMessage("unitree_go/msg/Go2FrontVideoData", Go2FrontVideoDataTypeSupport)
}

type Go2FrontVideoData struct {
	TimeFrame uint64  `yaml:"time_frame"`
	Video720p []uint8 `yaml:"video720p"`
	Video360p []uint8 `yaml:"video360p"`
	Video180p []uint8 `yaml:"video180p"`
}

// NewGo2FrontVideoData creates a new Go2FrontVideoData with default values.
func NewGo2FrontVideoData() *Go2FrontVideoData {
	self := Go2FrontVideoData{}
	self.SetDefaults()
	return &self
}

func (t *Go2FrontVideoData) Clone() *Go2FrontVideoData {
	c := &Go2FrontVideoData{}
	c.TimeFrame = t.TimeFrame
	if t.Video720p != nil {
		c.Video720p = make([]uint8, len(t.Video720p))
		copy(c.Video720p, t.Video720p)
	}
	if t.Video360p != nil {
		c.Video360p = make([]uint8, len(t.Video360p))
		copy(c.Video360p, t.Video360p)
	}
	if t.Video180p != nil {
		c.Video180p = make([]uint8, len(t.Video180p))
		copy(c.Video180p, t.Video180p)
	}
	return c
}

func (t *Go2FrontVideoData) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Go2FrontVideoData) SetDefaults() {
	t.TimeFrame = 0
	t.Video720p = nil
	t.Video360p = nil
	t.Video180p = nil
}

func (t *Go2FrontVideoData) GetTypeSupport() humble.MessageTypeSupport {
	return Go2FrontVideoDataTypeSupport
}

// Go2FrontVideoDataPublisher wraps humble.Publisher to provide type safe helper
// functions
type Go2FrontVideoDataPublisher struct {
	*humble.Publisher
}

// NewGo2FrontVideoDataPublisher creates and returns a new publisher for the
// Go2FrontVideoData
func NewGo2FrontVideoDataPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*Go2FrontVideoDataPublisher, error) {
	pub, err := node.NewPublisher(topicName, Go2FrontVideoDataTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Go2FrontVideoDataPublisher{pub}, nil
}

func (p *Go2FrontVideoDataPublisher) Publish(msg *Go2FrontVideoData) error {
	return p.Publisher.Publish(msg)
}

// Go2FrontVideoDataSubscription wraps humble.Subscription to provide type safe helper
// functions
type Go2FrontVideoDataSubscription struct {
	*humble.Subscription
}

// Go2FrontVideoDataSubscriptionCallback type is used to provide a subscription
// handler function for a Go2FrontVideoDataSubscription.
type Go2FrontVideoDataSubscriptionCallback func(msg *Go2FrontVideoData, info *humble.MessageInfo, err error)

// NewGo2FrontVideoDataSubscription creates and returns a new subscription for the
// Go2FrontVideoData
func NewGo2FrontVideoDataSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback Go2FrontVideoDataSubscriptionCallback) (*Go2FrontVideoDataSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Go2FrontVideoData
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, Go2FrontVideoDataTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Go2FrontVideoDataSubscription{sub}, nil
}

func (s *Go2FrontVideoDataSubscription) TakeMessage(out *Go2FrontVideoData) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGo2FrontVideoDataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGo2FrontVideoDataSlice(dst, src []Go2FrontVideoData) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Go2FrontVideoDataTypeSupport humble.MessageTypeSupport = _Go2FrontVideoDataTypeSupport{}

type _Go2FrontVideoDataTypeSupport struct{}

func (t _Go2FrontVideoDataTypeSupport) New() humble.Message {
	return NewGo2FrontVideoData()
}

func (t _Go2FrontVideoDataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__Go2FrontVideoData
	return (unsafe.Pointer)(C.unitree_go__msg__Go2FrontVideoData__create())
}

func (t _Go2FrontVideoDataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__Go2FrontVideoData__destroy((*C.unitree_go__msg__Go2FrontVideoData)(pointer_to_free))
}

func (t _Go2FrontVideoDataTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Go2FrontVideoData)
	mem := (*C.unitree_go__msg__Go2FrontVideoData)(dst)
	mem.time_frame = C.uint64_t(m.TimeFrame)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.video720p)), m.Video720p)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.video360p)), m.Video360p)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.video180p)), m.Video180p)
}

func (t _Go2FrontVideoDataTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Go2FrontVideoData)
	mem := (*C.unitree_go__msg__Go2FrontVideoData)(ros2_message_buffer)
	m.TimeFrame = uint64(mem.time_frame)
	humble.Uint8SequenceToGo(&m.Video720p, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.video720p)))
	humble.Uint8SequenceToGo(&m.Video360p, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.video360p)))
	humble.Uint8SequenceToGo(&m.Video180p, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.video180p)))
}

func (t _Go2FrontVideoDataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__Go2FrontVideoData())
}

type CGo2FrontVideoData = C.unitree_go__msg__Go2FrontVideoData
type CGo2FrontVideoDataSequence = C.unitree_go__msg__Go2FrontVideoData__Sequence

func Go2FrontVideoDataSequenceToGo(goSlice *[]Go2FrontVideoData, cSlice CGo2FrontVideoDataSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Go2FrontVideoData, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Go2FrontVideoDataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func Go2FrontVideoDataSequenceToC(cSlice *CGo2FrontVideoDataSequence, goSlice []Go2FrontVideoData) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__Go2FrontVideoData)(C.malloc(C.sizeof_struct_unitree_go__msg__Go2FrontVideoData * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Go2FrontVideoDataTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func Go2FrontVideoDataArrayToGo(goSlice []Go2FrontVideoData, cSlice []CGo2FrontVideoData) {
	for i := 0; i < len(cSlice); i++ {
		Go2FrontVideoDataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func Go2FrontVideoDataArrayToC(cSlice []CGo2FrontVideoData, goSlice []Go2FrontVideoData) {
	for i := 0; i < len(goSlice); i++ {
		Go2FrontVideoDataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

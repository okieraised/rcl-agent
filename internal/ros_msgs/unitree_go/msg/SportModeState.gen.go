// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/sport_mode_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/SportModeState", SportModeStateTypeSupport)
	humble.RegisterMessage("unitree_go/msg/SportModeState", SportModeStateTypeSupport)
}

type SportModeState struct {
	Stamp            TimeSpec    `yaml:"stamp"`
	ErrorCode        uint32      `yaml:"error_code"`
	ImuState         IMUState    `yaml:"imu_state"`
	Mode             uint8       `yaml:"mode"`
	Progress         float32     `yaml:"progress"`
	GaitType         uint8       `yaml:"gait_type"`
	FootRaiseHeight  float32     `yaml:"foot_raise_height"`
	Position         [3]float32  `yaml:"position"`
	BodyHeight       float32     `yaml:"body_height"`
	Velocity         [3]float32  `yaml:"velocity"`
	YawSpeed         float32     `yaml:"yaw_speed"`
	RangeObstacle    [4]float32  `yaml:"range_obstacle"`
	FootForce        [4]int16    `yaml:"foot_force"`
	FootPositionBody [12]float32 `yaml:"foot_position_body"`
	FootSpeedBody    [12]float32 `yaml:"foot_speed_body"`
}

// NewSportModeState creates a new SportModeState with default values.
func NewSportModeState() *SportModeState {
	self := SportModeState{}
	self.SetDefaults()
	return &self
}

func (t *SportModeState) Clone() *SportModeState {
	c := &SportModeState{}
	c.Stamp = *t.Stamp.Clone()
	c.ErrorCode = t.ErrorCode
	c.ImuState = *t.ImuState.Clone()
	c.Mode = t.Mode
	c.Progress = t.Progress
	c.GaitType = t.GaitType
	c.FootRaiseHeight = t.FootRaiseHeight
	c.Position = t.Position
	c.BodyHeight = t.BodyHeight
	c.Velocity = t.Velocity
	c.YawSpeed = t.YawSpeed
	c.RangeObstacle = t.RangeObstacle
	c.FootForce = t.FootForce
	c.FootPositionBody = t.FootPositionBody
	c.FootSpeedBody = t.FootSpeedBody
	return c
}

func (t *SportModeState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SportModeState) SetDefaults() {
	t.Stamp.SetDefaults()
	t.ErrorCode = 0
	t.ImuState.SetDefaults()
	t.Mode = 0
	t.Progress = 0
	t.GaitType = 0
	t.FootRaiseHeight = 0
	t.Position = [3]float32{}
	t.BodyHeight = 0
	t.Velocity = [3]float32{}
	t.YawSpeed = 0
	t.RangeObstacle = [4]float32{}
	t.FootForce = [4]int16{}
	t.FootPositionBody = [12]float32{}
	t.FootSpeedBody = [12]float32{}
}

func (t *SportModeState) GetTypeSupport() humble.MessageTypeSupport {
	return SportModeStateTypeSupport
}

// SportModeStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type SportModeStatePublisher struct {
	*humble.Publisher
}

// NewSportModeStatePublisher creates and returns a new publisher for the
// SportModeState
func NewSportModeStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SportModeStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, SportModeStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SportModeStatePublisher{pub}, nil
}

func (p *SportModeStatePublisher) Publish(msg *SportModeState) error {
	return p.Publisher.Publish(msg)
}

// SportModeStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type SportModeStateSubscription struct {
	*humble.Subscription
}

// SportModeStateSubscriptionCallback type is used to provide a subscription
// handler function for a SportModeStateSubscription.
type SportModeStateSubscriptionCallback func(msg *SportModeState, info *humble.MessageInfo, err error)

// NewSportModeStateSubscription creates and returns a new subscription for the
// SportModeState
func NewSportModeStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SportModeStateSubscriptionCallback) (*SportModeStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SportModeState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SportModeStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SportModeStateSubscription{sub}, nil
}

func (s *SportModeStateSubscription) TakeMessage(out *SportModeState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSportModeStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSportModeStateSlice(dst, src []SportModeState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SportModeStateTypeSupport humble.MessageTypeSupport = _SportModeStateTypeSupport{}

type _SportModeStateTypeSupport struct{}

func (t _SportModeStateTypeSupport) New() humble.Message {
	return NewSportModeState()
}

func (t _SportModeStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__SportModeState
	return (unsafe.Pointer)(C.unitree_go__msg__SportModeState__create())
}

func (t _SportModeStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__SportModeState__destroy((*C.unitree_go__msg__SportModeState)(pointer_to_free))
}

func (t _SportModeStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SportModeState)
	mem := (*C.unitree_go__msg__SportModeState)(dst)
	TimeSpecTypeSupport.AsCStruct(unsafe.Pointer(&mem.stamp), &m.Stamp)
	mem.error_code = C.uint32_t(m.ErrorCode)
	IMUStateTypeSupport.AsCStruct(unsafe.Pointer(&mem.imu_state), &m.ImuState)
	mem.mode = C.uint8_t(m.Mode)
	mem.progress = C.float(m.Progress)
	mem.gait_type = C.uint8_t(m.GaitType)
	mem.foot_raise_height = C.float(m.FootRaiseHeight)
	cSlice_position := mem.position[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_position)), m.Position[:])
	mem.body_height = C.float(m.BodyHeight)
	cSlice_velocity := mem.velocity[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_velocity)), m.Velocity[:])
	mem.yaw_speed = C.float(m.YawSpeed)
	cSlice_range_obstacle := mem.range_obstacle[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_range_obstacle)), m.RangeObstacle[:])
	cSlice_foot_force := mem.foot_force[:]
	humble.Int16ArrayToC(*(*[]humble.CInt16)(unsafe.Pointer(&cSlice_foot_force)), m.FootForce[:])
	cSlice_foot_position_body := mem.foot_position_body[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_foot_position_body)), m.FootPositionBody[:])
	cSlice_foot_speed_body := mem.foot_speed_body[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_foot_speed_body)), m.FootSpeedBody[:])
}

func (t _SportModeStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SportModeState)
	mem := (*C.unitree_go__msg__SportModeState)(ros2_message_buffer)
	TimeSpecTypeSupport.AsGoStruct(&m.Stamp, unsafe.Pointer(&mem.stamp))
	m.ErrorCode = uint32(mem.error_code)
	IMUStateTypeSupport.AsGoStruct(&m.ImuState, unsafe.Pointer(&mem.imu_state))
	m.Mode = uint8(mem.mode)
	m.Progress = float32(mem.progress)
	m.GaitType = uint8(mem.gait_type)
	m.FootRaiseHeight = float32(mem.foot_raise_height)
	cSlice_position := mem.position[:]
	humble.Float32ArrayToGo(m.Position[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_position)))
	m.BodyHeight = float32(mem.body_height)
	cSlice_velocity := mem.velocity[:]
	humble.Float32ArrayToGo(m.Velocity[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_velocity)))
	m.YawSpeed = float32(mem.yaw_speed)
	cSlice_range_obstacle := mem.range_obstacle[:]
	humble.Float32ArrayToGo(m.RangeObstacle[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_range_obstacle)))
	cSlice_foot_force := mem.foot_force[:]
	humble.Int16ArrayToGo(m.FootForce[:], *(*[]humble.CInt16)(unsafe.Pointer(&cSlice_foot_force)))
	cSlice_foot_position_body := mem.foot_position_body[:]
	humble.Float32ArrayToGo(m.FootPositionBody[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_foot_position_body)))
	cSlice_foot_speed_body := mem.foot_speed_body[:]
	humble.Float32ArrayToGo(m.FootSpeedBody[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_foot_speed_body)))
}

func (t _SportModeStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__SportModeState())
}

type CSportModeState = C.unitree_go__msg__SportModeState
type CSportModeStateSequence = C.unitree_go__msg__SportModeState__Sequence

func SportModeStateSequenceToGo(goSlice *[]SportModeState, cSlice CSportModeStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SportModeState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SportModeStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SportModeStateSequenceToC(cSlice *CSportModeStateSequence, goSlice []SportModeState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__SportModeState)(C.malloc(C.sizeof_struct_unitree_go__msg__SportModeState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SportModeStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SportModeStateArrayToGo(goSlice []SportModeState, cSlice []CSportModeState) {
	for i := 0; i < len(cSlice); i++ {
		SportModeStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SportModeStateArrayToC(cSlice []CSportModeState, goSlice []SportModeState) {
	for i := 0; i < len(goSlice); i++ {
		SportModeStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

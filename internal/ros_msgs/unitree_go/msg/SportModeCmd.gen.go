// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/sport_mode_cmd.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/SportModeCmd", SportModeCmdTypeSupport)
	humble.RegisterMessage("unitree_go/msg/SportModeCmd", SportModeCmdTypeSupport)
}

type SportModeCmd struct {
	Mode            uint8         `yaml:"mode"`
	GaitType        uint8         `yaml:"gait_type"`
	SpeedLevel      uint8         `yaml:"speed_level"`
	FootRaiseHeight float32       `yaml:"foot_raise_height"`
	BodyHeight      float32       `yaml:"body_height"`
	Position        [2]float32    `yaml:"position"`
	Euler           [3]float32    `yaml:"euler"`
	Velocity        [2]float32    `yaml:"velocity"`
	YawSpeed        float32       `yaml:"yaw_speed"`
	BmsCmd          BmsCmd        `yaml:"bms_cmd"`
	PathPoint       [30]PathPoint `yaml:"path_point"`
}

// NewSportModeCmd creates a new SportModeCmd with default values.
func NewSportModeCmd() *SportModeCmd {
	self := SportModeCmd{}
	self.SetDefaults()
	return &self
}

func (t *SportModeCmd) Clone() *SportModeCmd {
	c := &SportModeCmd{}
	c.Mode = t.Mode
	c.GaitType = t.GaitType
	c.SpeedLevel = t.SpeedLevel
	c.FootRaiseHeight = t.FootRaiseHeight
	c.BodyHeight = t.BodyHeight
	c.Position = t.Position
	c.Euler = t.Euler
	c.Velocity = t.Velocity
	c.YawSpeed = t.YawSpeed
	c.BmsCmd = *t.BmsCmd.Clone()
	ClonePathPointSlice(c.PathPoint[:], t.PathPoint[:])
	return c
}

func (t *SportModeCmd) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *SportModeCmd) SetDefaults() {
	t.Mode = 0
	t.GaitType = 0
	t.SpeedLevel = 0
	t.FootRaiseHeight = 0
	t.BodyHeight = 0
	t.Position = [2]float32{}
	t.Euler = [3]float32{}
	t.Velocity = [2]float32{}
	t.YawSpeed = 0
	t.BmsCmd.SetDefaults()
	for i := range t.PathPoint {
		t.PathPoint[i].SetDefaults()
	}
}

func (t *SportModeCmd) GetTypeSupport() humble.MessageTypeSupport {
	return SportModeCmdTypeSupport
}

// SportModeCmdPublisher wraps humble.Publisher to provide type safe helper
// functions
type SportModeCmdPublisher struct {
	*humble.Publisher
}

// NewSportModeCmdPublisher creates and returns a new publisher for the
// SportModeCmd
func NewSportModeCmdPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*SportModeCmdPublisher, error) {
	pub, err := node.NewPublisher(topicName, SportModeCmdTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SportModeCmdPublisher{pub}, nil
}

func (p *SportModeCmdPublisher) Publish(msg *SportModeCmd) error {
	return p.Publisher.Publish(msg)
}

// SportModeCmdSubscription wraps humble.Subscription to provide type safe helper
// functions
type SportModeCmdSubscription struct {
	*humble.Subscription
}

// SportModeCmdSubscriptionCallback type is used to provide a subscription
// handler function for a SportModeCmdSubscription.
type SportModeCmdSubscriptionCallback func(msg *SportModeCmd, info *humble.MessageInfo, err error)

// NewSportModeCmdSubscription creates and returns a new subscription for the
// SportModeCmd
func NewSportModeCmdSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback SportModeCmdSubscriptionCallback) (*SportModeCmdSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg SportModeCmd
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, SportModeCmdTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SportModeCmdSubscription{sub}, nil
}

func (s *SportModeCmdSubscription) TakeMessage(out *SportModeCmd) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSportModeCmdSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSportModeCmdSlice(dst, src []SportModeCmd) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SportModeCmdTypeSupport humble.MessageTypeSupport = _SportModeCmdTypeSupport{}

type _SportModeCmdTypeSupport struct{}

func (t _SportModeCmdTypeSupport) New() humble.Message {
	return NewSportModeCmd()
}

func (t _SportModeCmdTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__SportModeCmd
	return (unsafe.Pointer)(C.unitree_go__msg__SportModeCmd__create())
}

func (t _SportModeCmdTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__SportModeCmd__destroy((*C.unitree_go__msg__SportModeCmd)(pointer_to_free))
}

func (t _SportModeCmdTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*SportModeCmd)
	mem := (*C.unitree_go__msg__SportModeCmd)(dst)
	mem.mode = C.uint8_t(m.Mode)
	mem.gait_type = C.uint8_t(m.GaitType)
	mem.speed_level = C.uint8_t(m.SpeedLevel)
	mem.foot_raise_height = C.float(m.FootRaiseHeight)
	mem.body_height = C.float(m.BodyHeight)
	cSlice_position := mem.position[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_position)), m.Position[:])
	cSlice_euler := mem.euler[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_euler)), m.Euler[:])
	cSlice_velocity := mem.velocity[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_velocity)), m.Velocity[:])
	mem.yaw_speed = C.float(m.YawSpeed)
	BmsCmdTypeSupport.AsCStruct(unsafe.Pointer(&mem.bms_cmd), &m.BmsCmd)
	PathPointArrayToC(mem.path_point[:], m.PathPoint[:])
}

func (t _SportModeCmdTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SportModeCmd)
	mem := (*C.unitree_go__msg__SportModeCmd)(ros2_message_buffer)
	m.Mode = uint8(mem.mode)
	m.GaitType = uint8(mem.gait_type)
	m.SpeedLevel = uint8(mem.speed_level)
	m.FootRaiseHeight = float32(mem.foot_raise_height)
	m.BodyHeight = float32(mem.body_height)
	cSlice_position := mem.position[:]
	humble.Float32ArrayToGo(m.Position[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_position)))
	cSlice_euler := mem.euler[:]
	humble.Float32ArrayToGo(m.Euler[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_euler)))
	cSlice_velocity := mem.velocity[:]
	humble.Float32ArrayToGo(m.Velocity[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_velocity)))
	m.YawSpeed = float32(mem.yaw_speed)
	BmsCmdTypeSupport.AsGoStruct(&m.BmsCmd, unsafe.Pointer(&mem.bms_cmd))
	PathPointArrayToGo(m.PathPoint[:], mem.path_point[:])
}

func (t _SportModeCmdTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__SportModeCmd())
}

type CSportModeCmd = C.unitree_go__msg__SportModeCmd
type CSportModeCmdSequence = C.unitree_go__msg__SportModeCmd__Sequence

func SportModeCmdSequenceToGo(goSlice *[]SportModeCmd, cSlice CSportModeCmdSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SportModeCmd, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SportModeCmdTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func SportModeCmdSequenceToC(cSlice *CSportModeCmdSequence, goSlice []SportModeCmd) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__SportModeCmd)(C.malloc(C.sizeof_struct_unitree_go__msg__SportModeCmd * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SportModeCmdTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func SportModeCmdArrayToGo(goSlice []SportModeCmd, cSlice []CSportModeCmd) {
	for i := 0; i < len(cSlice); i++ {
		SportModeCmdTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func SportModeCmdArrayToC(cSlice []CSportModeCmd, goSlice []SportModeCmd) {
	for i := 0; i < len(goSlice); i++ {
		SportModeCmdTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

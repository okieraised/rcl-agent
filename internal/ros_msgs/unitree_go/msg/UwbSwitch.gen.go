// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/uwb_switch.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/UwbSwitch", UwbSwitchTypeSupport)
	humble.RegisterMessage("unitree_go/msg/UwbSwitch", UwbSwitchTypeSupport)
}

type UwbSwitch struct {
	Enabled uint8 `yaml:"enabled"`
}

// NewUwbSwitch creates a new UwbSwitch with default values.
func NewUwbSwitch() *UwbSwitch {
	self := UwbSwitch{}
	self.SetDefaults()
	return &self
}

func (t *UwbSwitch) Clone() *UwbSwitch {
	c := &UwbSwitch{}
	c.Enabled = t.Enabled
	return c
}

func (t *UwbSwitch) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *UwbSwitch) SetDefaults() {
	t.Enabled = 0
}

func (t *UwbSwitch) GetTypeSupport() humble.MessageTypeSupport {
	return UwbSwitchTypeSupport
}

// UwbSwitchPublisher wraps humble.Publisher to provide type safe helper
// functions
type UwbSwitchPublisher struct {
	*humble.Publisher
}

// NewUwbSwitchPublisher creates and returns a new publisher for the
// UwbSwitch
func NewUwbSwitchPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*UwbSwitchPublisher, error) {
	pub, err := node.NewPublisher(topicName, UwbSwitchTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UwbSwitchPublisher{pub}, nil
}

func (p *UwbSwitchPublisher) Publish(msg *UwbSwitch) error {
	return p.Publisher.Publish(msg)
}

// UwbSwitchSubscription wraps humble.Subscription to provide type safe helper
// functions
type UwbSwitchSubscription struct {
	*humble.Subscription
}

// UwbSwitchSubscriptionCallback type is used to provide a subscription
// handler function for a UwbSwitchSubscription.
type UwbSwitchSubscriptionCallback func(msg *UwbSwitch, info *humble.MessageInfo, err error)

// NewUwbSwitchSubscription creates and returns a new subscription for the
// UwbSwitch
func NewUwbSwitchSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback UwbSwitchSubscriptionCallback) (*UwbSwitchSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg UwbSwitch
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, UwbSwitchTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &UwbSwitchSubscription{sub}, nil
}

func (s *UwbSwitchSubscription) TakeMessage(out *UwbSwitch) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneUwbSwitchSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUwbSwitchSlice(dst, src []UwbSwitch) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UwbSwitchTypeSupport humble.MessageTypeSupport = _UwbSwitchTypeSupport{}

type _UwbSwitchTypeSupport struct{}

func (t _UwbSwitchTypeSupport) New() humble.Message {
	return NewUwbSwitch()
}

func (t _UwbSwitchTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__UwbSwitch
	return (unsafe.Pointer)(C.unitree_go__msg__UwbSwitch__create())
}

func (t _UwbSwitchTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__UwbSwitch__destroy((*C.unitree_go__msg__UwbSwitch)(pointer_to_free))
}

func (t _UwbSwitchTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*UwbSwitch)
	mem := (*C.unitree_go__msg__UwbSwitch)(dst)
	mem.enabled = C.uint8_t(m.Enabled)
}

func (t _UwbSwitchTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UwbSwitch)
	mem := (*C.unitree_go__msg__UwbSwitch)(ros2_message_buffer)
	m.Enabled = uint8(mem.enabled)
}

func (t _UwbSwitchTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__UwbSwitch())
}

type CUwbSwitch = C.unitree_go__msg__UwbSwitch
type CUwbSwitchSequence = C.unitree_go__msg__UwbSwitch__Sequence

func UwbSwitchSequenceToGo(goSlice *[]UwbSwitch, cSlice CUwbSwitchSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UwbSwitch, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		UwbSwitchTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func UwbSwitchSequenceToC(cSlice *CUwbSwitchSequence, goSlice []UwbSwitch) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__UwbSwitch)(C.malloc(C.sizeof_struct_unitree_go__msg__UwbSwitch * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		UwbSwitchTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func UwbSwitchArrayToGo(goSlice []UwbSwitch, cSlice []CUwbSwitch) {
	for i := 0; i < len(cSlice); i++ {
		UwbSwitchTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func UwbSwitchArrayToC(cSlice []CUwbSwitch, goSlice []UwbSwitch) {
	for i := 0; i < len(goSlice); i++ {
		UwbSwitchTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

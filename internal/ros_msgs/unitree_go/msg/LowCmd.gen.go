// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/low_cmd.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/LowCmd", LowCmdTypeSupport)
	humble.RegisterMessage("unitree_go/msg/LowCmd", LowCmdTypeSupport)
}

type LowCmd struct {
	Head           [2]uint8     `yaml:"head"`
	LevelFlag      uint8        `yaml:"level_flag"`
	FrameReserve   uint8        `yaml:"frame_reserve"`
	Sn             [2]uint32    `yaml:"sn"`
	Version        [2]uint32    `yaml:"version"`
	Bandwidth      uint16       `yaml:"bandwidth"`
	MotorCmd       [20]MotorCmd `yaml:"motor_cmd"`
	BmsCmd         BmsCmd       `yaml:"bms_cmd"`
	WirelessRemote [40]uint8    `yaml:"wireless_remote"`
	Led            [12]uint8    `yaml:"led"`
	Fan            [2]uint8     `yaml:"fan"`
	Gpio           uint8        `yaml:"gpio"`
	Reserve        uint32       `yaml:"reserve"`
	Crc            uint32       `yaml:"crc"`
}

// NewLowCmd creates a new LowCmd with default values.
func NewLowCmd() *LowCmd {
	self := LowCmd{}
	self.SetDefaults()
	return &self
}

func (t *LowCmd) Clone() *LowCmd {
	c := &LowCmd{}
	c.Head = t.Head
	c.LevelFlag = t.LevelFlag
	c.FrameReserve = t.FrameReserve
	c.Sn = t.Sn
	c.Version = t.Version
	c.Bandwidth = t.Bandwidth
	CloneMotorCmdSlice(c.MotorCmd[:], t.MotorCmd[:])
	c.BmsCmd = *t.BmsCmd.Clone()
	c.WirelessRemote = t.WirelessRemote
	c.Led = t.Led
	c.Fan = t.Fan
	c.Gpio = t.Gpio
	c.Reserve = t.Reserve
	c.Crc = t.Crc
	return c
}

func (t *LowCmd) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *LowCmd) SetDefaults() {
	t.Head = [2]uint8{}
	t.LevelFlag = 0
	t.FrameReserve = 0
	t.Sn = [2]uint32{}
	t.Version = [2]uint32{}
	t.Bandwidth = 0
	for i := range t.MotorCmd {
		t.MotorCmd[i].SetDefaults()
	}
	t.BmsCmd.SetDefaults()
	t.WirelessRemote = [40]uint8{}
	t.Led = [12]uint8{}
	t.Fan = [2]uint8{}
	t.Gpio = 0
	t.Reserve = 0
	t.Crc = 0
}

func (t *LowCmd) GetTypeSupport() humble.MessageTypeSupport {
	return LowCmdTypeSupport
}

// LowCmdPublisher wraps humble.Publisher to provide type safe helper
// functions
type LowCmdPublisher struct {
	*humble.Publisher
}

// NewLowCmdPublisher creates and returns a new publisher for the
// LowCmd
func NewLowCmdPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*LowCmdPublisher, error) {
	pub, err := node.NewPublisher(topicName, LowCmdTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LowCmdPublisher{pub}, nil
}

func (p *LowCmdPublisher) Publish(msg *LowCmd) error {
	return p.Publisher.Publish(msg)
}

// LowCmdSubscription wraps humble.Subscription to provide type safe helper
// functions
type LowCmdSubscription struct {
	*humble.Subscription
}

// LowCmdSubscriptionCallback type is used to provide a subscription
// handler function for a LowCmdSubscription.
type LowCmdSubscriptionCallback func(msg *LowCmd, info *humble.MessageInfo, err error)

// NewLowCmdSubscription creates and returns a new subscription for the
// LowCmd
func NewLowCmdSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback LowCmdSubscriptionCallback) (*LowCmdSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg LowCmd
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, LowCmdTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LowCmdSubscription{sub}, nil
}

func (s *LowCmdSubscription) TakeMessage(out *LowCmd) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLowCmdSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLowCmdSlice(dst, src []LowCmd) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LowCmdTypeSupport humble.MessageTypeSupport = _LowCmdTypeSupport{}

type _LowCmdTypeSupport struct{}

func (t _LowCmdTypeSupport) New() humble.Message {
	return NewLowCmd()
}

func (t _LowCmdTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__LowCmd
	return (unsafe.Pointer)(C.unitree_go__msg__LowCmd__create())
}

func (t _LowCmdTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__LowCmd__destroy((*C.unitree_go__msg__LowCmd)(pointer_to_free))
}

func (t _LowCmdTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*LowCmd)
	mem := (*C.unitree_go__msg__LowCmd)(dst)
	cSlice_head := mem.head[:]
	humble.Uint8ArrayToC(*(*[]humble.CUint8)(unsafe.Pointer(&cSlice_head)), m.Head[:])
	mem.level_flag = C.uint8_t(m.LevelFlag)
	mem.frame_reserve = C.uint8_t(m.FrameReserve)
	cSlice_sn := mem.sn[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_sn)), m.Sn[:])
	cSlice_version := mem.version[:]
	humble.Uint32ArrayToC(*(*[]humble.CUint32)(unsafe.Pointer(&cSlice_version)), m.Version[:])
	mem.bandwidth = C.uint16_t(m.Bandwidth)
	MotorCmdArrayToC(mem.motor_cmd[:], m.MotorCmd[:])
	BmsCmdTypeSupport.AsCStruct(unsafe.Pointer(&mem.bms_cmd), &m.BmsCmd)
	cSlice_wireless_remote := mem.wireless_remote[:]
	humble.Uint8ArrayToC(*(*[]humble.CUint8)(unsafe.Pointer(&cSlice_wireless_remote)), m.WirelessRemote[:])
	cSlice_led := mem.led[:]
	humble.Uint8ArrayToC(*(*[]humble.CUint8)(unsafe.Pointer(&cSlice_led)), m.Led[:])
	cSlice_fan := mem.fan[:]
	humble.Uint8ArrayToC(*(*[]humble.CUint8)(unsafe.Pointer(&cSlice_fan)), m.Fan[:])
	mem.gpio = C.uint8_t(m.Gpio)
	mem.reserve = C.uint32_t(m.Reserve)
	mem.crc = C.uint32_t(m.Crc)
}

func (t _LowCmdTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LowCmd)
	mem := (*C.unitree_go__msg__LowCmd)(ros2_message_buffer)
	cSlice_head := mem.head[:]
	humble.Uint8ArrayToGo(m.Head[:], *(*[]humble.CUint8)(unsafe.Pointer(&cSlice_head)))
	m.LevelFlag = uint8(mem.level_flag)
	m.FrameReserve = uint8(mem.frame_reserve)
	cSlice_sn := mem.sn[:]
	humble.Uint32ArrayToGo(m.Sn[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_sn)))
	cSlice_version := mem.version[:]
	humble.Uint32ArrayToGo(m.Version[:], *(*[]humble.CUint32)(unsafe.Pointer(&cSlice_version)))
	m.Bandwidth = uint16(mem.bandwidth)
	MotorCmdArrayToGo(m.MotorCmd[:], mem.motor_cmd[:])
	BmsCmdTypeSupport.AsGoStruct(&m.BmsCmd, unsafe.Pointer(&mem.bms_cmd))
	cSlice_wireless_remote := mem.wireless_remote[:]
	humble.Uint8ArrayToGo(m.WirelessRemote[:], *(*[]humble.CUint8)(unsafe.Pointer(&cSlice_wireless_remote)))
	cSlice_led := mem.led[:]
	humble.Uint8ArrayToGo(m.Led[:], *(*[]humble.CUint8)(unsafe.Pointer(&cSlice_led)))
	cSlice_fan := mem.fan[:]
	humble.Uint8ArrayToGo(m.Fan[:], *(*[]humble.CUint8)(unsafe.Pointer(&cSlice_fan)))
	m.Gpio = uint8(mem.gpio)
	m.Reserve = uint32(mem.reserve)
	m.Crc = uint32(mem.crc)
}

func (t _LowCmdTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__LowCmd())
}

type CLowCmd = C.unitree_go__msg__LowCmd
type CLowCmdSequence = C.unitree_go__msg__LowCmd__Sequence

func LowCmdSequenceToGo(goSlice *[]LowCmd, cSlice CLowCmdSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LowCmd, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LowCmdTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func LowCmdSequenceToC(cSlice *CLowCmdSequence, goSlice []LowCmd) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__LowCmd)(C.malloc(C.sizeof_struct_unitree_go__msg__LowCmd * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LowCmdTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func LowCmdArrayToGo(goSlice []LowCmd, cSlice []CLowCmd) {
	for i := 0; i < len(cSlice); i++ {
		LowCmdTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func LowCmdArrayToC(cSlice []CLowCmd, goSlice []LowCmd) {
	for i := 0; i < len(goSlice); i++ {
		LowCmdTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

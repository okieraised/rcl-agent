// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/time_spec.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/TimeSpec", TimeSpecTypeSupport)
	humble.RegisterMessage("unitree_go/msg/TimeSpec", TimeSpecTypeSupport)
}

type TimeSpec struct {
	Sec     int32  `yaml:"sec"`     // Time indicates a specific point in time, relative to a clock's 0 point.The seconds component, valid over all int32 values.
	Nanosec uint32 `yaml:"nanosec"` // The nanoseconds component, valid in the range [0, 10e9).
}

// NewTimeSpec creates a new TimeSpec with default values.
func NewTimeSpec() *TimeSpec {
	self := TimeSpec{}
	self.SetDefaults()
	return &self
}

func (t *TimeSpec) Clone() *TimeSpec {
	c := &TimeSpec{}
	c.Sec = t.Sec
	c.Nanosec = t.Nanosec
	return c
}

func (t *TimeSpec) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *TimeSpec) SetDefaults() {
	t.Sec = 0
	t.Nanosec = 0
}

func (t *TimeSpec) GetTypeSupport() humble.MessageTypeSupport {
	return TimeSpecTypeSupport
}

// TimeSpecPublisher wraps humble.Publisher to provide type safe helper
// functions
type TimeSpecPublisher struct {
	*humble.Publisher
}

// NewTimeSpecPublisher creates and returns a new publisher for the
// TimeSpec
func NewTimeSpecPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*TimeSpecPublisher, error) {
	pub, err := node.NewPublisher(topicName, TimeSpecTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TimeSpecPublisher{pub}, nil
}

func (p *TimeSpecPublisher) Publish(msg *TimeSpec) error {
	return p.Publisher.Publish(msg)
}

// TimeSpecSubscription wraps humble.Subscription to provide type safe helper
// functions
type TimeSpecSubscription struct {
	*humble.Subscription
}

// TimeSpecSubscriptionCallback type is used to provide a subscription
// handler function for a TimeSpecSubscription.
type TimeSpecSubscriptionCallback func(msg *TimeSpec, info *humble.MessageInfo, err error)

// NewTimeSpecSubscription creates and returns a new subscription for the
// TimeSpec
func NewTimeSpecSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback TimeSpecSubscriptionCallback) (*TimeSpecSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg TimeSpec
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, TimeSpecTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TimeSpecSubscription{sub}, nil
}

func (s *TimeSpecSubscription) TakeMessage(out *TimeSpec) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTimeSpecSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTimeSpecSlice(dst, src []TimeSpec) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TimeSpecTypeSupport humble.MessageTypeSupport = _TimeSpecTypeSupport{}

type _TimeSpecTypeSupport struct{}

func (t _TimeSpecTypeSupport) New() humble.Message {
	return NewTimeSpec()
}

func (t _TimeSpecTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__TimeSpec
	return (unsafe.Pointer)(C.unitree_go__msg__TimeSpec__create())
}

func (t _TimeSpecTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__TimeSpec__destroy((*C.unitree_go__msg__TimeSpec)(pointer_to_free))
}

func (t _TimeSpecTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*TimeSpec)
	mem := (*C.unitree_go__msg__TimeSpec)(dst)
	mem.sec = C.int32_t(m.Sec)
	mem.nanosec = C.uint32_t(m.Nanosec)
}

func (t _TimeSpecTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TimeSpec)
	mem := (*C.unitree_go__msg__TimeSpec)(ros2_message_buffer)
	m.Sec = int32(mem.sec)
	m.Nanosec = uint32(mem.nanosec)
}

func (t _TimeSpecTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__TimeSpec())
}

type CTimeSpec = C.unitree_go__msg__TimeSpec
type CTimeSpecSequence = C.unitree_go__msg__TimeSpec__Sequence

func TimeSpecSequenceToGo(goSlice *[]TimeSpec, cSlice CTimeSpecSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TimeSpec, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TimeSpecTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func TimeSpecSequenceToC(cSlice *CTimeSpecSequence, goSlice []TimeSpec) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__TimeSpec)(C.malloc(C.sizeof_struct_unitree_go__msg__TimeSpec * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TimeSpecTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func TimeSpecArrayToGo(goSlice []TimeSpec, cSlice []CTimeSpec) {
	for i := 0; i < len(cSlice); i++ {
		TimeSpecTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func TimeSpecArrayToC(cSlice []CTimeSpec, goSlice []TimeSpec) {
	for i := 0; i < len(goSlice); i++ {
		TimeSpecTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

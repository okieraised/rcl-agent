// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/bms_cmd.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/BmsCmd", BmsCmdTypeSupport)
	humble.RegisterMessage("unitree_go/msg/BmsCmd", BmsCmdTypeSupport)
}

type BmsCmd struct {
	Off     uint8    `yaml:"off"`
	Reserve [3]uint8 `yaml:"reserve"`
}

// NewBmsCmd creates a new BmsCmd with default values.
func NewBmsCmd() *BmsCmd {
	self := BmsCmd{}
	self.SetDefaults()
	return &self
}

func (t *BmsCmd) Clone() *BmsCmd {
	c := &BmsCmd{}
	c.Off = t.Off
	c.Reserve = t.Reserve
	return c
}

func (t *BmsCmd) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *BmsCmd) SetDefaults() {
	t.Off = 0
	t.Reserve = [3]uint8{}
}

func (t *BmsCmd) GetTypeSupport() humble.MessageTypeSupport {
	return BmsCmdTypeSupport
}

// BmsCmdPublisher wraps humble.Publisher to provide type safe helper
// functions
type BmsCmdPublisher struct {
	*humble.Publisher
}

// NewBmsCmdPublisher creates and returns a new publisher for the
// BmsCmd
func NewBmsCmdPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*BmsCmdPublisher, error) {
	pub, err := node.NewPublisher(topicName, BmsCmdTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &BmsCmdPublisher{pub}, nil
}

func (p *BmsCmdPublisher) Publish(msg *BmsCmd) error {
	return p.Publisher.Publish(msg)
}

// BmsCmdSubscription wraps humble.Subscription to provide type safe helper
// functions
type BmsCmdSubscription struct {
	*humble.Subscription
}

// BmsCmdSubscriptionCallback type is used to provide a subscription
// handler function for a BmsCmdSubscription.
type BmsCmdSubscriptionCallback func(msg *BmsCmd, info *humble.MessageInfo, err error)

// NewBmsCmdSubscription creates and returns a new subscription for the
// BmsCmd
func NewBmsCmdSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback BmsCmdSubscriptionCallback) (*BmsCmdSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg BmsCmd
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, BmsCmdTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &BmsCmdSubscription{sub}, nil
}

func (s *BmsCmdSubscription) TakeMessage(out *BmsCmd) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBmsCmdSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBmsCmdSlice(dst, src []BmsCmd) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var BmsCmdTypeSupport humble.MessageTypeSupport = _BmsCmdTypeSupport{}

type _BmsCmdTypeSupport struct{}

func (t _BmsCmdTypeSupport) New() humble.Message {
	return NewBmsCmd()
}

func (t _BmsCmdTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__BmsCmd
	return (unsafe.Pointer)(C.unitree_go__msg__BmsCmd__create())
}

func (t _BmsCmdTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__BmsCmd__destroy((*C.unitree_go__msg__BmsCmd)(pointer_to_free))
}

func (t _BmsCmdTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*BmsCmd)
	mem := (*C.unitree_go__msg__BmsCmd)(dst)
	mem.off = C.uint8_t(m.Off)
	cSlice_reserve := mem.reserve[:]
	humble.Uint8ArrayToC(*(*[]humble.CUint8)(unsafe.Pointer(&cSlice_reserve)), m.Reserve[:])
}

func (t _BmsCmdTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*BmsCmd)
	mem := (*C.unitree_go__msg__BmsCmd)(ros2_message_buffer)
	m.Off = uint8(mem.off)
	cSlice_reserve := mem.reserve[:]
	humble.Uint8ArrayToGo(m.Reserve[:], *(*[]humble.CUint8)(unsafe.Pointer(&cSlice_reserve)))
}

func (t _BmsCmdTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__BmsCmd())
}

type CBmsCmd = C.unitree_go__msg__BmsCmd
type CBmsCmdSequence = C.unitree_go__msg__BmsCmd__Sequence

func BmsCmdSequenceToGo(goSlice *[]BmsCmd, cSlice CBmsCmdSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]BmsCmd, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		BmsCmdTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func BmsCmdSequenceToC(cSlice *CBmsCmdSequence, goSlice []BmsCmd) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__BmsCmd)(C.malloc(C.sizeof_struct_unitree_go__msg__BmsCmd * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		BmsCmdTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func BmsCmdArrayToGo(goSlice []BmsCmd, cSlice []CBmsCmd) {
	for i := 0; i < len(cSlice); i++ {
		BmsCmdTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func BmsCmdArrayToC(cSlice []CBmsCmd, goSlice []BmsCmd) {
	for i := 0; i < len(goSlice); i++ {
		BmsCmdTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/motor_states.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/MotorStates", MotorStatesTypeSupport)
	humble.RegisterMessage("unitree_go/msg/MotorStates", MotorStatesTypeSupport)
}

type MotorStates struct {
	States []MotorState `yaml:"states"`
}

// NewMotorStates creates a new MotorStates with default values.
func NewMotorStates() *MotorStates {
	self := MotorStates{}
	self.SetDefaults()
	return &self
}

func (t *MotorStates) Clone() *MotorStates {
	c := &MotorStates{}
	if t.States != nil {
		c.States = make([]MotorState, len(t.States))
		CloneMotorStateSlice(c.States, t.States)
	}
	return c
}

func (t *MotorStates) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MotorStates) SetDefaults() {
	t.States = nil
}

func (t *MotorStates) GetTypeSupport() humble.MessageTypeSupport {
	return MotorStatesTypeSupport
}

// MotorStatesPublisher wraps humble.Publisher to provide type safe helper
// functions
type MotorStatesPublisher struct {
	*humble.Publisher
}

// NewMotorStatesPublisher creates and returns a new publisher for the
// MotorStates
func NewMotorStatesPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MotorStatesPublisher, error) {
	pub, err := node.NewPublisher(topicName, MotorStatesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MotorStatesPublisher{pub}, nil
}

func (p *MotorStatesPublisher) Publish(msg *MotorStates) error {
	return p.Publisher.Publish(msg)
}

// MotorStatesSubscription wraps humble.Subscription to provide type safe helper
// functions
type MotorStatesSubscription struct {
	*humble.Subscription
}

// MotorStatesSubscriptionCallback type is used to provide a subscription
// handler function for a MotorStatesSubscription.
type MotorStatesSubscriptionCallback func(msg *MotorStates, info *humble.MessageInfo, err error)

// NewMotorStatesSubscription creates and returns a new subscription for the
// MotorStates
func NewMotorStatesSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MotorStatesSubscriptionCallback) (*MotorStatesSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MotorStates
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MotorStatesTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MotorStatesSubscription{sub}, nil
}

func (s *MotorStatesSubscription) TakeMessage(out *MotorStates) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMotorStatesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMotorStatesSlice(dst, src []MotorStates) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MotorStatesTypeSupport humble.MessageTypeSupport = _MotorStatesTypeSupport{}

type _MotorStatesTypeSupport struct{}

func (t _MotorStatesTypeSupport) New() humble.Message {
	return NewMotorStates()
}

func (t _MotorStatesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__MotorStates
	return (unsafe.Pointer)(C.unitree_go__msg__MotorStates__create())
}

func (t _MotorStatesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__MotorStates__destroy((*C.unitree_go__msg__MotorStates)(pointer_to_free))
}

func (t _MotorStatesTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MotorStates)
	mem := (*C.unitree_go__msg__MotorStates)(dst)
	MotorStateSequenceToC(&mem.states, m.States)
}

func (t _MotorStatesTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MotorStates)
	mem := (*C.unitree_go__msg__MotorStates)(ros2_message_buffer)
	MotorStateSequenceToGo(&m.States, mem.states)
}

func (t _MotorStatesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__MotorStates())
}

type CMotorStates = C.unitree_go__msg__MotorStates
type CMotorStatesSequence = C.unitree_go__msg__MotorStates__Sequence

func MotorStatesSequenceToGo(goSlice *[]MotorStates, cSlice CMotorStatesSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MotorStates, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MotorStatesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MotorStatesSequenceToC(cSlice *CMotorStatesSequence, goSlice []MotorStates) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__MotorStates)(C.malloc(C.sizeof_struct_unitree_go__msg__MotorStates * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MotorStatesTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MotorStatesArrayToGo(goSlice []MotorStates, cSlice []CMotorStates) {
	for i := 0; i < len(cSlice); i++ {
		MotorStatesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MotorStatesArrayToC(cSlice []CMotorStates, goSlice []MotorStates) {
	for i := 0; i < len(goSlice); i++ {
		MotorStatesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/motor_cmds.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/MotorCmds", MotorCmdsTypeSupport)
	humble.RegisterMessage("unitree_go/msg/MotorCmds", MotorCmdsTypeSupport)
}

type MotorCmds struct {
	Cmds []MotorCmd `yaml:"cmds"`
}

// NewMotorCmds creates a new MotorCmds with default values.
func NewMotorCmds() *MotorCmds {
	self := MotorCmds{}
	self.SetDefaults()
	return &self
}

func (t *MotorCmds) Clone() *MotorCmds {
	c := &MotorCmds{}
	if t.Cmds != nil {
		c.Cmds = make([]MotorCmd, len(t.Cmds))
		CloneMotorCmdSlice(c.Cmds, t.Cmds)
	}
	return c
}

func (t *MotorCmds) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *MotorCmds) SetDefaults() {
	t.Cmds = nil
}

func (t *MotorCmds) GetTypeSupport() humble.MessageTypeSupport {
	return MotorCmdsTypeSupport
}

// MotorCmdsPublisher wraps humble.Publisher to provide type safe helper
// functions
type MotorCmdsPublisher struct {
	*humble.Publisher
}

// NewMotorCmdsPublisher creates and returns a new publisher for the
// MotorCmds
func NewMotorCmdsPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*MotorCmdsPublisher, error) {
	pub, err := node.NewPublisher(topicName, MotorCmdsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MotorCmdsPublisher{pub}, nil
}

func (p *MotorCmdsPublisher) Publish(msg *MotorCmds) error {
	return p.Publisher.Publish(msg)
}

// MotorCmdsSubscription wraps humble.Subscription to provide type safe helper
// functions
type MotorCmdsSubscription struct {
	*humble.Subscription
}

// MotorCmdsSubscriptionCallback type is used to provide a subscription
// handler function for a MotorCmdsSubscription.
type MotorCmdsSubscriptionCallback func(msg *MotorCmds, info *humble.MessageInfo, err error)

// NewMotorCmdsSubscription creates and returns a new subscription for the
// MotorCmds
func NewMotorCmdsSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback MotorCmdsSubscriptionCallback) (*MotorCmdsSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg MotorCmds
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, MotorCmdsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MotorCmdsSubscription{sub}, nil
}

func (s *MotorCmdsSubscription) TakeMessage(out *MotorCmds) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMotorCmdsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMotorCmdsSlice(dst, src []MotorCmds) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MotorCmdsTypeSupport humble.MessageTypeSupport = _MotorCmdsTypeSupport{}

type _MotorCmdsTypeSupport struct{}

func (t _MotorCmdsTypeSupport) New() humble.Message {
	return NewMotorCmds()
}

func (t _MotorCmdsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__MotorCmds
	return (unsafe.Pointer)(C.unitree_go__msg__MotorCmds__create())
}

func (t _MotorCmdsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__MotorCmds__destroy((*C.unitree_go__msg__MotorCmds)(pointer_to_free))
}

func (t _MotorCmdsTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*MotorCmds)
	mem := (*C.unitree_go__msg__MotorCmds)(dst)
	MotorCmdSequenceToC(&mem.cmds, m.Cmds)
}

func (t _MotorCmdsTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MotorCmds)
	mem := (*C.unitree_go__msg__MotorCmds)(ros2_message_buffer)
	MotorCmdSequenceToGo(&m.Cmds, mem.cmds)
}

func (t _MotorCmdsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__MotorCmds())
}

type CMotorCmds = C.unitree_go__msg__MotorCmds
type CMotorCmdsSequence = C.unitree_go__msg__MotorCmds__Sequence

func MotorCmdsSequenceToGo(goSlice *[]MotorCmds, cSlice CMotorCmdsSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MotorCmds, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MotorCmdsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func MotorCmdsSequenceToC(cSlice *CMotorCmdsSequence, goSlice []MotorCmds) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__MotorCmds)(C.malloc(C.sizeof_struct_unitree_go__msg__MotorCmds * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MotorCmdsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func MotorCmdsArrayToGo(goSlice []MotorCmds, cSlice []CMotorCmds) {
	for i := 0; i < len(cSlice); i++ {
		MotorCmdsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func MotorCmdsArrayToC(cSlice []CMotorCmds, goSlice []MotorCmds) {
	for i := 0; i < len(goSlice); i++ {
		MotorCmdsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

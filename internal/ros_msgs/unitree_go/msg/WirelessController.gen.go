// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/wireless_controller.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/WirelessController", WirelessControllerTypeSupport)
	humble.RegisterMessage("unitree_go/msg/WirelessController", WirelessControllerTypeSupport)
}

type WirelessController struct {
	Lx   float32 `yaml:"lx"`
	Ly   float32 `yaml:"ly"`
	Rx   float32 `yaml:"rx"`
	Ry   float32 `yaml:"ry"`
	Keys uint16  `yaml:"keys"`
}

// NewWirelessController creates a new WirelessController with default values.
func NewWirelessController() *WirelessController {
	self := WirelessController{}
	self.SetDefaults()
	return &self
}

func (t *WirelessController) Clone() *WirelessController {
	c := &WirelessController{}
	c.Lx = t.Lx
	c.Ly = t.Ly
	c.Rx = t.Rx
	c.Ry = t.Ry
	c.Keys = t.Keys
	return c
}

func (t *WirelessController) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *WirelessController) SetDefaults() {
	t.Lx = 0
	t.Ly = 0
	t.Rx = 0
	t.Ry = 0
	t.Keys = 0
}

func (t *WirelessController) GetTypeSupport() humble.MessageTypeSupport {
	return WirelessControllerTypeSupport
}

// WirelessControllerPublisher wraps humble.Publisher to provide type safe helper
// functions
type WirelessControllerPublisher struct {
	*humble.Publisher
}

// NewWirelessControllerPublisher creates and returns a new publisher for the
// WirelessController
func NewWirelessControllerPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*WirelessControllerPublisher, error) {
	pub, err := node.NewPublisher(topicName, WirelessControllerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WirelessControllerPublisher{pub}, nil
}

func (p *WirelessControllerPublisher) Publish(msg *WirelessController) error {
	return p.Publisher.Publish(msg)
}

// WirelessControllerSubscription wraps humble.Subscription to provide type safe helper
// functions
type WirelessControllerSubscription struct {
	*humble.Subscription
}

// WirelessControllerSubscriptionCallback type is used to provide a subscription
// handler function for a WirelessControllerSubscription.
type WirelessControllerSubscriptionCallback func(msg *WirelessController, info *humble.MessageInfo, err error)

// NewWirelessControllerSubscription creates and returns a new subscription for the
// WirelessController
func NewWirelessControllerSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback WirelessControllerSubscriptionCallback) (*WirelessControllerSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg WirelessController
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, WirelessControllerTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WirelessControllerSubscription{sub}, nil
}

func (s *WirelessControllerSubscription) TakeMessage(out *WirelessController) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWirelessControllerSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWirelessControllerSlice(dst, src []WirelessController) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WirelessControllerTypeSupport humble.MessageTypeSupport = _WirelessControllerTypeSupport{}

type _WirelessControllerTypeSupport struct{}

func (t _WirelessControllerTypeSupport) New() humble.Message {
	return NewWirelessController()
}

func (t _WirelessControllerTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__WirelessController
	return (unsafe.Pointer)(C.unitree_go__msg__WirelessController__create())
}

func (t _WirelessControllerTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__WirelessController__destroy((*C.unitree_go__msg__WirelessController)(pointer_to_free))
}

func (t _WirelessControllerTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*WirelessController)
	mem := (*C.unitree_go__msg__WirelessController)(dst)
	mem.lx = C.float(m.Lx)
	mem.ly = C.float(m.Ly)
	mem.rx = C.float(m.Rx)
	mem.ry = C.float(m.Ry)
	mem.keys = C.uint16_t(m.Keys)
}

func (t _WirelessControllerTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WirelessController)
	mem := (*C.unitree_go__msg__WirelessController)(ros2_message_buffer)
	m.Lx = float32(mem.lx)
	m.Ly = float32(mem.ly)
	m.Rx = float32(mem.rx)
	m.Ry = float32(mem.ry)
	m.Keys = uint16(mem.keys)
}

func (t _WirelessControllerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__WirelessController())
}

type CWirelessController = C.unitree_go__msg__WirelessController
type CWirelessControllerSequence = C.unitree_go__msg__WirelessController__Sequence

func WirelessControllerSequenceToGo(goSlice *[]WirelessController, cSlice CWirelessControllerSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WirelessController, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WirelessControllerTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func WirelessControllerSequenceToC(cSlice *CWirelessControllerSequence, goSlice []WirelessController) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__WirelessController)(C.malloc(C.sizeof_struct_unitree_go__msg__WirelessController * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WirelessControllerTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func WirelessControllerArrayToGo(goSlice []WirelessController, cSlice []CWirelessController) {
	for i := 0; i < len(cSlice); i++ {
		WirelessControllerTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func WirelessControllerArrayToC(cSlice []CWirelessController, goSlice []WirelessController) {
	for i := 0; i < len(goSlice); i++ {
		WirelessControllerTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

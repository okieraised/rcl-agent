// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/path_point.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/PathPoint", PathPointTypeSupport)
	humble.RegisterMessage("unitree_go/msg/PathPoint", PathPointTypeSupport)
}

type PathPoint struct {
	TFromStart float32 `yaml:"t_from_start"`
	X          float32 `yaml:"x"`
	Y          float32 `yaml:"y"`
	Yaw        float32 `yaml:"yaw"`
	Vx         float32 `yaml:"vx"`
	Vy         float32 `yaml:"vy"`
	Vyaw       float32 `yaml:"vyaw"`
}

// NewPathPoint creates a new PathPoint with default values.
func NewPathPoint() *PathPoint {
	self := PathPoint{}
	self.SetDefaults()
	return &self
}

func (t *PathPoint) Clone() *PathPoint {
	c := &PathPoint{}
	c.TFromStart = t.TFromStart
	c.X = t.X
	c.Y = t.Y
	c.Yaw = t.Yaw
	c.Vx = t.Vx
	c.Vy = t.Vy
	c.Vyaw = t.Vyaw
	return c
}

func (t *PathPoint) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *PathPoint) SetDefaults() {
	t.TFromStart = 0
	t.X = 0
	t.Y = 0
	t.Yaw = 0
	t.Vx = 0
	t.Vy = 0
	t.Vyaw = 0
}

func (t *PathPoint) GetTypeSupport() humble.MessageTypeSupport {
	return PathPointTypeSupport
}

// PathPointPublisher wraps humble.Publisher to provide type safe helper
// functions
type PathPointPublisher struct {
	*humble.Publisher
}

// NewPathPointPublisher creates and returns a new publisher for the
// PathPoint
func NewPathPointPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*PathPointPublisher, error) {
	pub, err := node.NewPublisher(topicName, PathPointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PathPointPublisher{pub}, nil
}

func (p *PathPointPublisher) Publish(msg *PathPoint) error {
	return p.Publisher.Publish(msg)
}

// PathPointSubscription wraps humble.Subscription to provide type safe helper
// functions
type PathPointSubscription struct {
	*humble.Subscription
}

// PathPointSubscriptionCallback type is used to provide a subscription
// handler function for a PathPointSubscription.
type PathPointSubscriptionCallback func(msg *PathPoint, info *humble.MessageInfo, err error)

// NewPathPointSubscription creates and returns a new subscription for the
// PathPoint
func NewPathPointSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback PathPointSubscriptionCallback) (*PathPointSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg PathPoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, PathPointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PathPointSubscription{sub}, nil
}

func (s *PathPointSubscription) TakeMessage(out *PathPoint) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePathPointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePathPointSlice(dst, src []PathPoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PathPointTypeSupport humble.MessageTypeSupport = _PathPointTypeSupport{}

type _PathPointTypeSupport struct{}

func (t _PathPointTypeSupport) New() humble.Message {
	return NewPathPoint()
}

func (t _PathPointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__PathPoint
	return (unsafe.Pointer)(C.unitree_go__msg__PathPoint__create())
}

func (t _PathPointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__PathPoint__destroy((*C.unitree_go__msg__PathPoint)(pointer_to_free))
}

func (t _PathPointTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*PathPoint)
	mem := (*C.unitree_go__msg__PathPoint)(dst)
	mem.t_from_start = C.float(m.TFromStart)
	mem.x = C.float(m.X)
	mem.y = C.float(m.Y)
	mem.yaw = C.float(m.Yaw)
	mem.vx = C.float(m.Vx)
	mem.vy = C.float(m.Vy)
	mem.vyaw = C.float(m.Vyaw)
}

func (t _PathPointTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PathPoint)
	mem := (*C.unitree_go__msg__PathPoint)(ros2_message_buffer)
	m.TFromStart = float32(mem.t_from_start)
	m.X = float32(mem.x)
	m.Y = float32(mem.y)
	m.Yaw = float32(mem.yaw)
	m.Vx = float32(mem.vx)
	m.Vy = float32(mem.vy)
	m.Vyaw = float32(mem.vyaw)
}

func (t _PathPointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__PathPoint())
}

type CPathPoint = C.unitree_go__msg__PathPoint
type CPathPointSequence = C.unitree_go__msg__PathPoint__Sequence

func PathPointSequenceToGo(goSlice *[]PathPoint, cSlice CPathPointSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PathPoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PathPointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func PathPointSequenceToC(cSlice *CPathPointSequence, goSlice []PathPoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__PathPoint)(C.malloc(C.sizeof_struct_unitree_go__msg__PathPoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PathPointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func PathPointArrayToGo(goSlice []PathPoint, cSlice []CPathPoint) {
	for i := 0; i < len(cSlice); i++ {
		PathPointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func PathPointArrayToC(cSlice []CPathPoint, goSlice []PathPoint) {
	for i := 0; i < len(goSlice); i++ {
		PathPointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

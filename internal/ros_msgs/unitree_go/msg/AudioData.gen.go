// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/audio_data.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/AudioData", AudioDataTypeSupport)
	humble.RegisterMessage("unitree_go/msg/AudioData", AudioDataTypeSupport)
}

type AudioData struct {
	TimeFrame uint64  `yaml:"time_frame"`
	Data      []uint8 `yaml:"data"`
}

// NewAudioData creates a new AudioData with default values.
func NewAudioData() *AudioData {
	self := AudioData{}
	self.SetDefaults()
	return &self
}

func (t *AudioData) Clone() *AudioData {
	c := &AudioData{}
	c.TimeFrame = t.TimeFrame
	if t.Data != nil {
		c.Data = make([]uint8, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *AudioData) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *AudioData) SetDefaults() {
	t.TimeFrame = 0
	t.Data = nil
}

func (t *AudioData) GetTypeSupport() humble.MessageTypeSupport {
	return AudioDataTypeSupport
}

// AudioDataPublisher wraps humble.Publisher to provide type safe helper
// functions
type AudioDataPublisher struct {
	*humble.Publisher
}

// NewAudioDataPublisher creates and returns a new publisher for the
// AudioData
func NewAudioDataPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*AudioDataPublisher, error) {
	pub, err := node.NewPublisher(topicName, AudioDataTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AudioDataPublisher{pub}, nil
}

func (p *AudioDataPublisher) Publish(msg *AudioData) error {
	return p.Publisher.Publish(msg)
}

// AudioDataSubscription wraps humble.Subscription to provide type safe helper
// functions
type AudioDataSubscription struct {
	*humble.Subscription
}

// AudioDataSubscriptionCallback type is used to provide a subscription
// handler function for a AudioDataSubscription.
type AudioDataSubscriptionCallback func(msg *AudioData, info *humble.MessageInfo, err error)

// NewAudioDataSubscription creates and returns a new subscription for the
// AudioData
func NewAudioDataSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback AudioDataSubscriptionCallback) (*AudioDataSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg AudioData
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, AudioDataTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AudioDataSubscription{sub}, nil
}

func (s *AudioDataSubscription) TakeMessage(out *AudioData) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAudioDataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAudioDataSlice(dst, src []AudioData) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AudioDataTypeSupport humble.MessageTypeSupport = _AudioDataTypeSupport{}

type _AudioDataTypeSupport struct{}

func (t _AudioDataTypeSupport) New() humble.Message {
	return NewAudioData()
}

func (t _AudioDataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__AudioData
	return (unsafe.Pointer)(C.unitree_go__msg__AudioData__create())
}

func (t _AudioDataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__AudioData__destroy((*C.unitree_go__msg__AudioData)(pointer_to_free))
}

func (t _AudioDataTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*AudioData)
	mem := (*C.unitree_go__msg__AudioData)(dst)
	mem.time_frame = C.uint64_t(m.TimeFrame)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _AudioDataTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AudioData)
	mem := (*C.unitree_go__msg__AudioData)(ros2_message_buffer)
	m.TimeFrame = uint64(mem.time_frame)
	humble.Uint8SequenceToGo(&m.Data, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _AudioDataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__AudioData())
}

type CAudioData = C.unitree_go__msg__AudioData
type CAudioDataSequence = C.unitree_go__msg__AudioData__Sequence

func AudioDataSequenceToGo(goSlice *[]AudioData, cSlice CAudioDataSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AudioData, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AudioDataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func AudioDataSequenceToC(cSlice *CAudioDataSequence, goSlice []AudioData) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__AudioData)(C.malloc(C.sizeof_struct_unitree_go__msg__AudioData * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AudioDataTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func AudioDataArrayToGo(goSlice []AudioData, cSlice []CAudioData) {
	for i := 0; i < len(cSlice); i++ {
		AudioDataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func AudioDataArrayToC(cSlice []CAudioData, goSlice []AudioData) {
	for i := 0; i < len(goSlice); i++ {
		AudioDataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

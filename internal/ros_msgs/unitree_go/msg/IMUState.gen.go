// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/imu_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/IMUState", IMUStateTypeSupport)
	humble.RegisterMessage("unitree_go/msg/IMUState", IMUStateTypeSupport)
}

type IMUState struct {
	Quaternion    [4]float32 `yaml:"quaternion"`
	Gyroscope     [3]float32 `yaml:"gyroscope"`
	Accelerometer [3]float32 `yaml:"accelerometer"`
	Rpy           [3]float32 `yaml:"rpy"`
	Temperature   int8       `yaml:"temperature"`
}

// NewIMUState creates a new IMUState with default values.
func NewIMUState() *IMUState {
	self := IMUState{}
	self.SetDefaults()
	return &self
}

func (t *IMUState) Clone() *IMUState {
	c := &IMUState{}
	c.Quaternion = t.Quaternion
	c.Gyroscope = t.Gyroscope
	c.Accelerometer = t.Accelerometer
	c.Rpy = t.Rpy
	c.Temperature = t.Temperature
	return c
}

func (t *IMUState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *IMUState) SetDefaults() {
	t.Quaternion = [4]float32{}
	t.Gyroscope = [3]float32{}
	t.Accelerometer = [3]float32{}
	t.Rpy = [3]float32{}
	t.Temperature = 0
}

func (t *IMUState) GetTypeSupport() humble.MessageTypeSupport {
	return IMUStateTypeSupport
}

// IMUStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type IMUStatePublisher struct {
	*humble.Publisher
}

// NewIMUStatePublisher creates and returns a new publisher for the
// IMUState
func NewIMUStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*IMUStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, IMUStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &IMUStatePublisher{pub}, nil
}

func (p *IMUStatePublisher) Publish(msg *IMUState) error {
	return p.Publisher.Publish(msg)
}

// IMUStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type IMUStateSubscription struct {
	*humble.Subscription
}

// IMUStateSubscriptionCallback type is used to provide a subscription
// handler function for a IMUStateSubscription.
type IMUStateSubscriptionCallback func(msg *IMUState, info *humble.MessageInfo, err error)

// NewIMUStateSubscription creates and returns a new subscription for the
// IMUState
func NewIMUStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback IMUStateSubscriptionCallback) (*IMUStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg IMUState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, IMUStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &IMUStateSubscription{sub}, nil
}

func (s *IMUStateSubscription) TakeMessage(out *IMUState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneIMUStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneIMUStateSlice(dst, src []IMUState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var IMUStateTypeSupport humble.MessageTypeSupport = _IMUStateTypeSupport{}

type _IMUStateTypeSupport struct{}

func (t _IMUStateTypeSupport) New() humble.Message {
	return NewIMUState()
}

func (t _IMUStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__IMUState
	return (unsafe.Pointer)(C.unitree_go__msg__IMUState__create())
}

func (t _IMUStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__IMUState__destroy((*C.unitree_go__msg__IMUState)(pointer_to_free))
}

func (t _IMUStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*IMUState)
	mem := (*C.unitree_go__msg__IMUState)(dst)
	cSlice_quaternion := mem.quaternion[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_quaternion)), m.Quaternion[:])
	cSlice_gyroscope := mem.gyroscope[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_gyroscope)), m.Gyroscope[:])
	cSlice_accelerometer := mem.accelerometer[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_accelerometer)), m.Accelerometer[:])
	cSlice_rpy := mem.rpy[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_rpy)), m.Rpy[:])
	mem.temperature = C.int8_t(m.Temperature)
}

func (t _IMUStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*IMUState)
	mem := (*C.unitree_go__msg__IMUState)(ros2_message_buffer)
	cSlice_quaternion := mem.quaternion[:]
	humble.Float32ArrayToGo(m.Quaternion[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_quaternion)))
	cSlice_gyroscope := mem.gyroscope[:]
	humble.Float32ArrayToGo(m.Gyroscope[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_gyroscope)))
	cSlice_accelerometer := mem.accelerometer[:]
	humble.Float32ArrayToGo(m.Accelerometer[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_accelerometer)))
	cSlice_rpy := mem.rpy[:]
	humble.Float32ArrayToGo(m.Rpy[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_rpy)))
	m.Temperature = int8(mem.temperature)
}

func (t _IMUStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__IMUState())
}

type CIMUState = C.unitree_go__msg__IMUState
type CIMUStateSequence = C.unitree_go__msg__IMUState__Sequence

func IMUStateSequenceToGo(goSlice *[]IMUState, cSlice CIMUStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]IMUState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		IMUStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func IMUStateSequenceToC(cSlice *CIMUStateSequence, goSlice []IMUState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__IMUState)(C.malloc(C.sizeof_struct_unitree_go__msg__IMUState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		IMUStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func IMUStateArrayToGo(goSlice []IMUState, cSlice []CIMUState) {
	for i := 0; i < len(cSlice); i++ {
		IMUStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func IMUStateArrayToC(cSlice []CIMUState, goSlice []IMUState) {
	for i := 0; i < len(goSlice); i++ {
		IMUStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

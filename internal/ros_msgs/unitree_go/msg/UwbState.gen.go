// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/uwb_state.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/UwbState", UwbStateTypeSupport)
	humble.RegisterMessage("unitree_go/msg/UwbState", UwbStateTypeSupport)
}

type UwbState struct {
	Version        [2]uint8   `yaml:"version"`
	Channel        uint8      `yaml:"channel"`
	JoyMode        uint8      `yaml:"joy_mode"`
	OrientationEst float32    `yaml:"orientation_est"`
	PitchEst       float32    `yaml:"pitch_est"`
	DistanceEst    float32    `yaml:"distance_est"`
	YawEst         float32    `yaml:"yaw_est"`
	TagRoll        float32    `yaml:"tag_roll"`
	TagPitch       float32    `yaml:"tag_pitch"`
	TagYaw         float32    `yaml:"tag_yaw"`
	BaseRoll       float32    `yaml:"base_roll"`
	BasePitch      float32    `yaml:"base_pitch"`
	BaseYaw        float32    `yaml:"base_yaw"`
	Joystick       [2]float32 `yaml:"joystick"`
	ErrorState     uint8      `yaml:"error_state"`
	Buttons        uint8      `yaml:"buttons"`
	EnabledFromApp uint8      `yaml:"enabled_from_app"`
}

// NewUwbState creates a new UwbState with default values.
func NewUwbState() *UwbState {
	self := UwbState{}
	self.SetDefaults()
	return &self
}

func (t *UwbState) Clone() *UwbState {
	c := &UwbState{}
	c.Version = t.Version
	c.Channel = t.Channel
	c.JoyMode = t.JoyMode
	c.OrientationEst = t.OrientationEst
	c.PitchEst = t.PitchEst
	c.DistanceEst = t.DistanceEst
	c.YawEst = t.YawEst
	c.TagRoll = t.TagRoll
	c.TagPitch = t.TagPitch
	c.TagYaw = t.TagYaw
	c.BaseRoll = t.BaseRoll
	c.BasePitch = t.BasePitch
	c.BaseYaw = t.BaseYaw
	c.Joystick = t.Joystick
	c.ErrorState = t.ErrorState
	c.Buttons = t.Buttons
	c.EnabledFromApp = t.EnabledFromApp
	return c
}

func (t *UwbState) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *UwbState) SetDefaults() {
	t.Version = [2]uint8{}
	t.Channel = 0
	t.JoyMode = 0
	t.OrientationEst = 0
	t.PitchEst = 0
	t.DistanceEst = 0
	t.YawEst = 0
	t.TagRoll = 0
	t.TagPitch = 0
	t.TagYaw = 0
	t.BaseRoll = 0
	t.BasePitch = 0
	t.BaseYaw = 0
	t.Joystick = [2]float32{}
	t.ErrorState = 0
	t.Buttons = 0
	t.EnabledFromApp = 0
}

func (t *UwbState) GetTypeSupport() humble.MessageTypeSupport {
	return UwbStateTypeSupport
}

// UwbStatePublisher wraps humble.Publisher to provide type safe helper
// functions
type UwbStatePublisher struct {
	*humble.Publisher
}

// NewUwbStatePublisher creates and returns a new publisher for the
// UwbState
func NewUwbStatePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*UwbStatePublisher, error) {
	pub, err := node.NewPublisher(topicName, UwbStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UwbStatePublisher{pub}, nil
}

func (p *UwbStatePublisher) Publish(msg *UwbState) error {
	return p.Publisher.Publish(msg)
}

// UwbStateSubscription wraps humble.Subscription to provide type safe helper
// functions
type UwbStateSubscription struct {
	*humble.Subscription
}

// UwbStateSubscriptionCallback type is used to provide a subscription
// handler function for a UwbStateSubscription.
type UwbStateSubscriptionCallback func(msg *UwbState, info *humble.MessageInfo, err error)

// NewUwbStateSubscription creates and returns a new subscription for the
// UwbState
func NewUwbStateSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback UwbStateSubscriptionCallback) (*UwbStateSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg UwbState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, UwbStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &UwbStateSubscription{sub}, nil
}

func (s *UwbStateSubscription) TakeMessage(out *UwbState) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneUwbStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUwbStateSlice(dst, src []UwbState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UwbStateTypeSupport humble.MessageTypeSupport = _UwbStateTypeSupport{}

type _UwbStateTypeSupport struct{}

func (t _UwbStateTypeSupport) New() humble.Message {
	return NewUwbState()
}

func (t _UwbStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__UwbState
	return (unsafe.Pointer)(C.unitree_go__msg__UwbState__create())
}

func (t _UwbStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__UwbState__destroy((*C.unitree_go__msg__UwbState)(pointer_to_free))
}

func (t _UwbStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*UwbState)
	mem := (*C.unitree_go__msg__UwbState)(dst)
	cSlice_version := mem.version[:]
	humble.Uint8ArrayToC(*(*[]humble.CUint8)(unsafe.Pointer(&cSlice_version)), m.Version[:])
	mem.channel = C.uint8_t(m.Channel)
	mem.joy_mode = C.uint8_t(m.JoyMode)
	mem.orientation_est = C.float(m.OrientationEst)
	mem.pitch_est = C.float(m.PitchEst)
	mem.distance_est = C.float(m.DistanceEst)
	mem.yaw_est = C.float(m.YawEst)
	mem.tag_roll = C.float(m.TagRoll)
	mem.tag_pitch = C.float(m.TagPitch)
	mem.tag_yaw = C.float(m.TagYaw)
	mem.base_roll = C.float(m.BaseRoll)
	mem.base_pitch = C.float(m.BasePitch)
	mem.base_yaw = C.float(m.BaseYaw)
	cSlice_joystick := mem.joystick[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_joystick)), m.Joystick[:])
	mem.error_state = C.uint8_t(m.ErrorState)
	mem.buttons = C.uint8_t(m.Buttons)
	mem.enabled_from_app = C.uint8_t(m.EnabledFromApp)
}

func (t _UwbStateTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UwbState)
	mem := (*C.unitree_go__msg__UwbState)(ros2_message_buffer)
	cSlice_version := mem.version[:]
	humble.Uint8ArrayToGo(m.Version[:], *(*[]humble.CUint8)(unsafe.Pointer(&cSlice_version)))
	m.Channel = uint8(mem.channel)
	m.JoyMode = uint8(mem.joy_mode)
	m.OrientationEst = float32(mem.orientation_est)
	m.PitchEst = float32(mem.pitch_est)
	m.DistanceEst = float32(mem.distance_est)
	m.YawEst = float32(mem.yaw_est)
	m.TagRoll = float32(mem.tag_roll)
	m.TagPitch = float32(mem.tag_pitch)
	m.TagYaw = float32(mem.tag_yaw)
	m.BaseRoll = float32(mem.base_roll)
	m.BasePitch = float32(mem.base_pitch)
	m.BaseYaw = float32(mem.base_yaw)
	cSlice_joystick := mem.joystick[:]
	humble.Float32ArrayToGo(m.Joystick[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_joystick)))
	m.ErrorState = uint8(mem.error_state)
	m.Buttons = uint8(mem.buttons)
	m.EnabledFromApp = uint8(mem.enabled_from_app)
}

func (t _UwbStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__UwbState())
}

type CUwbState = C.unitree_go__msg__UwbState
type CUwbStateSequence = C.unitree_go__msg__UwbState__Sequence

func UwbStateSequenceToGo(goSlice *[]UwbState, cSlice CUwbStateSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UwbState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		UwbStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func UwbStateSequenceToC(cSlice *CUwbStateSequence, goSlice []UwbState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__UwbState)(C.malloc(C.sizeof_struct_unitree_go__msg__UwbState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		UwbStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func UwbStateArrayToGo(goSlice []UwbState, cSlice []CUwbState) {
	for i := 0; i < len(cSlice); i++ {
		UwbStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func UwbStateArrayToC(cSlice []CUwbState, goSlice []UwbState) {
	for i := 0; i < len(goSlice); i++ {
		UwbStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

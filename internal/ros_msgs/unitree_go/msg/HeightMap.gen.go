// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/height_map.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/HeightMap", HeightMapTypeSupport)
	humble.RegisterMessage("unitree_go/msg/HeightMap", HeightMapTypeSupport)
}

type HeightMap struct {
	Stamp      float64    `yaml:"stamp"`      // timestamp. Header
	FrameId    string     `yaml:"frame_id"`   // world frame id
	Resolution float32    `yaml:"resolution"` // The map resolution [m/cell]. Map info
	Width      uint32     `yaml:"width"`      // Map width along x-axis [cells]
	Height     uint32     `yaml:"height"`     // Map height alonge y-axis [cells]
	Origin     [2]float32 `yaml:"origin"`     // Map frame origin xy-position [m], the xyz-axis direction of map frame is aligned with the world frame
	Data       []float32  `yaml:"data"`       // Map data, in x-major order, starting with [0,0], ending with [width, height]For a cell whose 2d-array-index is [ix, iy]ï¼Œits position in world frame is: [ix * resolution + origin[0], iy * resolution + origin[1]]its cell value is: data[width * iy + ix]
}

// NewHeightMap creates a new HeightMap with default values.
func NewHeightMap() *HeightMap {
	self := HeightMap{}
	self.SetDefaults()
	return &self
}

func (t *HeightMap) Clone() *HeightMap {
	c := &HeightMap{}
	c.Stamp = t.Stamp
	c.FrameId = t.FrameId
	c.Resolution = t.Resolution
	c.Width = t.Width
	c.Height = t.Height
	c.Origin = t.Origin
	if t.Data != nil {
		c.Data = make([]float32, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *HeightMap) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *HeightMap) SetDefaults() {
	t.Stamp = 0
	t.FrameId = ""
	t.Resolution = 0
	t.Width = 0
	t.Height = 0
	t.Origin = [2]float32{}
	t.Data = nil
}

func (t *HeightMap) GetTypeSupport() humble.MessageTypeSupport {
	return HeightMapTypeSupport
}

// HeightMapPublisher wraps humble.Publisher to provide type safe helper
// functions
type HeightMapPublisher struct {
	*humble.Publisher
}

// NewHeightMapPublisher creates and returns a new publisher for the
// HeightMap
func NewHeightMapPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*HeightMapPublisher, error) {
	pub, err := node.NewPublisher(topicName, HeightMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HeightMapPublisher{pub}, nil
}

func (p *HeightMapPublisher) Publish(msg *HeightMap) error {
	return p.Publisher.Publish(msg)
}

// HeightMapSubscription wraps humble.Subscription to provide type safe helper
// functions
type HeightMapSubscription struct {
	*humble.Subscription
}

// HeightMapSubscriptionCallback type is used to provide a subscription
// handler function for a HeightMapSubscription.
type HeightMapSubscriptionCallback func(msg *HeightMap, info *humble.MessageInfo, err error)

// NewHeightMapSubscription creates and returns a new subscription for the
// HeightMap
func NewHeightMapSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback HeightMapSubscriptionCallback) (*HeightMapSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg HeightMap
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, HeightMapTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HeightMapSubscription{sub}, nil
}

func (s *HeightMapSubscription) TakeMessage(out *HeightMap) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHeightMapSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHeightMapSlice(dst, src []HeightMap) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HeightMapTypeSupport humble.MessageTypeSupport = _HeightMapTypeSupport{}

type _HeightMapTypeSupport struct{}

func (t _HeightMapTypeSupport) New() humble.Message {
	return NewHeightMap()
}

func (t _HeightMapTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__HeightMap
	return (unsafe.Pointer)(C.unitree_go__msg__HeightMap__create())
}

func (t _HeightMapTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__HeightMap__destroy((*C.unitree_go__msg__HeightMap)(pointer_to_free))
}

func (t _HeightMapTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*HeightMap)
	mem := (*C.unitree_go__msg__HeightMap)(dst)
	mem.stamp = C.double(m.Stamp)
	humble.StringAsCStruct(unsafe.Pointer(&mem.frame_id), m.FrameId)
	mem.resolution = C.float(m.Resolution)
	mem.width = C.uint32_t(m.Width)
	mem.height = C.uint32_t(m.Height)
	cSlice_origin := mem.origin[:]
	humble.Float32ArrayToC(*(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_origin)), m.Origin[:])
	humble.Float32SequenceToC((*humble.CFloat32Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _HeightMapTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HeightMap)
	mem := (*C.unitree_go__msg__HeightMap)(ros2_message_buffer)
	m.Stamp = float64(mem.stamp)
	humble.StringAsGoStruct(&m.FrameId, unsafe.Pointer(&mem.frame_id))
	m.Resolution = float32(mem.resolution)
	m.Width = uint32(mem.width)
	m.Height = uint32(mem.height)
	cSlice_origin := mem.origin[:]
	humble.Float32ArrayToGo(m.Origin[:], *(*[]humble.CFloat32)(unsafe.Pointer(&cSlice_origin)))
	humble.Float32SequenceToGo(&m.Data, *(*humble.CFloat32Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _HeightMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__HeightMap())
}

type CHeightMap = C.unitree_go__msg__HeightMap
type CHeightMapSequence = C.unitree_go__msg__HeightMap__Sequence

func HeightMapSequenceToGo(goSlice *[]HeightMap, cSlice CHeightMapSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HeightMap, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HeightMapTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func HeightMapSequenceToC(cSlice *CHeightMapSequence, goSlice []HeightMap) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__HeightMap)(C.malloc(C.sizeof_struct_unitree_go__msg__HeightMap * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HeightMapTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func HeightMapArrayToGo(goSlice []HeightMap, cSlice []CHeightMap) {
	for i := 0; i < len(cSlice); i++ {
		HeightMapTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func HeightMapArrayToC(cSlice []CHeightMap, goSlice []HeightMap) {
	for i := 0; i < len(goSlice); i++ {
		HeightMapTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package unitree_go_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_go/msg/req.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_go/Req", ReqTypeSupport)
	humble.RegisterMessage("unitree_go/msg/Req", ReqTypeSupport)
}

type Req struct {
	Uuid string `yaml:"uuid"`
	Body string `yaml:"body"`
}

// NewReq creates a new Req with default values.
func NewReq() *Req {
	self := Req{}
	self.SetDefaults()
	return &self
}

func (t *Req) Clone() *Req {
	c := &Req{}
	c.Uuid = t.Uuid
	c.Body = t.Body
	return c
}

func (t *Req) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Req) SetDefaults() {
	t.Uuid = ""
	t.Body = ""
}

func (t *Req) GetTypeSupport() humble.MessageTypeSupport {
	return ReqTypeSupport
}

// ReqPublisher wraps humble.Publisher to provide type safe helper
// functions
type ReqPublisher struct {
	*humble.Publisher
}

// NewReqPublisher creates and returns a new publisher for the
// Req
func NewReqPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ReqPublisher, error) {
	pub, err := node.NewPublisher(topicName, ReqTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ReqPublisher{pub}, nil
}

func (p *ReqPublisher) Publish(msg *Req) error {
	return p.Publisher.Publish(msg)
}

// ReqSubscription wraps humble.Subscription to provide type safe helper
// functions
type ReqSubscription struct {
	*humble.Subscription
}

// ReqSubscriptionCallback type is used to provide a subscription
// handler function for a ReqSubscription.
type ReqSubscriptionCallback func(msg *Req, info *humble.MessageInfo, err error)

// NewReqSubscription creates and returns a new subscription for the
// Req
func NewReqSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ReqSubscriptionCallback) (*ReqSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Req
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ReqTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ReqSubscription{sub}, nil
}

func (s *ReqSubscription) TakeMessage(out *Req) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneReqSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneReqSlice(dst, src []Req) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ReqTypeSupport humble.MessageTypeSupport = _ReqTypeSupport{}

type _ReqTypeSupport struct{}

func (t _ReqTypeSupport) New() humble.Message {
	return NewReq()
}

func (t _ReqTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_go__msg__Req
	return (unsafe.Pointer)(C.unitree_go__msg__Req__create())
}

func (t _ReqTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_go__msg__Req__destroy((*C.unitree_go__msg__Req)(pointer_to_free))
}

func (t _ReqTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Req)
	mem := (*C.unitree_go__msg__Req)(dst)
	humble.StringAsCStruct(unsafe.Pointer(&mem.uuid), m.Uuid)
	humble.StringAsCStruct(unsafe.Pointer(&mem.body), m.Body)
}

func (t _ReqTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Req)
	mem := (*C.unitree_go__msg__Req)(ros2_message_buffer)
	humble.StringAsGoStruct(&m.Uuid, unsafe.Pointer(&mem.uuid))
	humble.StringAsGoStruct(&m.Body, unsafe.Pointer(&mem.body))
}

func (t _ReqTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_go__msg__Req())
}

type CReq = C.unitree_go__msg__Req
type CReqSequence = C.unitree_go__msg__Req__Sequence

func ReqSequenceToGo(goSlice *[]Req, cSlice CReqSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Req, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ReqTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ReqSequenceToC(cSlice *CReqSequence, goSlice []Req) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_go__msg__Req)(C.malloc(C.sizeof_struct_unitree_go__msg__Req * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ReqTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ReqArrayToGo(goSlice []Req, cSlice []CReq) {
	for i := 0; i < len(cSlice); i++ {
		ReqTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ReqArrayToC(cSlice []CReq, goSlice []Req) {
	for i := 0; i < len(goSlice); i++ {
		ReqTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

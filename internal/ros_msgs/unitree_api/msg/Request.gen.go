// Code generated by ros2gen. DO NOT EDIT.

package unitree_api_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_api/msg/request.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_api/Request", RequestTypeSupport)
	humble.RegisterMessage("unitree_api/msg/Request", RequestTypeSupport)
}

type Request struct {
	Header    RequestHeader `yaml:"header"`
	Parameter string        `yaml:"parameter"`
	Binary    []uint8       `yaml:"binary"`
}

// NewRequest creates a new Request with default values.
func NewRequest() *Request {
	self := Request{}
	self.SetDefaults()
	return &self
}

func (t *Request) Clone() *Request {
	c := &Request{}
	c.Header = *t.Header.Clone()
	c.Parameter = t.Parameter
	if t.Binary != nil {
		c.Binary = make([]uint8, len(t.Binary))
		copy(c.Binary, t.Binary)
	}
	return c
}

func (t *Request) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Request) SetDefaults() {
	t.Header.SetDefaults()
	t.Parameter = ""
	t.Binary = nil
}

func (t *Request) GetTypeSupport() humble.MessageTypeSupport {
	return RequestTypeSupport
}

// RequestPublisher wraps humble.Publisher to provide type safe helper
// functions
type RequestPublisher struct {
	*humble.Publisher
}

// NewRequestPublisher creates and returns a new publisher for the
// Request
func NewRequestPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*RequestPublisher, error) {
	pub, err := node.NewPublisher(topicName, RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RequestPublisher{pub}, nil
}

func (p *RequestPublisher) Publish(msg *Request) error {
	return p.Publisher.Publish(msg)
}

// RequestSubscription wraps humble.Subscription to provide type safe helper
// functions
type RequestSubscription struct {
	*humble.Subscription
}

// RequestSubscriptionCallback type is used to provide a subscription
// handler function for a RequestSubscription.
type RequestSubscriptionCallback func(msg *Request, info *humble.MessageInfo, err error)

// NewRequestSubscription creates and returns a new subscription for the
// Request
func NewRequestSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback RequestSubscriptionCallback) (*RequestSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RequestSubscription{sub}, nil
}

func (s *RequestSubscription) TakeMessage(out *Request) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRequestSlice(dst, src []Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RequestTypeSupport humble.MessageTypeSupport = _RequestTypeSupport{}

type _RequestTypeSupport struct{}

func (t _RequestTypeSupport) New() humble.Message {
	return NewRequest()
}

func (t _RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_api__msg__Request
	return (unsafe.Pointer)(C.unitree_api__msg__Request__create())
}

func (t _RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_api__msg__Request__destroy((*C.unitree_api__msg__Request)(pointer_to_free))
}

func (t _RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Request)
	mem := (*C.unitree_api__msg__Request)(dst)
	RequestHeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	humble.StringAsCStruct(unsafe.Pointer(&mem.parameter), m.Parameter)
	humble.Uint8SequenceToC((*humble.CUint8Sequence)(unsafe.Pointer(&mem.binary)), m.Binary)
}

func (t _RequestTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Request)
	mem := (*C.unitree_api__msg__Request)(ros2_message_buffer)
	RequestHeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	humble.StringAsGoStruct(&m.Parameter, unsafe.Pointer(&mem.parameter))
	humble.Uint8SequenceToGo(&m.Binary, *(*humble.CUint8Sequence)(unsafe.Pointer(&mem.binary)))
}

func (t _RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_api__msg__Request())
}

type CRequest = C.unitree_api__msg__Request
type CRequestSequence = C.unitree_api__msg__Request__Sequence

func RequestSequenceToGo(goSlice *[]Request, cSlice CRequestSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func RequestSequenceToC(cSlice *CRequestSequence, goSlice []Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_api__msg__Request)(C.malloc(C.sizeof_struct_unitree_api__msg__Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func RequestArrayToGo(goSlice []Request, cSlice []CRequest) {
	for i := 0; i < len(cSlice); i++ {
		RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func RequestArrayToC(cSlice []CRequest, goSlice []Request) {
	for i := 0; i < len(goSlice); i++ {
		RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

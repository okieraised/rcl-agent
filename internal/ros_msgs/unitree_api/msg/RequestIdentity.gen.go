// Code generated by ros2gen. DO NOT EDIT.

package unitree_api_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_api/msg/request_identity.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_api/RequestIdentity", RequestIdentityTypeSupport)
	humble.RegisterMessage("unitree_api/msg/RequestIdentity", RequestIdentityTypeSupport)
}

type RequestIdentity struct {
	Id    int64 `yaml:"id"`
	ApiId int64 `yaml:"api_id"`
}

// NewRequestIdentity creates a new RequestIdentity with default values.
func NewRequestIdentity() *RequestIdentity {
	self := RequestIdentity{}
	self.SetDefaults()
	return &self
}

func (t *RequestIdentity) Clone() *RequestIdentity {
	c := &RequestIdentity{}
	c.Id = t.Id
	c.ApiId = t.ApiId
	return c
}

func (t *RequestIdentity) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *RequestIdentity) SetDefaults() {
	t.Id = 0
	t.ApiId = 0
}

func (t *RequestIdentity) GetTypeSupport() humble.MessageTypeSupport {
	return RequestIdentityTypeSupport
}

// RequestIdentityPublisher wraps humble.Publisher to provide type safe helper
// functions
type RequestIdentityPublisher struct {
	*humble.Publisher
}

// NewRequestIdentityPublisher creates and returns a new publisher for the
// RequestIdentity
func NewRequestIdentityPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*RequestIdentityPublisher, error) {
	pub, err := node.NewPublisher(topicName, RequestIdentityTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RequestIdentityPublisher{pub}, nil
}

func (p *RequestIdentityPublisher) Publish(msg *RequestIdentity) error {
	return p.Publisher.Publish(msg)
}

// RequestIdentitySubscription wraps humble.Subscription to provide type safe helper
// functions
type RequestIdentitySubscription struct {
	*humble.Subscription
}

// RequestIdentitySubscriptionCallback type is used to provide a subscription
// handler function for a RequestIdentitySubscription.
type RequestIdentitySubscriptionCallback func(msg *RequestIdentity, info *humble.MessageInfo, err error)

// NewRequestIdentitySubscription creates and returns a new subscription for the
// RequestIdentity
func NewRequestIdentitySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback RequestIdentitySubscriptionCallback) (*RequestIdentitySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg RequestIdentity
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, RequestIdentityTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RequestIdentitySubscription{sub}, nil
}

func (s *RequestIdentitySubscription) TakeMessage(out *RequestIdentity) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRequestIdentitySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRequestIdentitySlice(dst, src []RequestIdentity) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RequestIdentityTypeSupport humble.MessageTypeSupport = _RequestIdentityTypeSupport{}

type _RequestIdentityTypeSupport struct{}

func (t _RequestIdentityTypeSupport) New() humble.Message {
	return NewRequestIdentity()
}

func (t _RequestIdentityTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_api__msg__RequestIdentity
	return (unsafe.Pointer)(C.unitree_api__msg__RequestIdentity__create())
}

func (t _RequestIdentityTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_api__msg__RequestIdentity__destroy((*C.unitree_api__msg__RequestIdentity)(pointer_to_free))
}

func (t _RequestIdentityTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*RequestIdentity)
	mem := (*C.unitree_api__msg__RequestIdentity)(dst)
	mem.id = C.int64_t(m.Id)
	mem.api_id = C.int64_t(m.ApiId)
}

func (t _RequestIdentityTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RequestIdentity)
	mem := (*C.unitree_api__msg__RequestIdentity)(ros2_message_buffer)
	m.Id = int64(mem.id)
	m.ApiId = int64(mem.api_id)
}

func (t _RequestIdentityTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_api__msg__RequestIdentity())
}

type CRequestIdentity = C.unitree_api__msg__RequestIdentity
type CRequestIdentitySequence = C.unitree_api__msg__RequestIdentity__Sequence

func RequestIdentitySequenceToGo(goSlice *[]RequestIdentity, cSlice CRequestIdentitySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RequestIdentity, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RequestIdentityTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func RequestIdentitySequenceToC(cSlice *CRequestIdentitySequence, goSlice []RequestIdentity) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_api__msg__RequestIdentity)(C.malloc(C.sizeof_struct_unitree_api__msg__RequestIdentity * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RequestIdentityTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func RequestIdentityArrayToGo(goSlice []RequestIdentity, cSlice []CRequestIdentity) {
	for i := 0; i < len(cSlice); i++ {
		RequestIdentityTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func RequestIdentityArrayToC(cSlice []CRequestIdentity, goSlice []RequestIdentity) {
	for i := 0; i < len(goSlice); i++ {
		RequestIdentityTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package unitree_api_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_api/msg/response.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_api/Response", ResponseTypeSupport)
	humble.RegisterMessage("unitree_api/msg/Response", ResponseTypeSupport)
}

type Response struct {
	Header ResponseHeader `yaml:"header"`
	Data   string         `yaml:"data"`
	Binary []int8         `yaml:"binary"`
}

// NewResponse creates a new Response with default values.
func NewResponse() *Response {
	self := Response{}
	self.SetDefaults()
	return &self
}

func (t *Response) Clone() *Response {
	c := &Response{}
	c.Header = *t.Header.Clone()
	c.Data = t.Data
	if t.Binary != nil {
		c.Binary = make([]int8, len(t.Binary))
		copy(c.Binary, t.Binary)
	}
	return c
}

func (t *Response) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *Response) SetDefaults() {
	t.Header.SetDefaults()
	t.Data = ""
	t.Binary = nil
}

func (t *Response) GetTypeSupport() humble.MessageTypeSupport {
	return ResponseTypeSupport
}

// ResponsePublisher wraps humble.Publisher to provide type safe helper
// functions
type ResponsePublisher struct {
	*humble.Publisher
}

// NewResponsePublisher creates and returns a new publisher for the
// Response
func NewResponsePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ResponsePublisher, error) {
	pub, err := node.NewPublisher(topicName, ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ResponsePublisher{pub}, nil
}

func (p *ResponsePublisher) Publish(msg *Response) error {
	return p.Publisher.Publish(msg)
}

// ResponseSubscription wraps humble.Subscription to provide type safe helper
// functions
type ResponseSubscription struct {
	*humble.Subscription
}

// ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a ResponseSubscription.
type ResponseSubscriptionCallback func(msg *Response, info *humble.MessageInfo, err error)

// NewResponseSubscription creates and returns a new subscription for the
// Response
func NewResponseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ResponseSubscriptionCallback) (*ResponseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ResponseSubscription{sub}, nil
}

func (s *ResponseSubscription) TakeMessage(out *Response) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneResponseSlice(dst, src []Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ResponseTypeSupport humble.MessageTypeSupport = _ResponseTypeSupport{}

type _ResponseTypeSupport struct{}

func (t _ResponseTypeSupport) New() humble.Message {
	return NewResponse()
}

func (t _ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_api__msg__Response
	return (unsafe.Pointer)(C.unitree_api__msg__Response__create())
}

func (t _ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_api__msg__Response__destroy((*C.unitree_api__msg__Response)(pointer_to_free))
}

func (t _ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*Response)
	mem := (*C.unitree_api__msg__Response)(dst)
	ResponseHeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	humble.StringAsCStruct(unsafe.Pointer(&mem.data), m.Data)
	humble.Int8SequenceToC((*humble.CInt8Sequence)(unsafe.Pointer(&mem.binary)), m.Binary)
}

func (t _ResponseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Response)
	mem := (*C.unitree_api__msg__Response)(ros2_message_buffer)
	ResponseHeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	humble.StringAsGoStruct(&m.Data, unsafe.Pointer(&mem.data))
	humble.Int8SequenceToGo(&m.Binary, *(*humble.CInt8Sequence)(unsafe.Pointer(&mem.binary)))
}

func (t _ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_api__msg__Response())
}

type CResponse = C.unitree_api__msg__Response
type CResponseSequence = C.unitree_api__msg__Response__Sequence

func ResponseSequenceToGo(goSlice *[]Response, cSlice CResponseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ResponseSequenceToC(cSlice *CResponseSequence, goSlice []Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_api__msg__Response)(C.malloc(C.sizeof_struct_unitree_api__msg__Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ResponseArrayToGo(goSlice []Response, cSlice []CResponse) {
	for i := 0; i < len(cSlice); i++ {
		ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ResponseArrayToC(cSlice []CResponse, goSlice []Response) {
	for i := 0; i < len(goSlice); i++ {
		ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package unitree_api_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_api/msg/request_header.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_api/RequestHeader", RequestHeaderTypeSupport)
	humble.RegisterMessage("unitree_api/msg/RequestHeader", RequestHeaderTypeSupport)
}

type RequestHeader struct {
	Identity RequestIdentity `yaml:"identity"`
	Lease    RequestLease    `yaml:"lease"`
	Policy   RequestPolicy   `yaml:"policy"`
}

// NewRequestHeader creates a new RequestHeader with default values.
func NewRequestHeader() *RequestHeader {
	self := RequestHeader{}
	self.SetDefaults()
	return &self
}

func (t *RequestHeader) Clone() *RequestHeader {
	c := &RequestHeader{}
	c.Identity = *t.Identity.Clone()
	c.Lease = *t.Lease.Clone()
	c.Policy = *t.Policy.Clone()
	return c
}

func (t *RequestHeader) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *RequestHeader) SetDefaults() {
	t.Identity.SetDefaults()
	t.Lease.SetDefaults()
	t.Policy.SetDefaults()
}

func (t *RequestHeader) GetTypeSupport() humble.MessageTypeSupport {
	return RequestHeaderTypeSupport
}

// RequestHeaderPublisher wraps humble.Publisher to provide type safe helper
// functions
type RequestHeaderPublisher struct {
	*humble.Publisher
}

// NewRequestHeaderPublisher creates and returns a new publisher for the
// RequestHeader
func NewRequestHeaderPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*RequestHeaderPublisher, error) {
	pub, err := node.NewPublisher(topicName, RequestHeaderTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RequestHeaderPublisher{pub}, nil
}

func (p *RequestHeaderPublisher) Publish(msg *RequestHeader) error {
	return p.Publisher.Publish(msg)
}

// RequestHeaderSubscription wraps humble.Subscription to provide type safe helper
// functions
type RequestHeaderSubscription struct {
	*humble.Subscription
}

// RequestHeaderSubscriptionCallback type is used to provide a subscription
// handler function for a RequestHeaderSubscription.
type RequestHeaderSubscriptionCallback func(msg *RequestHeader, info *humble.MessageInfo, err error)

// NewRequestHeaderSubscription creates and returns a new subscription for the
// RequestHeader
func NewRequestHeaderSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback RequestHeaderSubscriptionCallback) (*RequestHeaderSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg RequestHeader
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, RequestHeaderTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RequestHeaderSubscription{sub}, nil
}

func (s *RequestHeaderSubscription) TakeMessage(out *RequestHeader) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRequestHeaderSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRequestHeaderSlice(dst, src []RequestHeader) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RequestHeaderTypeSupport humble.MessageTypeSupport = _RequestHeaderTypeSupport{}

type _RequestHeaderTypeSupport struct{}

func (t _RequestHeaderTypeSupport) New() humble.Message {
	return NewRequestHeader()
}

func (t _RequestHeaderTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_api__msg__RequestHeader
	return (unsafe.Pointer)(C.unitree_api__msg__RequestHeader__create())
}

func (t _RequestHeaderTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_api__msg__RequestHeader__destroy((*C.unitree_api__msg__RequestHeader)(pointer_to_free))
}

func (t _RequestHeaderTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*RequestHeader)
	mem := (*C.unitree_api__msg__RequestHeader)(dst)
	RequestIdentityTypeSupport.AsCStruct(unsafe.Pointer(&mem.identity), &m.Identity)
	RequestLeaseTypeSupport.AsCStruct(unsafe.Pointer(&mem.lease), &m.Lease)
	RequestPolicyTypeSupport.AsCStruct(unsafe.Pointer(&mem.policy), &m.Policy)
}

func (t _RequestHeaderTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RequestHeader)
	mem := (*C.unitree_api__msg__RequestHeader)(ros2_message_buffer)
	RequestIdentityTypeSupport.AsGoStruct(&m.Identity, unsafe.Pointer(&mem.identity))
	RequestLeaseTypeSupport.AsGoStruct(&m.Lease, unsafe.Pointer(&mem.lease))
	RequestPolicyTypeSupport.AsGoStruct(&m.Policy, unsafe.Pointer(&mem.policy))
}

func (t _RequestHeaderTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_api__msg__RequestHeader())
}

type CRequestHeader = C.unitree_api__msg__RequestHeader
type CRequestHeaderSequence = C.unitree_api__msg__RequestHeader__Sequence

func RequestHeaderSequenceToGo(goSlice *[]RequestHeader, cSlice CRequestHeaderSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RequestHeader, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RequestHeaderTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func RequestHeaderSequenceToC(cSlice *CRequestHeaderSequence, goSlice []RequestHeader) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_api__msg__RequestHeader)(C.malloc(C.sizeof_struct_unitree_api__msg__RequestHeader * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RequestHeaderTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func RequestHeaderArrayToGo(goSlice []RequestHeader, cSlice []CRequestHeader) {
	for i := 0; i < len(cSlice); i++ {
		RequestHeaderTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func RequestHeaderArrayToC(cSlice []CRequestHeader, goSlice []RequestHeader) {
	for i := 0; i < len(goSlice); i++ {
		RequestHeaderTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

// Code generated by ros2gen. DO NOT EDIT.

package unitree_api_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_api/msg/request_policy.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_api/RequestPolicy", RequestPolicyTypeSupport)
	humble.RegisterMessage("unitree_api/msg/RequestPolicy", RequestPolicyTypeSupport)
}

type RequestPolicy struct {
	Priority int32 `yaml:"priority"`
	Noreply  bool  `yaml:"noreply"`
}

// NewRequestPolicy creates a new RequestPolicy with default values.
func NewRequestPolicy() *RequestPolicy {
	self := RequestPolicy{}
	self.SetDefaults()
	return &self
}

func (t *RequestPolicy) Clone() *RequestPolicy {
	c := &RequestPolicy{}
	c.Priority = t.Priority
	c.Noreply = t.Noreply
	return c
}

func (t *RequestPolicy) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *RequestPolicy) SetDefaults() {
	t.Priority = 0
	t.Noreply = false
}

func (t *RequestPolicy) GetTypeSupport() humble.MessageTypeSupport {
	return RequestPolicyTypeSupport
}

// RequestPolicyPublisher wraps humble.Publisher to provide type safe helper
// functions
type RequestPolicyPublisher struct {
	*humble.Publisher
}

// NewRequestPolicyPublisher creates and returns a new publisher for the
// RequestPolicy
func NewRequestPolicyPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*RequestPolicyPublisher, error) {
	pub, err := node.NewPublisher(topicName, RequestPolicyTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RequestPolicyPublisher{pub}, nil
}

func (p *RequestPolicyPublisher) Publish(msg *RequestPolicy) error {
	return p.Publisher.Publish(msg)
}

// RequestPolicySubscription wraps humble.Subscription to provide type safe helper
// functions
type RequestPolicySubscription struct {
	*humble.Subscription
}

// RequestPolicySubscriptionCallback type is used to provide a subscription
// handler function for a RequestPolicySubscription.
type RequestPolicySubscriptionCallback func(msg *RequestPolicy, info *humble.MessageInfo, err error)

// NewRequestPolicySubscription creates and returns a new subscription for the
// RequestPolicy
func NewRequestPolicySubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback RequestPolicySubscriptionCallback) (*RequestPolicySubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg RequestPolicy
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, RequestPolicyTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RequestPolicySubscription{sub}, nil
}

func (s *RequestPolicySubscription) TakeMessage(out *RequestPolicy) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRequestPolicySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRequestPolicySlice(dst, src []RequestPolicy) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RequestPolicyTypeSupport humble.MessageTypeSupport = _RequestPolicyTypeSupport{}

type _RequestPolicyTypeSupport struct{}

func (t _RequestPolicyTypeSupport) New() humble.Message {
	return NewRequestPolicy()
}

func (t _RequestPolicyTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_api__msg__RequestPolicy
	return (unsafe.Pointer)(C.unitree_api__msg__RequestPolicy__create())
}

func (t _RequestPolicyTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_api__msg__RequestPolicy__destroy((*C.unitree_api__msg__RequestPolicy)(pointer_to_free))
}

func (t _RequestPolicyTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*RequestPolicy)
	mem := (*C.unitree_api__msg__RequestPolicy)(dst)
	mem.priority = C.int32_t(m.Priority)
	mem.noreply = C.bool(m.Noreply)
}

func (t _RequestPolicyTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RequestPolicy)
	mem := (*C.unitree_api__msg__RequestPolicy)(ros2_message_buffer)
	m.Priority = int32(mem.priority)
	m.Noreply = bool(mem.noreply)
}

func (t _RequestPolicyTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_api__msg__RequestPolicy())
}

type CRequestPolicy = C.unitree_api__msg__RequestPolicy
type CRequestPolicySequence = C.unitree_api__msg__RequestPolicy__Sequence

func RequestPolicySequenceToGo(goSlice *[]RequestPolicy, cSlice CRequestPolicySequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RequestPolicy, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RequestPolicyTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func RequestPolicySequenceToC(cSlice *CRequestPolicySequence, goSlice []RequestPolicy) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_api__msg__RequestPolicy)(C.malloc(C.sizeof_struct_unitree_api__msg__RequestPolicy * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RequestPolicyTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func RequestPolicyArrayToGo(goSlice []RequestPolicy, cSlice []CRequestPolicy) {
	for i := 0; i < len(cSlice); i++ {
		RequestPolicyTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func RequestPolicyArrayToC(cSlice []CRequestPolicy, goSlice []RequestPolicy) {
	for i := 0; i < len(goSlice); i++ {
		RequestPolicyTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

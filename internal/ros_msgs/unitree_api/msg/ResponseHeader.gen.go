// Code generated by ros2gen. DO NOT EDIT.

package unitree_api_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_api/msg/response_header.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_api/ResponseHeader", ResponseHeaderTypeSupport)
	humble.RegisterMessage("unitree_api/msg/ResponseHeader", ResponseHeaderTypeSupport)
}

type ResponseHeader struct {
	Identity RequestIdentity `yaml:"identity"`
	Status   ResponseStatus  `yaml:"status"`
}

// NewResponseHeader creates a new ResponseHeader with default values.
func NewResponseHeader() *ResponseHeader {
	self := ResponseHeader{}
	self.SetDefaults()
	return &self
}

func (t *ResponseHeader) Clone() *ResponseHeader {
	c := &ResponseHeader{}
	c.Identity = *t.Identity.Clone()
	c.Status = *t.Status.Clone()
	return c
}

func (t *ResponseHeader) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ResponseHeader) SetDefaults() {
	t.Identity.SetDefaults()
	t.Status.SetDefaults()
}

func (t *ResponseHeader) GetTypeSupport() humble.MessageTypeSupport {
	return ResponseHeaderTypeSupport
}

// ResponseHeaderPublisher wraps humble.Publisher to provide type safe helper
// functions
type ResponseHeaderPublisher struct {
	*humble.Publisher
}

// NewResponseHeaderPublisher creates and returns a new publisher for the
// ResponseHeader
func NewResponseHeaderPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ResponseHeaderPublisher, error) {
	pub, err := node.NewPublisher(topicName, ResponseHeaderTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ResponseHeaderPublisher{pub}, nil
}

func (p *ResponseHeaderPublisher) Publish(msg *ResponseHeader) error {
	return p.Publisher.Publish(msg)
}

// ResponseHeaderSubscription wraps humble.Subscription to provide type safe helper
// functions
type ResponseHeaderSubscription struct {
	*humble.Subscription
}

// ResponseHeaderSubscriptionCallback type is used to provide a subscription
// handler function for a ResponseHeaderSubscription.
type ResponseHeaderSubscriptionCallback func(msg *ResponseHeader, info *humble.MessageInfo, err error)

// NewResponseHeaderSubscription creates and returns a new subscription for the
// ResponseHeader
func NewResponseHeaderSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ResponseHeaderSubscriptionCallback) (*ResponseHeaderSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ResponseHeader
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ResponseHeaderTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ResponseHeaderSubscription{sub}, nil
}

func (s *ResponseHeaderSubscription) TakeMessage(out *ResponseHeader) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneResponseHeaderSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneResponseHeaderSlice(dst, src []ResponseHeader) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ResponseHeaderTypeSupport humble.MessageTypeSupport = _ResponseHeaderTypeSupport{}

type _ResponseHeaderTypeSupport struct{}

func (t _ResponseHeaderTypeSupport) New() humble.Message {
	return NewResponseHeader()
}

func (t _ResponseHeaderTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_api__msg__ResponseHeader
	return (unsafe.Pointer)(C.unitree_api__msg__ResponseHeader__create())
}

func (t _ResponseHeaderTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_api__msg__ResponseHeader__destroy((*C.unitree_api__msg__ResponseHeader)(pointer_to_free))
}

func (t _ResponseHeaderTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ResponseHeader)
	mem := (*C.unitree_api__msg__ResponseHeader)(dst)
	RequestIdentityTypeSupport.AsCStruct(unsafe.Pointer(&mem.identity), &m.Identity)
	ResponseStatusTypeSupport.AsCStruct(unsafe.Pointer(&mem.status), &m.Status)
}

func (t _ResponseHeaderTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ResponseHeader)
	mem := (*C.unitree_api__msg__ResponseHeader)(ros2_message_buffer)
	RequestIdentityTypeSupport.AsGoStruct(&m.Identity, unsafe.Pointer(&mem.identity))
	ResponseStatusTypeSupport.AsGoStruct(&m.Status, unsafe.Pointer(&mem.status))
}

func (t _ResponseHeaderTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_api__msg__ResponseHeader())
}

type CResponseHeader = C.unitree_api__msg__ResponseHeader
type CResponseHeaderSequence = C.unitree_api__msg__ResponseHeader__Sequence

func ResponseHeaderSequenceToGo(goSlice *[]ResponseHeader, cSlice CResponseHeaderSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ResponseHeader, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ResponseHeaderTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ResponseHeaderSequenceToC(cSlice *CResponseHeaderSequence, goSlice []ResponseHeader) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_api__msg__ResponseHeader)(C.malloc(C.sizeof_struct_unitree_api__msg__ResponseHeader * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ResponseHeaderTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ResponseHeaderArrayToGo(goSlice []ResponseHeader, cSlice []CResponseHeader) {
	for i := 0; i < len(cSlice); i++ {
		ResponseHeaderTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ResponseHeaderArrayToC(cSlice []CResponseHeader, goSlice []ResponseHeader) {
	for i := 0; i < len(goSlice); i++ {
		ResponseHeaderTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

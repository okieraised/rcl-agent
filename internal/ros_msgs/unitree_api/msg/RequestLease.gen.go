// Code generated by ros2gen. DO NOT EDIT.

package unitree_api_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_api/msg/request_lease.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_api/RequestLease", RequestLeaseTypeSupport)
	humble.RegisterMessage("unitree_api/msg/RequestLease", RequestLeaseTypeSupport)
}

type RequestLease struct {
	Id int64 `yaml:"id"`
}

// NewRequestLease creates a new RequestLease with default values.
func NewRequestLease() *RequestLease {
	self := RequestLease{}
	self.SetDefaults()
	return &self
}

func (t *RequestLease) Clone() *RequestLease {
	c := &RequestLease{}
	c.Id = t.Id
	return c
}

func (t *RequestLease) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *RequestLease) SetDefaults() {
	t.Id = 0
}

func (t *RequestLease) GetTypeSupport() humble.MessageTypeSupport {
	return RequestLeaseTypeSupport
}

// RequestLeasePublisher wraps humble.Publisher to provide type safe helper
// functions
type RequestLeasePublisher struct {
	*humble.Publisher
}

// NewRequestLeasePublisher creates and returns a new publisher for the
// RequestLease
func NewRequestLeasePublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*RequestLeasePublisher, error) {
	pub, err := node.NewPublisher(topicName, RequestLeaseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RequestLeasePublisher{pub}, nil
}

func (p *RequestLeasePublisher) Publish(msg *RequestLease) error {
	return p.Publisher.Publish(msg)
}

// RequestLeaseSubscription wraps humble.Subscription to provide type safe helper
// functions
type RequestLeaseSubscription struct {
	*humble.Subscription
}

// RequestLeaseSubscriptionCallback type is used to provide a subscription
// handler function for a RequestLeaseSubscription.
type RequestLeaseSubscriptionCallback func(msg *RequestLease, info *humble.MessageInfo, err error)

// NewRequestLeaseSubscription creates and returns a new subscription for the
// RequestLease
func NewRequestLeaseSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback RequestLeaseSubscriptionCallback) (*RequestLeaseSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg RequestLease
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, RequestLeaseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RequestLeaseSubscription{sub}, nil
}

func (s *RequestLeaseSubscription) TakeMessage(out *RequestLease) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRequestLeaseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRequestLeaseSlice(dst, src []RequestLease) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RequestLeaseTypeSupport humble.MessageTypeSupport = _RequestLeaseTypeSupport{}

type _RequestLeaseTypeSupport struct{}

func (t _RequestLeaseTypeSupport) New() humble.Message {
	return NewRequestLease()
}

func (t _RequestLeaseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_api__msg__RequestLease
	return (unsafe.Pointer)(C.unitree_api__msg__RequestLease__create())
}

func (t _RequestLeaseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_api__msg__RequestLease__destroy((*C.unitree_api__msg__RequestLease)(pointer_to_free))
}

func (t _RequestLeaseTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*RequestLease)
	mem := (*C.unitree_api__msg__RequestLease)(dst)
	mem.id = C.int64_t(m.Id)
}

func (t _RequestLeaseTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RequestLease)
	mem := (*C.unitree_api__msg__RequestLease)(ros2_message_buffer)
	m.Id = int64(mem.id)
}

func (t _RequestLeaseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_api__msg__RequestLease())
}

type CRequestLease = C.unitree_api__msg__RequestLease
type CRequestLeaseSequence = C.unitree_api__msg__RequestLease__Sequence

func RequestLeaseSequenceToGo(goSlice *[]RequestLease, cSlice CRequestLeaseSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RequestLease, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RequestLeaseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func RequestLeaseSequenceToC(cSlice *CRequestLeaseSequence, goSlice []RequestLease) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_api__msg__RequestLease)(C.malloc(C.sizeof_struct_unitree_api__msg__RequestLease * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RequestLeaseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func RequestLeaseArrayToGo(goSlice []RequestLease, cSlice []CRequestLease) {
	for i := 0; i < len(cSlice); i++ {
		RequestLeaseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func RequestLeaseArrayToC(cSlice []CRequestLease, goSlice []RequestLease) {
	for i := 0; i < len(goSlice); i++ {
		RequestLeaseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}

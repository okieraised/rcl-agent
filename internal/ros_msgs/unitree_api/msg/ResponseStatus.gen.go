// Code generated by ros2gen. DO NOT EDIT.

package unitree_api_msg

import (
	"unsafe"

	"github.com/okieraised/rclgo/humble"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <unitree_api/msg/response_status.h>

*/
import "C"

func init() {
	humble.RegisterMessage("unitree_api/ResponseStatus", ResponseStatusTypeSupport)
	humble.RegisterMessage("unitree_api/msg/ResponseStatus", ResponseStatusTypeSupport)
}

type ResponseStatus struct {
	Code int32 `yaml:"code"`
}

// NewResponseStatus creates a new ResponseStatus with default values.
func NewResponseStatus() *ResponseStatus {
	self := ResponseStatus{}
	self.SetDefaults()
	return &self
}

func (t *ResponseStatus) Clone() *ResponseStatus {
	c := &ResponseStatus{}
	c.Code = t.Code
	return c
}

func (t *ResponseStatus) CloneMsg() humble.Message {
	return t.Clone()
}

func (t *ResponseStatus) SetDefaults() {
	t.Code = 0
}

func (t *ResponseStatus) GetTypeSupport() humble.MessageTypeSupport {
	return ResponseStatusTypeSupport
}

// ResponseStatusPublisher wraps humble.Publisher to provide type safe helper
// functions
type ResponseStatusPublisher struct {
	*humble.Publisher
}

// NewResponseStatusPublisher creates and returns a new publisher for the
// ResponseStatus
func NewResponseStatusPublisher(node *humble.Node, topicName string, options *humble.PublisherOptions) (*ResponseStatusPublisher, error) {
	pub, err := node.NewPublisher(topicName, ResponseStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ResponseStatusPublisher{pub}, nil
}

func (p *ResponseStatusPublisher) Publish(msg *ResponseStatus) error {
	return p.Publisher.Publish(msg)
}

// ResponseStatusSubscription wraps humble.Subscription to provide type safe helper
// functions
type ResponseStatusSubscription struct {
	*humble.Subscription
}

// ResponseStatusSubscriptionCallback type is used to provide a subscription
// handler function for a ResponseStatusSubscription.
type ResponseStatusSubscriptionCallback func(msg *ResponseStatus, info *humble.MessageInfo, err error)

// NewResponseStatusSubscription creates and returns a new subscription for the
// ResponseStatus
func NewResponseStatusSubscription(node *humble.Node, topicName string, opts *humble.SubscriptionOptions, subscriptionCallback ResponseStatusSubscriptionCallback) (*ResponseStatusSubscription, error) {
	callback := func(s *humble.Subscription) {
		var msg ResponseStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topicName, ResponseStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ResponseStatusSubscription{sub}, nil
}

func (s *ResponseStatusSubscription) TakeMessage(out *ResponseStatus) (*humble.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneResponseStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneResponseStatusSlice(dst, src []ResponseStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ResponseStatusTypeSupport humble.MessageTypeSupport = _ResponseStatusTypeSupport{}

type _ResponseStatusTypeSupport struct{}

func (t _ResponseStatusTypeSupport) New() humble.Message {
	return NewResponseStatus()
}

func (t _ResponseStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.unitree_api__msg__ResponseStatus
	return (unsafe.Pointer)(C.unitree_api__msg__ResponseStatus__create())
}

func (t _ResponseStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.unitree_api__msg__ResponseStatus__destroy((*C.unitree_api__msg__ResponseStatus)(pointer_to_free))
}

func (t _ResponseStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg humble.Message) {
	m := msg.(*ResponseStatus)
	mem := (*C.unitree_api__msg__ResponseStatus)(dst)
	mem.code = C.int32_t(m.Code)
}

func (t _ResponseStatusTypeSupport) AsGoStruct(msg humble.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ResponseStatus)
	mem := (*C.unitree_api__msg__ResponseStatus)(ros2_message_buffer)
	m.Code = int32(mem.code)
}

func (t _ResponseStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__unitree_api__msg__ResponseStatus())
}

type CResponseStatus = C.unitree_api__msg__ResponseStatus
type CResponseStatusSequence = C.unitree_api__msg__ResponseStatus__Sequence

func ResponseStatusSequenceToGo(goSlice *[]ResponseStatus, cSlice CResponseStatusSequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ResponseStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ResponseStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}

func ResponseStatusSequenceToC(cSlice *CResponseStatusSequence, goSlice []ResponseStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.unitree_api__msg__ResponseStatus)(C.malloc(C.sizeof_struct_unitree_api__msg__ResponseStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ResponseStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}

func ResponseStatusArrayToGo(goSlice []ResponseStatus, cSlice []CResponseStatus) {
	for i := 0; i < len(cSlice); i++ {
		ResponseStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}

func ResponseStatusArrayToC(cSlice []CResponseStatus, goSlice []ResponseStatus) {
	for i := 0; i < len(goSlice); i++ {
		ResponseStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
